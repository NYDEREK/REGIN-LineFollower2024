
REGIN_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e850  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800ea30  0800ea30  0001ea30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c0  0800f0c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0c0  0800f0c0  0001f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0c8  0800f0c8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c8  0800f0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0cc  0800f0cc  0001f0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001e4  0800f2b4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800f2b4  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cee8  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038eb  00000000  00000000  0003d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  000409e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  000420c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004482  00000000  00000000  00043620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c011  00000000  00000000  00047aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001146b6  00000000  00000000  00063ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007648  00000000  00000000  001781bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ea18 	.word	0x0800ea18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800ea18 	.word	0x0800ea18

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9aa 	b.w	8001064 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	468e      	mov	lr, r1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14d      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da2:	428a      	cmp	r2, r1
 8000da4:	4694      	mov	ip, r2
 8000da6:	d969      	bls.n	8000e7c <__udivmoddi4+0xe8>
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b152      	cbz	r2, 8000dc4 <__udivmoddi4+0x30>
 8000dae:	fa01 f302 	lsl.w	r3, r1, r2
 8000db2:	f1c2 0120 	rsb	r1, r2, #32
 8000db6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	0c21      	lsrs	r1, r4, #16
 8000dca:	fbbe f6f8 	udiv	r6, lr, r8
 8000dce:	fa1f f78c 	uxth.w	r7, ip
 8000dd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dda:	fb06 f107 	mul.w	r1, r6, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dea:	f080 811f 	bcs.w	800102c <__udivmoddi4+0x298>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 811c 	bls.w	800102c <__udivmoddi4+0x298>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3310 	mls	r3, r8, r0, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb00 f707 	mul.w	r7, r0, r7
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x92>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e18:	f080 810a 	bcs.w	8001030 <__udivmoddi4+0x29c>
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	f240 8107 	bls.w	8001030 <__udivmoddi4+0x29c>
 8000e22:	4464      	add	r4, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	1be4      	subs	r4, r4, r7
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	b11d      	cbz	r5, 8000e38 <__udivmoddi4+0xa4>
 8000e30:	40d4      	lsrs	r4, r2
 8000e32:	2300      	movs	r3, #0
 8000e34:	e9c5 4300 	strd	r4, r3, [r5]
 8000e38:	4631      	mov	r1, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0xc2>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80ef 	beq.w	8001026 <__udivmoddi4+0x292>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x160>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0xd4>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80f9 	bhi.w	800105a <__udivmoddi4+0x2c6>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	469e      	mov	lr, r3
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0e0      	beq.n	8000e38 <__udivmoddi4+0xa4>
 8000e76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e7a:	e7dd      	b.n	8000e38 <__udivmoddi4+0xa4>
 8000e7c:	b902      	cbnz	r2, 8000e80 <__udivmoddi4+0xec>
 8000e7e:	deff      	udf	#255	; 0xff
 8000e80:	fab2 f282 	clz	r2, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	f040 8092 	bne.w	8000fae <__udivmoddi4+0x21a>
 8000e8a:	eba1 010c 	sub.w	r1, r1, ip
 8000e8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	2601      	movs	r6, #1
 8000e98:	0c20      	lsrs	r0, r4, #16
 8000e9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ea2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea6:	fb0e f003 	mul.w	r0, lr, r3
 8000eaa:	4288      	cmp	r0, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x12c>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x12a>
 8000eb8:	4288      	cmp	r0, r1
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2c0>
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ecc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ed0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed4:	45a6      	cmp	lr, r4
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x156>
 8000ed8:	eb1c 0404 	adds.w	r4, ip, r4
 8000edc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee0:	d202      	bcs.n	8000ee8 <__udivmoddi4+0x154>
 8000ee2:	45a6      	cmp	lr, r4
 8000ee4:	f200 80bb 	bhi.w	800105e <__udivmoddi4+0x2ca>
 8000ee8:	4608      	mov	r0, r1
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ef2:	e79c      	b.n	8000e2e <__udivmoddi4+0x9a>
 8000ef4:	f1c6 0720 	rsb	r7, r6, #32
 8000ef8:	40b3      	lsls	r3, r6
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa20 f407 	lsr.w	r4, r0, r7
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	431c      	orrs	r4, r3
 8000f0c:	40f9      	lsrs	r1, r7
 8000f0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f12:	fa00 f306 	lsl.w	r3, r0, r6
 8000f16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f1a:	0c20      	lsrs	r0, r4, #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fb09 1118 	mls	r1, r9, r8, r1
 8000f24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f28:	fb08 f00e 	mul.w	r0, r8, lr
 8000f2c:	4288      	cmp	r0, r1
 8000f2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f32:	d90b      	bls.n	8000f4c <__udivmoddi4+0x1b8>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f3c:	f080 8088 	bcs.w	8001050 <__udivmoddi4+0x2bc>
 8000f40:	4288      	cmp	r0, r1
 8000f42:	f240 8085 	bls.w	8001050 <__udivmoddi4+0x2bc>
 8000f46:	f1a8 0802 	sub.w	r8, r8, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	1a09      	subs	r1, r1, r0
 8000f4e:	b2a4      	uxth	r4, r4
 8000f50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f54:	fb09 1110 	mls	r1, r9, r0, r1
 8000f58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f60:	458e      	cmp	lr, r1
 8000f62:	d908      	bls.n	8000f76 <__udivmoddi4+0x1e2>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f6c:	d26c      	bcs.n	8001048 <__udivmoddi4+0x2b4>
 8000f6e:	458e      	cmp	lr, r1
 8000f70:	d96a      	bls.n	8001048 <__udivmoddi4+0x2b4>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4461      	add	r1, ip
 8000f76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f7e:	eba1 010e 	sub.w	r1, r1, lr
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	46c8      	mov	r8, r9
 8000f86:	46a6      	mov	lr, r4
 8000f88:	d356      	bcc.n	8001038 <__udivmoddi4+0x2a4>
 8000f8a:	d053      	beq.n	8001034 <__udivmoddi4+0x2a0>
 8000f8c:	b15d      	cbz	r5, 8000fa6 <__udivmoddi4+0x212>
 8000f8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f92:	eb61 010e 	sbc.w	r1, r1, lr
 8000f96:	fa01 f707 	lsl.w	r7, r1, r7
 8000f9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f9e:	40f1      	lsrs	r1, r6
 8000fa0:	431f      	orrs	r7, r3
 8000fa2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4631      	mov	r1, r6
 8000faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fae:	f1c2 0320 	rsb	r3, r2, #32
 8000fb2:	40d8      	lsrs	r0, r3
 8000fb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	4301      	orrs	r1, r0
 8000fc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc4:	fa1f fe8c 	uxth.w	lr, ip
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fd0:	0c0b      	lsrs	r3, r1, #16
 8000fd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x260>
 8000fe2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fe6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fea:	d22f      	bcs.n	800104c <__udivmoddi4+0x2b8>
 8000fec:	429e      	cmp	r6, r3
 8000fee:	d92d      	bls.n	800104c <__udivmoddi4+0x2b8>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	4463      	add	r3, ip
 8000ff4:	1b9b      	subs	r3, r3, r6
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ffc:	fb07 3316 	mls	r3, r7, r6, r3
 8001000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001004:	fb06 f30e 	mul.w	r3, r6, lr
 8001008:	428b      	cmp	r3, r1
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x28a>
 800100c:	eb1c 0101 	adds.w	r1, ip, r1
 8001010:	f106 38ff 	add.w	r8, r6, #4294967295
 8001014:	d216      	bcs.n	8001044 <__udivmoddi4+0x2b0>
 8001016:	428b      	cmp	r3, r1
 8001018:	d914      	bls.n	8001044 <__udivmoddi4+0x2b0>
 800101a:	3e02      	subs	r6, #2
 800101c:	4461      	add	r1, ip
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001024:	e738      	b.n	8000e98 <__udivmoddi4+0x104>
 8001026:	462e      	mov	r6, r5
 8001028:	4628      	mov	r0, r5
 800102a:	e705      	b.n	8000e38 <__udivmoddi4+0xa4>
 800102c:	4606      	mov	r6, r0
 800102e:	e6e3      	b.n	8000df8 <__udivmoddi4+0x64>
 8001030:	4618      	mov	r0, r3
 8001032:	e6f8      	b.n	8000e26 <__udivmoddi4+0x92>
 8001034:	454b      	cmp	r3, r9
 8001036:	d2a9      	bcs.n	8000f8c <__udivmoddi4+0x1f8>
 8001038:	ebb9 0802 	subs.w	r8, r9, r2
 800103c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001040:	3801      	subs	r0, #1
 8001042:	e7a3      	b.n	8000f8c <__udivmoddi4+0x1f8>
 8001044:	4646      	mov	r6, r8
 8001046:	e7ea      	b.n	800101e <__udivmoddi4+0x28a>
 8001048:	4620      	mov	r0, r4
 800104a:	e794      	b.n	8000f76 <__udivmoddi4+0x1e2>
 800104c:	4640      	mov	r0, r8
 800104e:	e7d1      	b.n	8000ff4 <__udivmoddi4+0x260>
 8001050:	46d0      	mov	r8, sl
 8001052:	e77b      	b.n	8000f4c <__udivmoddi4+0x1b8>
 8001054:	3b02      	subs	r3, #2
 8001056:	4461      	add	r1, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x12c>
 800105a:	4630      	mov	r0, r6
 800105c:	e709      	b.n	8000e72 <__udivmoddi4+0xde>
 800105e:	4464      	add	r4, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e742      	b.n	8000eea <__udivmoddi4+0x156>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <RB_Write>:
 */
#include "main.h"
#include "RingBuffer.h"

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t value)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	425a      	negs	r2, r3
 800107c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001080:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001084:	bf58      	it	pl
 8001086:	4253      	negpl	r3, r2
 8001088:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	885b      	ldrh	r3, [r3, #2]
 8001092:	429a      	cmp	r2, r3
 8001094:	d101      	bne.n	800109a <RB_Write+0x32>
	{
		return RB_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00b      	b.n	80010b2 <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = value;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <RB_Read>:

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *value)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d101      	bne.n	80010d8 <RB_Read+0x1a>
	{
		return RB_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e015      	b.n	8001104 <RB_Read+0x46>
	}

	*value = Buf->Buffer[Buf->Tail];
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	885b      	ldrh	r3, [r3, #2]
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	791a      	ldrb	r2, [r3, #4]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	3301      	adds	r3, #1
 80010ee:	425a      	negs	r2, r3
 80010f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f8:	bf58      	it	pl
 80010fa:	4253      	negpl	r3, r2
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <Parser_TakeLine>:
#include "Line_Follower.h"
#include "Turbine.h"
char My_Name[32] = "REGIN V1";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	do
	{
		RB_Read(Buf, &Tmp);
 800111e:	f107 030e 	add.w	r3, r7, #14
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffca 	bl	80010be <RB_Read>

		if(Tmp == ENDLINE)
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	2b0a      	cmp	r3, #10
 800112e:	d105      	bne.n	800113c <Parser_TakeLine+0x2c>
		{
			ReceivedData[i] = 0;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e004      	b.n	8001146 <Parser_TakeLine+0x36>

		}

		else
		{
			ReceivedData[i] = Tmp;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]

	} while(Tmp != ENDLINE);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d1e5      	bne.n	800111e <Parser_TakeLine+0xe>

}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <kp_change>:

static void kp_change(LineFollower_t *LF)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <kp_change+0x48>)
 8001166:	2000      	movs	r0, #0
 8001168:	f00a fcd4 	bl	800bb14 <strtok>
 800116c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d011      	beq.n	800119a <kp_change+0x3e>
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff f85c 	bl	8000234 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	2b1f      	cmp	r3, #31
 8001180:	d80b      	bhi.n	800119a <kp_change+0x3e>
	{
		LF->Kp = atof(ParsePointer);
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f009 f9d6 	bl	800a534 <atof>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd62 	bl	8000c58 <__aeabi_d2f>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
	}

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800ea30 	.word	0x0800ea30

080011a8 <kd_change>:
static void kd_change(LineFollower_t *LF)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011b0:	490f      	ldr	r1, [pc, #60]	; (80011f0 <kd_change+0x48>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f00a fcae 	bl	800bb14 <strtok>
 80011b8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d011      	beq.n	80011e6 <kd_change+0x3e>
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f836 	bl	8000234 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d80b      	bhi.n	80011e6 <kd_change+0x3e>
	{
		LF->Kd = atof(ParsePointer);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f009 f9b0 	bl	800a534 <atof>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd3c 	bl	8000c58 <__aeabi_d2f>
 80011e0:	4602      	mov	r2, r0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
	}
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800ea30 	.word	0x0800ea30

080011f4 <Base_speed_change>:
static void Base_speed_change(LineFollower_t *LF)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80011fc:	4915      	ldr	r1, [pc, #84]	; (8001254 <Base_speed_change+0x60>)
 80011fe:	2000      	movs	r0, #0
 8001200:	f00a fc88 	bl	800bb14 <strtok>
 8001204:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01d      	beq.n	800124a <Base_speed_change+0x56>
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff f810 	bl	8000234 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	2b1f      	cmp	r3, #31
 8001218:	d817      	bhi.n	800124a <Base_speed_change+0x56>
	{
		LF->Base_speed_R = atof(ParsePointer);
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f009 f98a 	bl	800a534 <atof>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcce 	bl	8000bc8 <__aeabi_d2iz>
 800122c:	4602      	mov	r2, r0
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	609a      	str	r2, [r3, #8]
		LF->Base_speed_L = atof(ParsePointer);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f009 f97e 	bl	800a534 <atof>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcc2 	bl	8000bc8 <__aeabi_d2iz>
 8001244:	4602      	mov	r2, r0
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60da      	str	r2, [r3, #12]
	}
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800ea30 	.word	0x0800ea30

08001258 <Max_speed_change>:

static void Max_speed_change(LineFollower_t *LF)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001260:	4910      	ldr	r1, [pc, #64]	; (80012a4 <Max_speed_change+0x4c>)
 8001262:	2000      	movs	r0, #0
 8001264:	f00a fc56 	bl	800bb14 <strtok>
 8001268:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <Max_speed_change+0x42>
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7fe ffde 	bl	8000234 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	2b1f      	cmp	r3, #31
 800127c:	d80d      	bhi.n	800129a <Max_speed_change+0x42>
	{
//		LF->Max_speed_R = atof(ParsePointer);
//		LF->Max_speed_L = atof(ParsePointer);
		//TODO: dodaje parsowanie turbiny i zmien to tu jak było
		LF->turbine.Speed = atof(ParsePointer);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f009 f958 	bl	800a534 <atof>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fcc4 	bl	8000c18 <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	0800ea30 	.word	0x0800ea30

080012a8 <Sharp_bend_speed_right_change>:
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012b0:	490f      	ldr	r1, [pc, #60]	; (80012f0 <Sharp_bend_speed_right_change+0x48>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f00a fc2e 	bl	800bb14 <strtok>
 80012b8:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d011      	beq.n	80012e6 <Sharp_bend_speed_right_change+0x3e>
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7fe ffb6 	bl	8000234 <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b1f      	cmp	r3, #31
 80012cc:	d80b      	bhi.n	80012e6 <Sharp_bend_speed_right_change+0x3e>
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f009 f930 	bl	800a534 <atof>
 80012d4:	ec53 2b10 	vmov	r2, r3, d0
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc74 	bl	8000bc8 <__aeabi_d2iz>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
	}
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800ea30 	.word	0x0800ea30

080012f4 <Sharp_bend_speed_left_change>:
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 80012fc:	490f      	ldr	r1, [pc, #60]	; (800133c <Sharp_bend_speed_left_change+0x48>)
 80012fe:	2000      	movs	r0, #0
 8001300:	f00a fc08 	bl	800bb14 <strtok>
 8001304:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d011      	beq.n	8001332 <Sharp_bend_speed_left_change+0x3e>
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7fe ff90 	bl	8000234 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	2b1f      	cmp	r3, #31
 8001318:	d80b      	bhi.n	8001332 <Sharp_bend_speed_left_change+0x3e>
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f009 f90a 	bl	800a534 <atof>
 8001320:	ec53 2b10 	vmov	r2, r3, d0
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc4e 	bl	8000bc8 <__aeabi_d2iz>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	61da      	str	r2, [r3, #28]
	}
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	0800ea30 	.word	0x0800ea30

08001340 <Bend_speed_right_change>:
static void Bend_speed_right_change(LineFollower_t *LF)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001348:	490f      	ldr	r1, [pc, #60]	; (8001388 <Bend_speed_right_change+0x48>)
 800134a:	2000      	movs	r0, #0
 800134c:	f00a fbe2 	bl	800bb14 <strtok>
 8001350:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d011      	beq.n	800137e <Bend_speed_right_change+0x3e>
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7fe ff6a 	bl	8000234 <strlen>
 8001360:	4603      	mov	r3, r0
 8001362:	2b1f      	cmp	r3, #31
 8001364:	d80b      	bhi.n	800137e <Bend_speed_right_change+0x3e>
	{
	LF->Bend_speed_right = atof(ParsePointer);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f009 f8e4 	bl	800a534 <atof>
 800136c:	ec53 2b10 	vmov	r2, r3, d0
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc28 	bl	8000bc8 <__aeabi_d2iz>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	621a      	str	r2, [r3, #32]
	}
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800ea30 	.word	0x0800ea30

0800138c <Bend_speed_left_change>:
static void Bend_speed_left_change(LineFollower_t *LF)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001394:	490f      	ldr	r1, [pc, #60]	; (80013d4 <Bend_speed_left_change+0x48>)
 8001396:	2000      	movs	r0, #0
 8001398:	f00a fbbc 	bl	800bb14 <strtok>
 800139c:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d011      	beq.n	80013ca <Bend_speed_left_change+0x3e>
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7fe ff44 	bl	8000234 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b1f      	cmp	r3, #31
 80013b0:	d80b      	bhi.n	80013ca <Bend_speed_left_change+0x3e>
	{
	LF->Bend_speed_left = atof(ParsePointer);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f009 f8be 	bl	800a534 <atof>
 80013b8:	ec53 2b10 	vmov	r2, r3, d0
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc02 	bl	8000bc8 <__aeabi_d2iz>
 80013c4:	4602      	mov	r2, r0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800ea30 	.word	0x0800ea30

080013d8 <App_Controll>:
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b0a4      	sub	sp, #144	; 0x90
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
	/*Stop robot*/
	if(RxData == 'N')
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b4e      	cmp	r3, #78	; 0x4e
 80013e8:	d14a      	bne.n	8001480 <App_Controll+0xa8>
	{
		Turbine_Stop(&LineFollower->turbine);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3338      	adds	r3, #56	; 0x38
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fcf7 	bl	8001de2 <Turbine_Stop>
		uint8_t buffer[124];
		/*Stop GRUZIK2.0 and turn off the LED*/
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2104      	movs	r1, #4
 80013f8:	485b      	ldr	r0, [pc, #364]	; (8001568 <App_Controll+0x190>)
 80013fa:	f004 fbbb 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2110      	movs	r1, #16
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f004 fbb5 	bl	8005b74 <HAL_GPIO_WritePin>

		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8c0 	bl	8000594 <__aeabi_i2d>
 8001414:	a34c      	add	r3, pc, #304	; (adr r3, 8001548 <App_Controll+0x170>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f925 	bl	8000668 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	a34a      	add	r3, pc, #296	; (adr r3, 8001550 <App_Controll+0x178>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fa46 	bl	80008bc <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fc0e 	bl	8000c58 <__aeabi_d2f>
 800143c:	4602      	mov	r2, r0
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001446:	461c      	mov	r4, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f8b3 	bl	80005b8 <__aeabi_f2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	f107 0008 	add.w	r0, r7, #8
 800145a:	e9cd 2300 	strd	r2, r3, [sp]
 800145e:	4622      	mov	r2, r4
 8001460:	4942      	ldr	r1, [pc, #264]	; (800156c <App_Controll+0x194>)
 8001462:	f009 fd07 	bl	800ae74 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe fee2 	bl	8000234 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 0108 	add.w	r1, r7, #8
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	483d      	ldr	r0, [pc, #244]	; (8001570 <App_Controll+0x198>)
 800147c:	f006 ff7e 	bl	800837c <HAL_UART_Transmit>
	}
	/*Start robot*/
	if (RxData == 'Y')
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b59      	cmp	r3, #89	; 0x59
 8001484:	f040 8109 	bne.w	800169a <App_Controll+0x2c2>
	{
		Turbine_Start(&LineFollower->turbine);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3338      	adds	r3, #56	; 0x38
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fc59 	bl	8001d44 <Turbine_Start>
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[124];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87c 	bl	8000594 <__aeabi_i2d>
 800149c:	a32a      	add	r3, pc, #168	; (adr r3, 8001548 <App_Controll+0x170>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f8e1 	bl	8000668 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	a328      	add	r3, pc, #160	; (adr r3, 8001550 <App_Controll+0x178>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff fa02 	bl	80008bc <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fbca 	bl	8000c58 <__aeabi_d2f>
 80014c4:	4602      	mov	r2, r0
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_f2d>
 80014d4:	a320      	add	r3, pc, #128	; (adr r3, 8001558 <App_Controll+0x180>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f9ef 	bl	80008bc <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <App_Controll+0x19c>)
 80014ec:	f7ff f8bc 	bl	8000668 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fbae 	bl	8000c58 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f856 	bl	80005b8 <__aeabi_f2d>
 800150c:	a314      	add	r3, pc, #80	; (adr r3, 8001560 <App_Controll+0x188>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff fb1b 	bl	8000b4c <__aeabi_dcmplt>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d031      	beq.n	8001580 <App_Controll+0x1a8>
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4915      	ldr	r1, [pc, #84]	; (8001578 <App_Controll+0x1a0>)
 8001522:	4618      	mov	r0, r3
 8001524:	f009 fca6 	bl	800ae74 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe81 	bl	8000234 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	f107 0108 	add.w	r1, r7, #8
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <App_Controll+0x198>)
 800153e:	f006 ff1d 	bl	800837c <HAL_UART_Transmit>
 8001542:	e337      	b.n	8001bb4 <App_Controll+0x7dc>
 8001544:	f3af 8000 	nop.w
 8001548:	9999999a 	.word	0x9999999a
 800154c:	40209999 	.word	0x40209999
 8001550:	00000000 	.word	0x00000000
 8001554:	40adee00 	.word	0x40adee00
 8001558:	47ae147b 	.word	0x47ae147b
 800155c:	40207ae1 	.word	0x40207ae1
 8001560:	cccccccd 	.word	0xcccccccd
 8001564:	401ccccc 	.word	0x401ccccc
 8001568:	48000c00 	.word	0x48000c00
 800156c:	0800ea34 	.word	0x0800ea34
 8001570:	200004c0 	.word	0x200004c0
 8001574:	40590000 	.word	0x40590000
 8001578:	0800ea64 	.word	0x0800ea64
 800157c:	42c80000 	.word	0x42c80000
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;
 8001580:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800157c <App_Controll+0x1a4>
 8001584:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800157c <App_Controll+0x1a4>
 8001590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001594:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 800157c <App_Controll+0x1a4>
 8001598:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		if(LineFollower->Speed_level < 1)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d503      	bpl.n	80015c8 <App_Controll+0x1f0>
		{
			LineFollower->Speed_level = 1;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffe1 	bl	8000594 <__aeabi_i2d>
 80015d2:	a3bc      	add	r3, pc, #752	; (adr r3, 80018c4 <App_Controll+0x4ec>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f846 	bl	8000668 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	a3b9      	add	r3, pc, #740	; (adr r3, 80018cc <App_Controll+0x4f4>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f967 	bl	80008bc <__aeabi_ddiv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fb2f 	bl	8000c58 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001604:	461c      	mov	r4, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffd4 	bl	80005b8 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	f107 0008 	add.w	r0, r7, #8
 8001618:	e9cd 2300 	strd	r2, r3, [sp]
 800161c:	4622      	mov	r2, r4
 800161e:	49a0      	ldr	r1, [pc, #640]	; (80018a0 <App_Controll+0x4c8>)
 8001620:	f009 fc28 	bl	800ae74 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fe03 	bl	8000234 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	f107 0108 	add.w	r1, r7, #8
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	489a      	ldr	r0, [pc, #616]	; (80018a4 <App_Controll+0x4cc>)
 800163a:	f006 fe9f 	bl	800837c <HAL_UART_Transmit>


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
 800163e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001642:	f7fe ffb9 	bl	80005b8 <__aeabi_f2d>
 8001646:	4604      	mov	r4, r0
 8001648:	460d      	mov	r5, r1
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ffb2 	bl	80005b8 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	f107 0008 	add.w	r0, r7, #8
 800165c:	e9cd 2300 	strd	r2, r3, [sp]
 8001660:	4622      	mov	r2, r4
 8001662:	462b      	mov	r3, r5
 8001664:	4990      	ldr	r1, [pc, #576]	; (80018a8 <App_Controll+0x4d0>)
 8001666:	f009 fc05 	bl	800ae74 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fde0 	bl	8000234 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	2364      	movs	r3, #100	; 0x64
 800167e:	4889      	ldr	r0, [pc, #548]	; (80018a4 <App_Controll+0x4cc>)
 8001680:	f006 fe7c 	bl	800837c <HAL_UART_Transmit>

		/*Stop LineFollower and turn on the LED*/
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2104      	movs	r1, #4
 8001688:	4888      	ldr	r0, [pc, #544]	; (80018ac <App_Controll+0x4d4>)
 800168a:	f004 fa73 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2110      	movs	r1, #16
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f004 fa6d 	bl	8005b74 <HAL_GPIO_WritePin>
	}
	/*LOW mode*/
	if(RxData == 'a')
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b61      	cmp	r3, #97	; 0x61
 800169e:	d123      	bne.n	80016e8 <App_Controll+0x310>
	{
		LineFollower->Base_speed_R = 100;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2264      	movs	r2, #100	; 0x64
 80016a4:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2264      	movs	r2, #100	; 0x64
 80016aa:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 100;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2264      	movs	r2, #100	; 0x64
 80016b0:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 100;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2264      	movs	r2, #100	; 0x64
 80016b6:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80016be:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 95;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	225f      	movs	r2, #95	; 0x5f
 80016c4:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -25;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f06f 0218 	mvn.w	r2, #24
 80016cc:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 100;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2264      	movs	r2, #100	; 0x64
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.01;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4a76      	ldr	r2, [pc, #472]	; (80018b0 <App_Controll+0x4d8>)
 80016d8:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	4a75      	ldr	r2, [pc, #468]	; (80018b4 <App_Controll+0x4dc>)
 80016de:	605a      	str	r2, [r3, #4]
		LineFollower->turbine.Speed = 0;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	/*LOW+ mode*/
	if(RxData == 'd')
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d123      	bne.n	8001736 <App_Controll+0x35e>
	{
		LineFollower->Base_speed_R = 100;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2264      	movs	r2, #100	; 0x64
 80016f2:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 100;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2264      	movs	r2, #100	; 0x64
 80016f8:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2296      	movs	r2, #150	; 0x96
 80016fe:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2296      	movs	r2, #150	; 0x96
 8001704:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -30;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f06f 021d 	mvn.w	r2, #29
 800170c:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 100;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2264      	movs	r2, #100	; 0x64
 8001712:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -40;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f06f 0227 	mvn.w	r2, #39	; 0x27
 800171a:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 80;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2250      	movs	r2, #80	; 0x50
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4a64      	ldr	r2, [pc, #400]	; (80018b8 <App_Controll+0x4e0>)
 8001726:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.08;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	4a62      	ldr	r2, [pc, #392]	; (80018b4 <App_Controll+0x4dc>)
 800172c:	605a      	str	r2, [r3, #4]
		LineFollower->turbine.Speed = 0;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	/*Medium mode*/
	if(RxData == 'b')
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b62      	cmp	r3, #98	; 0x62
 800173a:	d124      	bne.n	8001786 <App_Controll+0x3ae>
	{
		LineFollower->Base_speed_R = 115;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2273      	movs	r2, #115	; 0x73
 8001740:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 115;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2273      	movs	r2, #115	; 0x73
 8001746:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 115;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2273      	movs	r2, #115	; 0x73
 800174c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 115;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2273      	movs	r2, #115	; 0x73
 8001752:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800175a:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 85;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2255      	movs	r2, #85	; 0x55
 8001760:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001768:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	226e      	movs	r2, #110	; 0x6e
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <App_Controll+0x4e0>)
 8001774:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.25;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800177c:	605a      	str	r2, [r3, #4]
		LineFollower->turbine.Speed = 0;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2200      	movs	r2, #0
 8001782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	}
	/*Medium+ mode*/
	if(RxData == 'e')
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b65      	cmp	r3, #101	; 0x65
 800178a:	d11f      	bne.n	80017cc <App_Controll+0x3f4>
	{
		LineFollower->Base_speed_R = 120;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2278      	movs	r2, #120	; 0x78
 8001790:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 120;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2278      	movs	r2, #120	; 0x78
 8001796:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 120;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2278      	movs	r2, #120	; 0x78
 800179c:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 120;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2278      	movs	r2, #120	; 0x78
 80017a2:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80017aa:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	225c      	movs	r2, #92	; 0x5c
 80017b0:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80017b8:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;//110
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	221e      	movs	r2, #30
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <App_Controll+0x4e0>)
 80017c4:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;//0.25
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4a3c      	ldr	r2, [pc, #240]	; (80018bc <App_Controll+0x4e4>)
 80017ca:	605a      	str	r2, [r3, #4]
	}
	/*HIGH mode*/
	if(RxData == 'c')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b63      	cmp	r3, #99	; 0x63
 80017d0:	d11f      	bne.n	8001812 <App_Controll+0x43a>
	{
		LineFollower->Base_speed_R = 125;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	227d      	movs	r2, #125	; 0x7d
 80017d6:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 125;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	227d      	movs	r2, #125	; 0x7d
 80017dc:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;//125
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2282      	movs	r2, #130	; 0x82
 80017e2:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;//125
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2282      	movs	r2, #130	; 0x82
 80017e8:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80017f0:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	225c      	movs	r2, #92	; 0x5c
 80017f6:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80017fe:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	221e      	movs	r2, #30
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <App_Controll+0x4e0>)
 800180a:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <App_Controll+0x4e8>)
 8001810:	605a      	str	r2, [r3, #4]
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b66      	cmp	r3, #102	; 0x66
 8001816:	d11f      	bne.n	8001858 <App_Controll+0x480>
	{
		LineFollower->Base_speed_R = 130;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2282      	movs	r2, #130	; 0x82
 800181c:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 130;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2282      	movs	r2, #130	; 0x82
 8001822:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 130;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2282      	movs	r2, #130	; 0x82
 8001828:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 130;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2282      	movs	r2, #130	; 0x82
 800182e:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -70;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001836:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 92; //88
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	225c      	movs	r2, #92	; 0x5c
 800183c:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -50;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001844:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 30;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	221e      	movs	r2, #30
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <App_Controll+0x4e0>)
 8001850:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.175;//0.2
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <App_Controll+0x4e8>)
 8001856:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO mode*/
	if(RxData == 'i')
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b69      	cmp	r3, #105	; 0x69
 800185c:	d13c      	bne.n	80018d8 <App_Controll+0x500>
	{
		LineFollower->Base_speed_R = 135;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2287      	movs	r2, #135	; 0x87
 8001862:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 135;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2287      	movs	r2, #135	; 0x87
 8001868:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 135;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2287      	movs	r2, #135	; 0x87
 800186e:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 135;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2287      	movs	r2, #135	; 0x87
 8001874:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60; //-65
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800187c:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2246      	movs	r2, #70	; 0x46
 8001882:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800188a:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	226e      	movs	r2, #110	; 0x6e
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <App_Controll+0x4e0>)
 8001896:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.2;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	e01b      	b.n	80018d4 <App_Controll+0x4fc>
 800189c:	f3af 8000 	nop.w
 80018a0:	0800ea34 	.word	0x0800ea34
 80018a4:	200004c0 	.word	0x200004c0
 80018a8:	0800ea78 	.word	0x0800ea78
 80018ac:	48000c00 	.word	0x48000c00
 80018b0:	3c23d70a 	.word	0x3c23d70a
 80018b4:	3da3d70a 	.word	0x3da3d70a
 80018b8:	3c75c28f 	.word	0x3c75c28f
 80018bc:	3e4ccccd 	.word	0x3e4ccccd
 80018c0:	3e333333 	.word	0x3e333333
 80018c4:	9999999a 	.word	0x9999999a
 80018c8:	40209999 	.word	0x40209999
 80018cc:	00000000 	.word	0x00000000
 80018d0:	40adee00 	.word	0x40adee00
 80018d4:	4a8d      	ldr	r2, [pc, #564]	; (8001b0c <App_Controll+0x734>)
 80018d6:	605a      	str	r2, [r3, #4]
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b6a      	cmp	r3, #106	; 0x6a
 80018dc:	d11f      	bne.n	800191e <App_Controll+0x546>
	{
	   LineFollower->Base_speed_R = 140;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	228c      	movs	r2, #140	; 0x8c
 80018e2:	609a      	str	r2, [r3, #8]
	   LineFollower->Base_speed_L = 140;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	228c      	movs	r2, #140	; 0x8c
 80018e8:	60da      	str	r2, [r3, #12]
	   LineFollower->Max_speed_L = 140;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	228c      	movs	r2, #140	; 0x8c
 80018ee:	615a      	str	r2, [r3, #20]
	   LineFollower->Max_speed_R = 140;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	228c      	movs	r2, #140	; 0x8c
 80018f4:	611a      	str	r2, [r3, #16]
	   LineFollower->Sharp_bend_speed_right = -60;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 80018fc:	619a      	str	r2, [r3, #24]
	   LineFollower->Sharp_bend_speed_left = 70;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2246      	movs	r2, #70	; 0x46
 8001902:	61da      	str	r2, [r3, #28]
	   LineFollower->Bend_speed_right = -60;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 800190a:	621a      	str	r2, [r3, #32]
	   LineFollower->Bend_speed_left = 110;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	226e      	movs	r2, #110	; 0x6e
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
	   LineFollower->Kp = 0.015;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <App_Controll+0x738>)
 8001916:	601a      	str	r2, [r3, #0]
	   LineFollower->Kd = 0.2;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4a7c      	ldr	r2, [pc, #496]	; (8001b0c <App_Controll+0x734>)
 800191c:	605a      	str	r2, [r3, #4]
	}
	/*ULTRA mode*/
	if(RxData == 'k')
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b6b      	cmp	r3, #107	; 0x6b
 8001922:	d11f      	bne.n	8001964 <App_Controll+0x58c>
	{
		LineFollower->Base_speed_R = 145;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2291      	movs	r2, #145	; 0x91
 8001928:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 145;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2291      	movs	r2, #145	; 0x91
 800192e:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 145;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2291      	movs	r2, #145	; 0x91
 8001934:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 145;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2291      	movs	r2, #145	; 0x91
 800193a:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -60;//-70
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001942:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 70;//88
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2246      	movs	r2, #70	; 0x46
 8001948:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001950:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 110;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	226e      	movs	r2, #110	; 0x6e
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4a6d      	ldr	r2, [pc, #436]	; (8001b10 <App_Controll+0x738>)
 800195c:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <App_Controll+0x73c>)
 8001962:	605a      	str	r2, [r3, #4]
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b6c      	cmp	r3, #108	; 0x6c
 8001968:	d11f      	bne.n	80019aa <App_Controll+0x5d2>
	 {
		LineFollower->Base_speed_R = 150;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2296      	movs	r2, #150	; 0x96
 800196e:	609a      	str	r2, [r3, #8]
		LineFollower->Base_speed_L = 150;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2296      	movs	r2, #150	; 0x96
 8001974:	60da      	str	r2, [r3, #12]
		LineFollower->Max_speed_L = 150;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2296      	movs	r2, #150	; 0x96
 800197a:	615a      	str	r2, [r3, #20]
		LineFollower->Max_speed_R = 150;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2296      	movs	r2, #150	; 0x96
 8001980:	611a      	str	r2, [r3, #16]
		LineFollower->Sharp_bend_speed_right = -55;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f06f 0236 	mvn.w	r2, #54	; 0x36
 8001988:	619a      	str	r2, [r3, #24]
		LineFollower->Sharp_bend_speed_left = 75;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	224b      	movs	r2, #75	; 0x4b
 800198e:	61da      	str	r2, [r3, #28]
		LineFollower->Bend_speed_right = -60;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f06f 023b 	mvn.w	r2, #59	; 0x3b
 8001996:	621a      	str	r2, [r3, #32]
		LineFollower->Bend_speed_left = 120;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2278      	movs	r2, #120	; 0x78
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
		LineFollower->Kp = 0.015;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a5b      	ldr	r2, [pc, #364]	; (8001b10 <App_Controll+0x738>)
 80019a2:	601a      	str	r2, [r3, #0]
		LineFollower->Kd = 0.23;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4a5c      	ldr	r2, [pc, #368]	; (8001b18 <App_Controll+0x740>)
 80019a8:	605a      	str	r2, [r3, #4]
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b6d      	cmp	r3, #109	; 0x6d
 80019ae:	d11f      	bne.n	80019f0 <App_Controll+0x618>
	  {
		 LineFollower->Base_speed_R = 155;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	229b      	movs	r2, #155	; 0x9b
 80019b4:	609a      	str	r2, [r3, #8]
		 LineFollower->Base_speed_L = 155;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	229b      	movs	r2, #155	; 0x9b
 80019ba:	60da      	str	r2, [r3, #12]
		 LineFollower->Max_speed_L = 155;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	229b      	movs	r2, #155	; 0x9b
 80019c0:	615a      	str	r2, [r3, #20]
		 LineFollower->Max_speed_R = 155;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	229b      	movs	r2, #155	; 0x9b
 80019c6:	611a      	str	r2, [r3, #16]
		 LineFollower->Sharp_bend_speed_right = -70;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80019ce:	619a      	str	r2, [r3, #24]
		 LineFollower->Sharp_bend_speed_left = 85;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2255      	movs	r2, #85	; 0x55
 80019d4:	61da      	str	r2, [r3, #28]
		 LineFollower->Bend_speed_right = -50;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f06f 0231 	mvn.w	r2, #49	; 0x31
 80019dc:	621a      	str	r2, [r3, #32]
		 LineFollower->Bend_speed_left = 30;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	221e      	movs	r2, #30
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
		 LineFollower->Kp = 0.015;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <App_Controll+0x738>)
 80019e8:	601a      	str	r2, [r3, #0]
		 LineFollower->Kd = 0.265;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <App_Controll+0x744>)
 80019ee:	605a      	str	r2, [r3, #4]
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b6e      	cmp	r3, #110	; 0x6e
 80019f4:	d11f      	bne.n	8001a36 <App_Controll+0x65e>
 	  {
 	    LineFollower->Base_speed_R = 160;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	22a0      	movs	r2, #160	; 0xa0
 80019fa:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 160;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	22a0      	movs	r2, #160	; 0xa0
 8001a00:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 160;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	22a0      	movs	r2, #160	; 0xa0
 8001a06:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 160;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	22a0      	movs	r2, #160	; 0xa0
 8001a0c:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -70;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8001a14:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 85;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2255      	movs	r2, #85	; 0x55
 8001a1a:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001a22:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	221e      	movs	r2, #30
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <App_Controll+0x738>)
 8001a2e:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.265;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <App_Controll+0x744>)
 8001a34:	605a      	str	r2, [r3, #4]
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b68      	cmp	r3, #104	; 0x68
 8001a3a:	d11f      	bne.n	8001a7c <App_Controll+0x6a4>
 	  {
 	    LineFollower->Base_speed_R = 135;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2287      	movs	r2, #135	; 0x87
 8001a40:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 135;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2287      	movs	r2, #135	; 0x87
 8001a46:	60da      	str	r2, [r3, #12]
 	    LineFollower->Max_speed_L = 135;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2287      	movs	r2, #135	; 0x87
 8001a4c:	615a      	str	r2, [r3, #20]
 	    LineFollower->Max_speed_R = 135;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2287      	movs	r2, #135	; 0x87
 8001a52:	611a      	str	r2, [r3, #16]
 	 	LineFollower->Sharp_bend_speed_right = -66;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f06f 0241 	mvn.w	r2, #65	; 0x41
 8001a5a:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 92;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	225c      	movs	r2, #92	; 0x5c
 8001a60:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001a68:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 30;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	221e      	movs	r2, #30
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.015;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <App_Controll+0x738>)
 8001a74:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 0.2;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <App_Controll+0x734>)
 8001a7a:	605a      	str	r2, [r3, #4]
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b6f      	cmp	r3, #111	; 0x6f
 8001a80:	d11f      	bne.n	8001ac2 <App_Controll+0x6ea>
 	  {
 	    LineFollower->Base_speed_R = 143;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	228f      	movs	r2, #143	; 0x8f
 8001a86:	609a      	str	r2, [r3, #8]
 	    LineFollower->Base_speed_L = 143;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	228f      	movs	r2, #143	; 0x8f
 8001a8c:	60da      	str	r2, [r3, #12]
 	   	LineFollower->Max_speed_L = 182;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	22b6      	movs	r2, #182	; 0xb6
 8001a92:	615a      	str	r2, [r3, #20]
 	  	LineFollower->Max_speed_R = 182;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	22b6      	movs	r2, #182	; 0xb6
 8001a98:	611a      	str	r2, [r3, #16]
 	  	LineFollower->Sharp_bend_speed_right = -76;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001aa0:	619a      	str	r2, [r3, #24]
 		LineFollower->Sharp_bend_speed_left = 90;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	225a      	movs	r2, #90	; 0x5a
 8001aa6:	61da      	str	r2, [r3, #28]
 		LineFollower->Bend_speed_right = -50;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001aae:	621a      	str	r2, [r3, #32]
 		LineFollower->Bend_speed_left = 100;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2264      	movs	r2, #100	; 0x64
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
 		LineFollower->Kp = 0.02;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <App_Controll+0x748>)
 8001aba:	601a      	str	r2, [r3, #0]
 		LineFollower->Kd = 350;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <App_Controll+0x74c>)
 8001ac0:	605a      	str	r2, [r3, #4]
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b75      	cmp	r3, #117	; 0x75
 8001ac6:	d12f      	bne.n	8001b28 <App_Controll+0x750>
 	   {
 	     LineFollower->Base_speed_R = 153;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2299      	movs	r2, #153	; 0x99
 8001acc:	609a      	str	r2, [r3, #8]
 	     LineFollower->Base_speed_L = 153;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2299      	movs	r2, #153	; 0x99
 8001ad2:	60da      	str	r2, [r3, #12]
 	     LineFollower->Max_speed_L = 187;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	22bb      	movs	r2, #187	; 0xbb
 8001ad8:	615a      	str	r2, [r3, #20]
 	   	 LineFollower->Max_speed_R = 187;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	22bb      	movs	r2, #187	; 0xbb
 8001ade:	611a      	str	r2, [r3, #16]
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001ae6:	619a      	str	r2, [r3, #24]
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	225a      	movs	r2, #90	; 0x5a
 8001aec:	61da      	str	r2, [r3, #28]
 	 	 LineFollower->Bend_speed_right = -50;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8001af4:	621a      	str	r2, [r3, #32]
 	 	 LineFollower->Bend_speed_left = 100;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2264      	movs	r2, #100	; 0x64
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
 	 	 LineFollower->Kp = 0.02;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <App_Controll+0x748>)
 8001b00:	601a      	str	r2, [r3, #0]
 	 	 LineFollower->Kd = 350;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <App_Controll+0x74c>)
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	e00e      	b.n	8001b28 <App_Controll+0x750>
 8001b0a:	bf00      	nop
 8001b0c:	3e4ccccd 	.word	0x3e4ccccd
 8001b10:	3c75c28f 	.word	0x3c75c28f
 8001b14:	3e6147ae 	.word	0x3e6147ae
 8001b18:	3e6b851f 	.word	0x3e6b851f
 8001b1c:	3e87ae14 	.word	0x3e87ae14
 8001b20:	3ca3d70a 	.word	0x3ca3d70a
 8001b24:	43af0000 	.word	0x43af0000
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b70      	cmp	r3, #112	; 0x70
 8001b2c:	d11f      	bne.n	8001b6e <App_Controll+0x796>
 	  {
 		 LineFollower->Base_speed_R = 143;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	228f      	movs	r2, #143	; 0x8f
 8001b32:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 143;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	228f      	movs	r2, #143	; 0x8f
 8001b38:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 182;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	22b6      	movs	r2, #182	; 0xb6
 8001b3e:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 182;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	22b6      	movs	r2, #182	; 0xb6
 8001b44:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001b4c:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	225a      	movs	r2, #90	; 0x5a
 8001b52:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001b5a:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	226e      	movs	r2, #110	; 0x6e
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <App_Controll+0x7e4>)
 8001b66:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <App_Controll+0x7e8>)
 8001b6c:	605a      	str	r2, [r3, #4]
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b72      	cmp	r3, #114	; 0x72
 8001b72:	d11f      	bne.n	8001bb4 <App_Controll+0x7dc>
 	  {
 		 LineFollower->Base_speed_R = 153;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2299      	movs	r2, #153	; 0x99
 8001b78:	609a      	str	r2, [r3, #8]
 		 LineFollower->Base_speed_L = 153;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2299      	movs	r2, #153	; 0x99
 8001b7e:	60da      	str	r2, [r3, #12]
 		 LineFollower->Max_speed_L = 187;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	22bb      	movs	r2, #187	; 0xbb
 8001b84:	615a      	str	r2, [r3, #20]
 		 LineFollower->Max_speed_R = 187;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	22bb      	movs	r2, #187	; 0xbb
 8001b8a:	611a      	str	r2, [r3, #16]
 		 LineFollower->Sharp_bend_speed_right = -76;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f06f 024b 	mvn.w	r2, #75	; 0x4b
 8001b92:	619a      	str	r2, [r3, #24]
 		 LineFollower->Sharp_bend_speed_left = 90;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	225a      	movs	r2, #90	; 0x5a
 8001b98:	61da      	str	r2, [r3, #28]
 		 LineFollower->Bend_speed_right = -40;//40
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8001ba0:	621a      	str	r2, [r3, #32]
 		 LineFollower->Bend_speed_left = 110;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	226e      	movs	r2, #110	; 0x6e
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
 		 LineFollower->Kp = 0.02;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <App_Controll+0x7e4>)
 8001bac:	601a      	str	r2, [r3, #0]
 		 LineFollower->Kd = 350;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <App_Controll+0x7e8>)
 8001bb2:	605a      	str	r2, [r3, #4]
 	   }
}
 8001bb4:	3788      	adds	r7, #136	; 0x88
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	3ca3d70a 	.word	0x3ca3d70a
 8001bc0:	43af0000 	.word	0x43af0000

08001bc4 <Mode_change>:

static void Mode_change(LineFollower_t *LF)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok(NULL, ",");
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <Mode_change+0x3c>)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f009 ffa0 	bl	800bb14 <strtok>
 8001bd4:	60f8      	str	r0, [r7, #12]

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <Mode_change+0x32>
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7fe fb28 	bl	8000234 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d805      	bhi.n	8001bf6 <Mode_change+0x32>
	{
		App_Controll(ParsePointer[0], LF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fbf1 	bl	80013d8 <App_Controll>
	}
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	0800ea30 	.word	0x0800ea30

08001c04 <Parser_Parse>:
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	char *ParsePointer = strtok((char*)ReceivedData, "=");
 8001c0e:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <Parser_Parse+0xe0>)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f009 ff7f 	bl	800bb14 <strtok>
 8001c16:	60f8      	str	r0, [r7, #12]

	if(!strcmp("Kp",ParsePointer))
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	4833      	ldr	r0, [pc, #204]	; (8001ce8 <Parser_Parse+0xe4>)
 8001c1c:	f7fe fb00 	bl	8000220 <strcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <Parser_Parse+0x2a>
	{
		kp_change(LineFollower);
 8001c26:	6838      	ldr	r0, [r7, #0]
 8001c28:	f7ff fa98 	bl	800115c <kp_change>
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
 8001c2c:	e056      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Kd",ParsePointer))
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	482e      	ldr	r0, [pc, #184]	; (8001cec <Parser_Parse+0xe8>)
 8001c32:	f7fe faf5 	bl	8000220 <strcmp>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d103      	bne.n	8001c44 <Parser_Parse+0x40>
		kd_change(LineFollower);
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f7ff fab3 	bl	80011a8 <kd_change>
}
 8001c42:	e04b      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Base_speed",ParsePointer))
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	482a      	ldr	r0, [pc, #168]	; (8001cf0 <Parser_Parse+0xec>)
 8001c48:	f7fe faea 	bl	8000220 <strcmp>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <Parser_Parse+0x56>
		Base_speed_change(LineFollower);
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f7ff face 	bl	80011f4 <Base_speed_change>
}
 8001c58:	e040      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Max_speed",ParsePointer))
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <Parser_Parse+0xf0>)
 8001c5e:	f7fe fadf 	bl	8000220 <strcmp>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <Parser_Parse+0x6c>
		Max_speed_change(LineFollower);
 8001c68:	6838      	ldr	r0, [r7, #0]
 8001c6a:	f7ff faf5 	bl	8001258 <Max_speed_change>
}
 8001c6e:	e035      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <Parser_Parse+0xf4>)
 8001c74:	f7fe fad4 	bl	8000220 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <Parser_Parse+0x82>
		Sharp_bend_speed_right_change(LineFollower);
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	f7ff fb12 	bl	80012a8 <Sharp_bend_speed_right_change>
}
 8001c84:	e02a      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	481c      	ldr	r0, [pc, #112]	; (8001cfc <Parser_Parse+0xf8>)
 8001c8a:	f7fe fac9 	bl	8000220 <strcmp>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d103      	bne.n	8001c9c <Parser_Parse+0x98>
		Sharp_bend_speed_left_change(LineFollower);
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f7ff fb2d 	bl	80012f4 <Sharp_bend_speed_left_change>
}
 8001c9a:	e01f      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_right",ParsePointer))
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	4818      	ldr	r0, [pc, #96]	; (8001d00 <Parser_Parse+0xfc>)
 8001ca0:	f7fe fabe 	bl	8000220 <strcmp>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <Parser_Parse+0xae>
		Bend_speed_right_change(LineFollower);
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f7ff fb48 	bl	8001340 <Bend_speed_right_change>
}
 8001cb0:	e014      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Bend_speed_left",ParsePointer))
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	4813      	ldr	r0, [pc, #76]	; (8001d04 <Parser_Parse+0x100>)
 8001cb6:	f7fe fab3 	bl	8000220 <strcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <Parser_Parse+0xc4>
		Bend_speed_left_change(LineFollower);
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f7ff fb63 	bl	800138c <Bend_speed_left_change>
}
 8001cc6:	e009      	b.n	8001cdc <Parser_Parse+0xd8>
	else if(!strcmp("Mode",ParsePointer))
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <Parser_Parse+0x104>)
 8001ccc:	f7fe faa8 	bl	8000220 <strcmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <Parser_Parse+0xd8>
		Mode_change(LineFollower);
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7ff ff74 	bl	8001bc4 <Mode_change>
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0800eaa8 	.word	0x0800eaa8
 8001ce8:	0800eaac 	.word	0x0800eaac
 8001cec:	0800eab0 	.word	0x0800eab0
 8001cf0:	0800eab4 	.word	0x0800eab4
 8001cf4:	0800eac0 	.word	0x0800eac0
 8001cf8:	0800eacc 	.word	0x0800eacc
 8001cfc:	0800eae4 	.word	0x0800eae4
 8001d00:	0800eafc 	.word	0x0800eafc
 8001d04:	0800eb10 	.word	0x0800eb10
 8001d08:	0800eb20 	.word	0x0800eb20

08001d0c <Turbine_init>:
#include "main.h"
#include "Turbine.h"


void Turbine_init(Turbine_t *turbine, TIM_HandleTypeDef *Timer, uint32_t Channel, uint32_t delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
	turbine->Timer = Timer;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	601a      	str	r2, [r3, #0]
	turbine->Channel = Channel;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	605a      	str	r2, [r3, #4]
	turbine->delay = delay;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	60da      	str	r2, [r3, #12]

	HAL_TIM_PWM_Start(turbine->Timer, turbine->Channel);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f005 f896 	bl	8006e68 <HAL_TIM_PWM_Start>
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <Turbine_Start>:

void Turbine_Start(Turbine_t *turbine)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	HAL_Delay(turbine->delay);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fdad 	bl	80038b0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <Turbine_Start+0x28>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	891a      	ldrh	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d6a:	e036      	b.n	8001dda <Turbine_Start+0x96>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d107      	bne.n	8001d84 <Turbine_Start+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8919      	ldrh	r1, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d82:	e02a      	b.n	8001dda <Turbine_Start+0x96>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d107      	bne.n	8001d9c <Turbine_Start+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8919      	ldrh	r1, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d9a:	e01e      	b.n	8001dda <Turbine_Start+0x96>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d107      	bne.n	8001db4 <Turbine_Start+0x70>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	8919      	ldrh	r1, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001db2:	e012      	b.n	8001dda <Turbine_Start+0x96>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d107      	bne.n	8001dcc <Turbine_Start+0x88>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8919      	ldrh	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001dca:	e006      	b.n	8001dda <Turbine_Start+0x96>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, turbine->Speed);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	8919      	ldrh	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <Turbine_Stop>:

void Turbine_Stop(Turbine_t *turbine)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <Turbine_Stop+0x1c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dfc:	e02c      	b.n	8001e58 <Turbine_Stop+0x76>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d105      	bne.n	8001e12 <Turbine_Stop+0x30>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e10:	e022      	b.n	8001e58 <Turbine_Stop+0x76>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d105      	bne.n	8001e26 <Turbine_Stop+0x44>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2300      	movs	r3, #0
 8001e22:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e24:	e018      	b.n	8001e58 <Turbine_Stop+0x76>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d105      	bne.n	8001e3a <Turbine_Stop+0x58>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e38:	e00e      	b.n	8001e58 <Turbine_Stop+0x76>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d105      	bne.n	8001e4e <Turbine_Stop+0x6c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001e4c:	e004      	b.n	8001e58 <Turbine_Stop+0x76>
	__HAL_TIM_SET_COMPARE(turbine->Timer,turbine->Channel, 0);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2220      	movs	r2, #32
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f008 fb87 	bl	800a590 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e82:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001e84:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <MX_ADC3_Init+0xe8>)
 8001e86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e88:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001e8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e8e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001eaa:	2204      	movs	r2, #4
 8001eac:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001eea:	4817      	ldr	r0, [pc, #92]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001eec:	f001 ff20 	bl	8003d30 <HAL_ADC_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001ef6:	f001 f85d 	bl	8002fb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	4810      	ldr	r0, [pc, #64]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001f06:	f002 ff51 	bl	8004dac <HAL_ADCEx_MultiModeConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001f10:	f001 f850 	bl	8002fb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_ADC3_Init+0xec>)
 8001f16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f18:	2306      	movs	r3, #6
 8001f1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f20:	237f      	movs	r3, #127	; 0x7f
 8001f22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f24:	2304      	movs	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_ADC3_Init+0xe4>)
 8001f32:	f002 f9ab 	bl	800428c <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001f3c:	f001 f83a 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000200 	.word	0x20000200
 8001f4c:	50000400 	.word	0x50000400
 8001f50:	04300002 	.word	0x04300002

08001f54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b09e      	sub	sp, #120	; 0x78
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2254      	movs	r2, #84	; 0x54
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f008 fb0b 	bl	800a590 <memset>
  if(adcHandle->Instance==ADC3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a33      	ldr	r2, [pc, #204]	; (800204c <HAL_ADC_MspInit+0xf8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d15e      	bne.n	8002042 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f8e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fbe7 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001fa0:	f001 f808 	bl	8002fb4 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a29      	ldr	r2, [pc, #164]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_ADC_MspInit+0xfc>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481b      	ldr	r0, [pc, #108]	; (8002054 <HAL_ADC_MspInit+0x100>)
 8001fe8:	f003 fc2a 	bl	8005840 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel1;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_ADC_MspInit+0x108>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8001ff4:	2225      	movs	r2, #37	; 0x25
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_ADC_MspInit+0x104>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADC_MspInit+0x104>)
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002026:	480c      	ldr	r0, [pc, #48]	; (8002058 <HAL_ADC_MspInit+0x104>)
 8002028:	f003 f8d8 	bl	80051dc <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002032:	f000 ffbf 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_ADC_MspInit+0x104>)
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_ADC_MspInit+0x104>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002042:	bf00      	nop
 8002044:	3778      	adds	r7, #120	; 0x78
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	50000400 	.word	0x50000400
 8002050:	40021000 	.word	0x40021000
 8002054:	48000400 	.word	0x48000400
 8002058:	2000026c 	.word	0x2000026c
 800205c:	40020008 	.word	0x40020008

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_DMA_Init+0x50>)
 8002068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <MX_DMA_Init+0x50>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6493      	str	r3, [r2, #72]	; 0x48
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_DMA_Init+0x50>)
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_DMA_Init+0x50>)
 8002080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <MX_DMA_Init+0x50>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6493      	str	r3, [r2, #72]	; 0x48
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_DMA_Init+0x50>)
 800208c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	200b      	movs	r0, #11
 800209c:	f003 f869 	bl	8005172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020a0:	200b      	movs	r0, #11
 80020a2:	f003 f880 	bl	80051a6 <HAL_NVIC_EnableIRQ>

}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a49      	ldr	r2, [pc, #292]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <MX_GPIO_Init+0x140>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <MX_GPIO_Init+0x140>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <MX_GPIO_Init+0x140>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN_1L_Pin|IN2_L_Pin|SENSOR4_Pin|SENSOR5_Pin
 8002142:	2200      	movs	r2, #0
 8002144:	f240 31c3 	movw	r1, #963	; 0x3c3
 8002148:	482b      	ldr	r0, [pc, #172]	; (80021f8 <MX_GPIO_Init+0x144>)
 800214a:	f003 fd13 	bl	8005b74 <HAL_GPIO_WritePin>
                          |SENSOR6_Pin|SENSOR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STNDBY_Pin|IN_1R_Pin|IN_2R_Pin|SENSOR8_Pin
 800214e:	2200      	movs	r2, #0
 8002150:	f641 71d0 	movw	r1, #8144	; 0x1fd0
 8002154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002158:	f003 fd0c 	bl	8005b74 <HAL_GPIO_WritePin>
                          |SENSOR9_Pin|SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDON_Pin|SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002162:	4826      	ldr	r0, [pc, #152]	; (80021fc <MX_GPIO_Init+0x148>)
 8002164:	f003 fd06 	bl	8005b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	2104      	movs	r1, #4
 800216c:	4824      	ldr	r0, [pc, #144]	; (8002200 <MX_GPIO_Init+0x14c>)
 800216e:	f003 fd01 	bl	8005b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = IN_1L_Pin|IN2_L_Pin|SENSOR4_Pin|SENSOR5_Pin
 8002172:	f240 33c3 	movw	r3, #963	; 0x3c3
 8002176:	617b      	str	r3, [r7, #20]
                          |SENSOR6_Pin|SENSOR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	481b      	ldr	r0, [pc, #108]	; (80021f8 <MX_GPIO_Init+0x144>)
 800218c:	f003 fb58 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STNDBY_Pin|IN_1R_Pin|IN_2R_Pin|SENSOR8_Pin
 8002190:	f641 73d0 	movw	r3, #8144	; 0x1fd0
 8002194:	617b      	str	r3, [r7, #20]
                          |SENSOR9_Pin|SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f003 fb48 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDON_Pin|SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin;
 80021b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <MX_GPIO_Init+0x148>)
 80021ca:	f003 fb39 	bl	8005840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021ce:	2304      	movs	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_GPIO_Init+0x14c>)
 80021e6:	f003 fb2b 	bl	8005840 <HAL_GPIO_Init>

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000400 	.word	0x48000400
 8002200:	48000c00 	.word	0x48000c00

08002204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002208:	f001 fae1 	bl	80037ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800220c:	f000 f88a 	bl	8002324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002210:	f7ff ff50 	bl	80020b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002214:	f7ff ff24 	bl	8002060 <MX_DMA_Init>
  MX_ADC3_Init();
 8002218:	f7ff fe24 	bl	8001e64 <MX_ADC3_Init>
  MX_TIM2_Init();
 800221c:	f001 f814 	bl	8003248 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002220:	f001 fa00 	bl	8003624 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002224:	f001 f892 	bl	800334c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002228:	f001 f8de 	bl	80033e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&GRUZIK.Adc_Value, 1);
 800222c:	2201      	movs	r2, #1
 800222e:	492d      	ldr	r1, [pc, #180]	; (80022e4 <main+0xe0>)
 8002230:	482d      	ldr	r0, [pc, #180]	; (80022e8 <main+0xe4>)
 8002232:	f001 ff39 	bl	80040a8 <HAL_ADC_Start_DMA>
    	/*Set initial values for PID*/
      GRUZIK.Kp = 0.02;
 8002236:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <main+0xe8>)
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <main+0xec>)
 800223a:	601a      	str	r2, [r3, #0]
    	GRUZIK.Kd = 0.1;
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <main+0xe8>)
 800223e:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <main+0xf0>)
 8002240:	605a      	str	r2, [r3, #4]
    	GRUZIK.Speed_offset = 0.014;
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <main+0xe8>)
 8002244:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <main+0xf4>)
 8002246:	635a      	str	r2, [r3, #52]	; 0x34

    	GRUZIK.Base_speed_R = 120;
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <main+0xe8>)
 800224a:	2278      	movs	r2, #120	; 0x78
 800224c:	609a      	str	r2, [r3, #8]
    	GRUZIK.Base_speed_L = 120;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <main+0xe8>)
 8002250:	2278      	movs	r2, #120	; 0x78
 8002252:	60da      	str	r2, [r3, #12]
    	GRUZIK.Max_speed_R = 120;
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <main+0xe8>)
 8002256:	2278      	movs	r2, #120	; 0x78
 8002258:	611a      	str	r2, [r3, #16]
    	GRUZIK.Max_speed_L = 120;
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <main+0xe8>)
 800225c:	2278      	movs	r2, #120	; 0x78
 800225e:	615a      	str	r2, [r3, #20]

    	/*Sharp turn speed*/
    	GRUZIK.Sharp_bend_speed_right=-70;
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <main+0xe8>)
 8002262:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002266:	619a      	str	r2, [r3, #24]
    	GRUZIK.Sharp_bend_speed_left=85;
 8002268:	4b20      	ldr	r3, [pc, #128]	; (80022ec <main+0xe8>)
 800226a:	2255      	movs	r2, #85	; 0x55
 800226c:	61da      	str	r2, [r3, #28]
    	GRUZIK.Bend_speed_right=-50;
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <main+0xe8>)
 8002270:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8002274:	621a      	str	r2, [r3, #32]
    	GRUZIK.Bend_speed_left=110;
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <main+0xe8>)
 8002278:	226e      	movs	r2, #110	; 0x6e
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

      /*Start receiving data from Blue tooth*/
      HAL_UART_Receive_IT(&huart1, &RxData, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	491f      	ldr	r1, [pc, #124]	; (80022fc <main+0xf8>)
 8002280:	481f      	ldr	r0, [pc, #124]	; (8002300 <main+0xfc>)
 8002282:	f006 f909 	bl	8008498 <HAL_UART_Receive_IT>

  	/*Start timers and PWM on channels*/
  	HAL_TIM_Base_Start_IT(&htim3);
 8002286:	481f      	ldr	r0, [pc, #124]	; (8002304 <main+0x100>)
 8002288:	f004 fd14 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);//left pwm
 800228c:	2100      	movs	r1, #0
 800228e:	481e      	ldr	r0, [pc, #120]	; (8002308 <main+0x104>)
 8002290:	f004 fdea 	bl	8006e68 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//right pwm
 8002294:	2104      	movs	r1, #4
 8002296:	481c      	ldr	r0, [pc, #112]	; (8002308 <main+0x104>)
 8002298:	f004 fde6 	bl	8006e68 <HAL_TIM_PWM_Start>

  	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);//Turbine pwm
  	Turbine_init(&GRUZIK.turbine,&htim5, TIM_CHANNEL_3, 1000);
 800229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a0:	2208      	movs	r2, #8
 80022a2:	491a      	ldr	r1, [pc, #104]	; (800230c <main+0x108>)
 80022a4:	481a      	ldr	r0, [pc, #104]	; (8002310 <main+0x10c>)
 80022a6:	f7ff fd31 	bl	8001d0c <Turbine_init>
  	Turbine_Stop(&GRUZIK.turbine);
 80022aa:	4819      	ldr	r0, [pc, #100]	; (8002310 <main+0x10c>)
 80022ac:	f7ff fd99 	bl	8001de2 <Turbine_Stop>

    /*LED diode initial set*/
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2104      	movs	r1, #4
 80022b4:	4817      	ldr	r0, [pc, #92]	; (8002314 <main+0x110>)
 80022b6:	f003 fc5d 	bl	8005b74 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 80022ba:	f000 fdcb 	bl	8002e54 <PID_control>

	 	  /*If there is a message form Bluetooth Parser it*/
	 	  if(ReceivedLines > 0)
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <main+0x114>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f9      	beq.n	80022ba <main+0xb6>
	 	  {
	 		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80022c6:	4915      	ldr	r1, [pc, #84]	; (800231c <main+0x118>)
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <main+0x11c>)
 80022ca:	f7fe ff21 	bl	8001110 <Parser_TakeLine>
	 		  Parser_Parse(ReceivedData,&GRUZIK);
 80022ce:	4907      	ldr	r1, [pc, #28]	; (80022ec <main+0xe8>)
 80022d0:	4812      	ldr	r0, [pc, #72]	; (800231c <main+0x118>)
 80022d2:	f7ff fc97 	bl	8001c04 <Parser_Parse>

	 		  ReceivedLines--;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <main+0x114>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <main+0x114>)
 80022e0:	701a      	strb	r2, [r3, #0]
	  PID_control();
 80022e2:	e7ea      	b.n	80022ba <main+0xb6>
 80022e4:	200002f8 	.word	0x200002f8
 80022e8:	20000200 	.word	0x20000200
 80022ec:	200002cc 	.word	0x200002cc
 80022f0:	3ca3d70a 	.word	0x3ca3d70a
 80022f4:	3dcccccd 	.word	0x3dcccccd
 80022f8:	3c656042 	.word	0x3c656042
 80022fc:	2000036c 	.word	0x2000036c
 8002300:	200004c0 	.word	0x200004c0
 8002304:	20000428 	.word	0x20000428
 8002308:	200003dc 	.word	0x200003dc
 800230c:	20000474 	.word	0x20000474
 8002310:	20000304 	.word	0x20000304
 8002314:	48000c00 	.word	0x48000c00
 8002318:	200003d4 	.word	0x200003d4
 800231c:	200003b4 	.word	0x200003b4
 8002320:	20000370 	.word	0x20000370

08002324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b094      	sub	sp, #80	; 0x50
 8002328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	2238      	movs	r2, #56	; 0x38
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f008 f92c 	bl	800a590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002346:	2000      	movs	r0, #0
 8002348:	f003 fc2c 	bl	8005ba4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235a:	2302      	movs	r3, #2
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800235e:	2302      	movs	r3, #2
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002362:	2304      	movs	r3, #4
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002366:	2355      	movs	r3, #85	; 0x55
 8002368:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800236a:	2302      	movs	r3, #2
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800236e:	2302      	movs	r3, #2
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002372:	2302      	movs	r3, #2
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fcc6 	bl	8005d0c <HAL_RCC_OscConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002386:	f000 fe15 	bl	8002fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238a:	230f      	movs	r3, #15
 800238c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238e:	2303      	movs	r3, #3
 8002390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2104      	movs	r1, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 ffc4 	bl	8006330 <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80023ae:	f000 fe01 	bl	8002fb4 <Error_Handler>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	; 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Interrupts*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_UART_RxCpltCallback+0x4c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d117      	bne.n	80023fe <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_Write(&ReceiveBuffer, RxData) == RB_OK)
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_UART_RxCpltCallback+0x50>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <HAL_UART_RxCpltCallback+0x54>)
 80023d6:	f7fe fe47 	bl	8001068 <RB_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_UART_RxCpltCallback+0x38>
		{
			if(RxData == ENDLINE)
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_UART_RxCpltCallback+0x50>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b0a      	cmp	r3, #10
 80023e6:	d105      	bne.n	80023f4 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_UART_RxCpltCallback+0x58>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_UART_RxCpltCallback+0x58>)
 80023f2:	701a      	strb	r2, [r3, #0]
			}
		}
    	HAL_UART_Receive_IT(&huart1,&RxData, 1);
 80023f4:	2201      	movs	r2, #1
 80023f6:	4905      	ldr	r1, [pc, #20]	; (800240c <HAL_UART_RxCpltCallback+0x50>)
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <HAL_UART_RxCpltCallback+0x5c>)
 80023fa:	f006 f84d 	bl	8008498 <HAL_UART_Receive_IT>
	}
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40013800 	.word	0x40013800
 800240c:	2000036c 	.word	0x2000036c
 8002410:	20000370 	.word	0x20000370
 8002414:	200003d4 	.word	0x200003d4
 8002418:	200004c0 	.word	0x200004c0

0800241c <delay_us>:
/*Functions*/
void delay_us (uint16_t us) //Blocking function
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <delay_us+0x30>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);  // wait for the counter to reach the us input in the parameter
 800242e:	bf00      	nop
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <delay_us+0x30>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3f9      	bcc.n	8002430 <delay_us+0x14>
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000428 	.word	0x20000428

08002450 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002470:	2301      	movs	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f003 f9de 	bl	8005840 <HAL_GPIO_Init>
}
 8002484:	bf00      	nop
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f003 f9c0 	bl	8005840 <HAL_GPIO_Init>
}
 80024c0:	bf00      	nop
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <motor_control>:


void motor_control (double pos_right, double pos_left)

{
 80024c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	ed87 0b02 	vstr	d0, [r7, #8]
 80024d4:	ed87 1b00 	vstr	d1, [r7]
	if (pos_left < 0 )
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024e4:	f7fe fb32 	bl	8000b4c <__aeabi_dcmplt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02d      	beq.n	800254a <motor_control+0x82>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*pos_left*-1) * GRUZIK.Speed_level));//PWM_L
 80024ee:	4b64      	ldr	r3, [pc, #400]	; (8002680 <motor_control+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f84e 	bl	8000594 <__aeabi_i2d>
 80024f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024fc:	f7fe f8b4 	bl	8000668 <__aeabi_dmul>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4690      	mov	r8, r2
 8002506:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800250a:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <motor_control+0x1bc>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f852 	bl	80005b8 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4640      	mov	r0, r8
 800251a:	4649      	mov	r1, r9
 800251c:	f7fe f8a4 	bl	8000668 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4958      	ldr	r1, [pc, #352]	; (8002688 <motor_control+0x1c0>)
 8002526:	680e      	ldr	r6, [r1, #0]
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fb74 	bl	8000c18 <__aeabi_d2uiz>
 8002530:	4603      	mov	r3, r0
 8002532:	6373      	str	r3, [r6, #52]	; 0x34
		HAL_GPIO_WritePin(IN_1L_GPIO_Port, IN_1L_Pin, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	4854      	ldr	r0, [pc, #336]	; (800268c <motor_control+0x1c4>)
 800253a:	f003 fb1b 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_L_GPIO_Port, IN2_L_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	4852      	ldr	r0, [pc, #328]	; (800268c <motor_control+0x1c4>)
 8002544:	f003 fb16 	bl	8005b74 <HAL_GPIO_WritePin>
 8002548:	e02b      	b.n	80025a2 <motor_control+0xda>

	}
	else
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, (uint32_t)((ARR*pos_left) * GRUZIK.Speed_level));//PWM_L
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <motor_control+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f820 	bl	8000594 <__aeabi_i2d>
 8002554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002558:	f7fe f886 	bl	8000668 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4690      	mov	r8, r2
 8002562:	4699      	mov	r9, r3
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <motor_control+0x1bc>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe f825 	bl	80005b8 <__aeabi_f2d>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4640      	mov	r0, r8
 8002574:	4649      	mov	r1, r9
 8002576:	f7fe f877 	bl	8000668 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4942      	ldr	r1, [pc, #264]	; (8002688 <motor_control+0x1c0>)
 8002580:	680e      	ldr	r6, [r1, #0]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb47 	bl	8000c18 <__aeabi_d2uiz>
 800258a:	4603      	mov	r3, r0
 800258c:	6373      	str	r3, [r6, #52]	; 0x34
		HAL_GPIO_WritePin(IN_1L_GPIO_Port, IN_1L_Pin, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	2101      	movs	r1, #1
 8002592:	483e      	ldr	r0, [pc, #248]	; (800268c <motor_control+0x1c4>)
 8002594:	f003 faee 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_L_GPIO_Port, IN2_L_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2102      	movs	r1, #2
 800259c:	483b      	ldr	r0, [pc, #236]	; (800268c <motor_control+0x1c4>)
 800259e:	f003 fae9 	bl	8005b74 <HAL_GPIO_WritePin>

	}
	if (pos_right < 0 )
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ae:	f7fe facd 	bl	8000b4c <__aeabi_dcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02f      	beq.n	8002618 <motor_control+0x150>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, (uint32_t)((ARR*pos_right* -1) * GRUZIK.Speed_level));//PWM_R
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <motor_control+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffe9 	bl	8000594 <__aeabi_i2d>
 80025c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c6:	f7fe f84f 	bl	8000668 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4614      	mov	r4, r2
 80025d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <motor_control+0x1bc>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffed 	bl	80005b8 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4620      	mov	r0, r4
 80025e4:	4629      	mov	r1, r5
 80025e6:	f7fe f83f 	bl	8000668 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4926      	ldr	r1, [pc, #152]	; (8002688 <motor_control+0x1c0>)
 80025f0:	680c      	ldr	r4, [r1, #0]
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fb0f 	bl	8000c18 <__aeabi_d2uiz>
 80025fa:	4603      	mov	r3, r0
 80025fc:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f003 fab5 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002612:	f003 faaf 	bl	8005b74 <HAL_GPIO_WritePin>
	{
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));//PWM_R
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_SET);
	}
}
 8002616:	e02d      	b.n	8002674 <motor_control+0x1ac>
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, (uint32_t)((ARR*pos_right) * GRUZIK.Speed_level));//PWM_R
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <motor_control+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ffb9 	bl	8000594 <__aeabi_i2d>
 8002622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002626:	f7fe f81f 	bl	8000668 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <motor_control+0x1bc>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ffbe 	bl	80005b8 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fe f810 	bl	8000668 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <motor_control+0x1c0>)
 800264e:	680c      	ldr	r4, [r1, #0]
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fae0 	bl	8000c18 <__aeabi_d2uiz>
 8002658:	4603      	mov	r3, r0
 800265a:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002664:	f003 fa86 	bl	8005b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_1R_GPIO_Port, IN_1R_Pin, GPIO_PIN_SET);
 8002668:	2201      	movs	r2, #1
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002670:	f003 fa80 	bl	8005b74 <HAL_GPIO_WritePin>
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000
 8002684:	200002cc 	.word	0x200002cc
 8002688:	200003dc 	.word	0x200003dc
 800268c:	48000800 	.word	0x48000800

08002690 <sharp_turn>:


void sharp_turn ()
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	af00      	add	r7, sp, #0

	if (Last_idle < 25)
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <sharp_turn+0xc8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b18      	cmp	r3, #24
 800269a:	dc2d      	bgt.n	80026f8 <sharp_turn+0x68>
	{
		if (Last_end == 1)
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <sharp_turn+0xcc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d114      	bne.n	80026ce <sharp_turn+0x3e>
			motor_control(GRUZIK.Sharp_bend_speed_right, GRUZIK.Sharp_bend_speed_left);
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <sharp_turn+0xd0>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff73 	bl	8000594 <__aeabi_i2d>
 80026ae:	4604      	mov	r4, r0
 80026b0:	460d      	mov	r5, r1
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <sharp_turn+0xd0>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff6c 	bl	8000594 <__aeabi_i2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	ec43 2b11 	vmov	d1, r2, r3
 80026c4:	ec45 4b10 	vmov	d0, r4, r5
 80026c8:	f7ff fefe 	bl	80024c8 <motor_control>
		if (Last_end == 1)
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
		else
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
	}
}
 80026cc:	e041      	b.n	8002752 <sharp_turn+0xc2>
			motor_control(GRUZIK.Sharp_bend_speed_left, GRUZIK.Sharp_bend_speed_right);
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <sharp_turn+0xd0>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff5e 	bl	8000594 <__aeabi_i2d>
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <sharp_turn+0xd0>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff57 	bl	8000594 <__aeabi_i2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	ec43 2b11 	vmov	d1, r2, r3
 80026ee:	ec45 4b10 	vmov	d0, r4, r5
 80026f2:	f7ff fee9 	bl	80024c8 <motor_control>
}
 80026f6:	e02c      	b.n	8002752 <sharp_turn+0xc2>
		if (Last_end == 1)
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <sharp_turn+0xcc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d114      	bne.n	800272a <sharp_turn+0x9a>
			motor_control(GRUZIK.Bend_speed_right, GRUZIK.Bend_speed_left);
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <sharp_turn+0xd0>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff45 	bl	8000594 <__aeabi_i2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <sharp_turn+0xd0>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff3e 	bl	8000594 <__aeabi_i2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	ec43 2b11 	vmov	d1, r2, r3
 8002720:	ec45 4b10 	vmov	d0, r4, r5
 8002724:	f7ff fed0 	bl	80024c8 <motor_control>
}
 8002728:	e013      	b.n	8002752 <sharp_turn+0xc2>
			motor_control(GRUZIK.Bend_speed_left, GRUZIK.Bend_speed_right);
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <sharp_turn+0xd0>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff30 	bl	8000594 <__aeabi_i2d>
 8002734:	4604      	mov	r4, r0
 8002736:	460d      	mov	r5, r1
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <sharp_turn+0xd0>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd ff29 	bl	8000594 <__aeabi_i2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	ec43 2b11 	vmov	d1, r2, r3
 800274a:	ec45 4b10 	vmov	d0, r4, r5
 800274e:	f7ff febb 	bl	80024c8 <motor_control>
}
 8002752:	bf00      	nop
 8002754:	bdb0      	pop	{r4, r5, r7, pc}
 8002756:	bf00      	nop
 8002758:	20000364 	.word	0x20000364
 800275c:	20000360 	.word	0x20000360
 8002760:	200002cc 	.word	0x200002cc

08002764 <QTR8_read>:
int QTR8_read ()
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b0b3      	sub	sp, #204	; 0xcc
 8002768:	af0a      	add	r7, sp, #40	; 0x28
	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002770:	48dc      	ldr	r0, [pc, #880]	; (8002ae4 <QTR8_read+0x380>)
 8002772:	f003 f9ff 	bl	8005b74 <HAL_GPIO_WritePin>

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800277a:	48da      	ldr	r0, [pc, #872]	; (8002ae4 <QTR8_read+0x380>)
 800277c:	f7ff fe68 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002784:	48d7      	ldr	r0, [pc, #860]	; (8002ae4 <QTR8_read+0x380>)
 8002786:	f7ff fe63 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 800278a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278e:	48d5      	ldr	r0, [pc, #852]	; (8002ae4 <QTR8_read+0x380>)
 8002790:	f7ff fe5e 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002794:	2140      	movs	r1, #64	; 0x40
 8002796:	48d4      	ldr	r0, [pc, #848]	; (8002ae8 <QTR8_read+0x384>)
 8002798:	f7ff fe5a 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	48d2      	ldr	r0, [pc, #840]	; (8002ae8 <QTR8_read+0x384>)
 80027a0:	f7ff fe56 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80027a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027a8:	48cf      	ldr	r0, [pc, #828]	; (8002ae8 <QTR8_read+0x384>)
 80027aa:	f7ff fe51 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80027ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b2:	48cd      	ldr	r0, [pc, #820]	; (8002ae8 <QTR8_read+0x384>)
 80027b4:	f7ff fe4c 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80027b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c0:	f7ff fe46 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR9_GPIO_Port, SENSOR9_Pin);
 80027c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f7ff fe40 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80027d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d8:	f7ff fe3a 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR11_GPIO_Port, SENSOR11_Pin);
 80027dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e4:	f7ff fe34 	bl	8002450 <Set_Pin_Output>
	Set_Pin_Output(SENSOR12_GPIO_Port, SENSOR12_Pin);
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f7ff fe2e 	bl	8002450 <Set_Pin_Output>

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027fa:	48ba      	ldr	r0, [pc, #744]	; (8002ae4 <QTR8_read+0x380>)
 80027fc:	f003 f9ba 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002806:	48b7      	ldr	r0, [pc, #732]	; (8002ae4 <QTR8_read+0x380>)
 8002808:	f003 f9b4 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002812:	48b4      	ldr	r0, [pc, #720]	; (8002ae4 <QTR8_read+0x380>)
 8002814:	f003 f9ae 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8002818:	2201      	movs	r2, #1
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	48b2      	ldr	r0, [pc, #712]	; (8002ae8 <QTR8_read+0x384>)
 800281e:	f003 f9a9 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8002822:	2201      	movs	r2, #1
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	48b0      	ldr	r0, [pc, #704]	; (8002ae8 <QTR8_read+0x384>)
 8002828:	f003 f9a4 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002832:	48ad      	ldr	r0, [pc, #692]	; (8002ae8 <QTR8_read+0x384>)
 8002834:	f003 f99e 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800283e:	48aa      	ldr	r0, [pc, #680]	; (8002ae8 <QTR8_read+0x384>)
 8002840:	f003 f998 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284e:	f003 f991 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR9_GPIO_Port, SENSOR9_Pin, 1);
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f003 f98a 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR10_GPIO_Port, SENSOR10_Pin, 1);
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800286a:	f003 f983 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR11_GPIO_Port, SENSOR11_Pin, 1);
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002878:	f003 f97c 	bl	8005b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR12_GPIO_Port, SENSOR12_Pin, 1);
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002886:	f003 f975 	bl	8005b74 <HAL_GPIO_WritePin>

	delay_us(10);
 800288a:	200a      	movs	r0, #10
 800288c:	f7ff fdc6 	bl	800241c <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002894:	4893      	ldr	r0, [pc, #588]	; (8002ae4 <QTR8_read+0x380>)
 8002896:	f7ff fdf9 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 800289a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800289e:	4891      	ldr	r0, [pc, #580]	; (8002ae4 <QTR8_read+0x380>)
 80028a0:	f7ff fdf4 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	488e      	ldr	r0, [pc, #568]	; (8002ae4 <QTR8_read+0x380>)
 80028aa:	f7ff fdef 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	488d      	ldr	r0, [pc, #564]	; (8002ae8 <QTR8_read+0x384>)
 80028b2:	f7ff fdeb 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	488b      	ldr	r0, [pc, #556]	; (8002ae8 <QTR8_read+0x384>)
 80028ba:	f7ff fde7 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
 80028be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c2:	4889      	ldr	r0, [pc, #548]	; (8002ae8 <QTR8_read+0x384>)
 80028c4:	f7ff fde2 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
 80028c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028cc:	4886      	ldr	r0, [pc, #536]	; (8002ae8 <QTR8_read+0x384>)
 80028ce:	f7ff fddd 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);
 80028d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028da:	f7ff fdd7 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR9_GPIO_Port, SENSOR9_Pin);
 80028de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e6:	f7ff fdd1 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80028ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f7ff fdcb 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR11_GPIO_Port, SENSOR11_Pin);
 80028f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fe:	f7ff fdc5 	bl	800248c <Set_Pin_Input>
	Set_Pin_Input(SENSOR12_GPIO_Port, SENSOR12_Pin);
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290a:	f7ff fdbf 	bl	800248c <Set_Pin_Input>

	// Threshold
	 delay_us(4500);
 800290e:	f241 1094 	movw	r0, #4500	; 0x1194
 8002912:	f7ff fd83 	bl	800241c <delay_us>
	 	 	 //!!! FOR SENSOR TESTING ONLY !!!//

	 uint8_t sensory[12];
	 sensory[0] = HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8002916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291a:	4872      	ldr	r0, [pc, #456]	; (8002ae4 <QTR8_read+0x380>)
 800291c:	f003 f912 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 sensory[1] = HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8002926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800292a:	486e      	ldr	r0, [pc, #440]	; (8002ae4 <QTR8_read+0x380>)
 800292c:	f003 f90a 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	 sensory[2] = HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8002936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293a:	486a      	ldr	r0, [pc, #424]	; (8002ae4 <QTR8_read+0x380>)
 800293c:	f003 f902 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	 sensory[3] = HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	4867      	ldr	r0, [pc, #412]	; (8002ae8 <QTR8_read+0x384>)
 800294a:	f003 f8fb 	bl	8005b44 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	 sensory[4] = HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	4864      	ldr	r0, [pc, #400]	; (8002ae8 <QTR8_read+0x384>)
 8002958:	f003 f8f4 	bl	8005b44 <HAL_GPIO_ReadPin>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	 sensory[5] = HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin);
 8002962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002966:	4860      	ldr	r0, [pc, #384]	; (8002ae8 <QTR8_read+0x384>)
 8002968:	f003 f8ec 	bl	8005b44 <HAL_GPIO_ReadPin>
 800296c:	4603      	mov	r3, r0
 800296e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	 sensory[6] = HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin);
 8002972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002976:	485c      	ldr	r0, [pc, #368]	; (8002ae8 <QTR8_read+0x384>)
 8002978:	f003 f8e4 	bl	8005b44 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	 sensory[7] = HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin);
 8002982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298a:	f003 f8db 	bl	8005b44 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	 sensory[8] = HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin);
 8002994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299c:	f003 f8d2 	bl	8005b44 <HAL_GPIO_ReadPin>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	 sensory[9] = HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin);
 80029a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ae:	f003 f8c9 	bl	8005b44 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	 sensory[10] = HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin);
 80029b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f003 f8c0 	bl	8005b44 <HAL_GPIO_ReadPin>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	 sensory[11] = HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin);
 80029ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d2:	f003 f8b7 	bl	8005b44 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	 uint8_t Message[124];
	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
 80029dc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80029e0:	469c      	mov	ip, r3
 80029e2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80029e6:	469e      	mov	lr, r3
 80029e8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80029f2:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 80029f6:	f897 0091 	ldrb.w	r0, [r7, #145]	; 0x91
 80029fa:	4604      	mov	r4, r0
 80029fc:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8002a00:	4605      	mov	r5, r0
 8002a02:	f897 0093 	ldrb.w	r0, [r7, #147]	; 0x93
 8002a06:	4606      	mov	r6, r0
			 sensory[8],sensory[9],sensory[10],sensory[11]);
 8002a08:	f897 0094 	ldrb.w	r0, [r7, #148]	; 0x94
	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
 8002a0c:	60b8      	str	r0, [r7, #8]
			 sensory[8],sensory[9],sensory[10],sensory[11]);
 8002a0e:	f897 0095 	ldrb.w	r0, [r7, #149]	; 0x95
	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
 8002a12:	6078      	str	r0, [r7, #4]
			 sensory[8],sensory[9],sensory[10],sensory[11]);
 8002a14:	f897 0096 	ldrb.w	r0, [r7, #150]	; 0x96
	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
 8002a18:	6038      	str	r0, [r7, #0]
			 sensory[8],sensory[9],sensory[10],sensory[11]);
 8002a1a:	f897 0097 	ldrb.w	r0, [r7, #151]	; 0x97
	 sprintf((char*)Message,"S1: %d S2: %d S3: %d S4: %d S5: %d S6: %d S7: %d S8: %d S9: %d S10: %d S11: %d S12: %d \n\r", sensory[0],sensory[1],sensory[2],sensory[3],sensory[4],sensory[5],sensory[6],sensory[7],
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f107 0010 	add.w	r0, r7, #16
 8002a24:	9309      	str	r3, [sp, #36]	; 0x24
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9308      	str	r3, [sp, #32]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	9307      	str	r3, [sp, #28]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	9306      	str	r3, [sp, #24]
 8002a32:	9605      	str	r6, [sp, #20]
 8002a34:	9504      	str	r5, [sp, #16]
 8002a36:	9403      	str	r4, [sp, #12]
 8002a38:	9102      	str	r1, [sp, #8]
 8002a3a:	9201      	str	r2, [sp, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4673      	mov	r3, lr
 8002a42:	4662      	mov	r2, ip
 8002a44:	4929      	ldr	r1, [pc, #164]	; (8002aec <QTR8_read+0x388>)
 8002a46:	f008 fa15 	bl	800ae74 <siprintf>
	 HAL_UART_Transmit(&huart1, Message, strlen((char*)Message), 100);
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fbf0 	bl	8000234 <strlen>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	f107 0110 	add.w	r1, r7, #16
 8002a5c:	2364      	movs	r3, #100	; 0x64
 8002a5e:	4824      	ldr	r0, [pc, #144]	; (8002af0 <QTR8_read+0x38c>)
 8002a60:	f005 fc8c 	bl	800837c <HAL_UART_Transmit>

	Sensors_read = 0x00000000;
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <QTR8_read+0x390>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int active = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) { // LEFT SIDE
 8002a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a7a:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <QTR8_read+0x380>)
 8002a7c:	f003 f862 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d013      	beq.n	8002aae <QTR8_read+0x34a>
		Sensors_read |= 0x000000000001;
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <QTR8_read+0x390>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <QTR8_read+0x390>)
 8002a90:	6013      	str	r3, [r2, #0]
		pos += 1000 * SENSOR_SCALE;//1000
 8002a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		Last_end = 1;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <QTR8_read+0x394>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8002aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ab2:	480c      	ldr	r0, [pc, #48]	; (8002ae4 <QTR8_read+0x380>)
 8002ab4:	f003 f846 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01e      	beq.n	8002afc <QTR8_read+0x398>
		Sensors_read |= 0x000000000010;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <QTR8_read+0x390>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f043 0310 	orr.w	r3, r3, #16
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <QTR8_read+0x390>)
 8002ac8:	6013      	str	r3, [r2, #0]
		pos += 2000 * SENSOR_SCALE;//2000
 8002aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ace:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ada:	3301      	adds	r3, #1
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ae0:	e00c      	b.n	8002afc <QTR8_read+0x398>
 8002ae2:	bf00      	nop
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	0800eb28 	.word	0x0800eb28
 8002af0:	200004c0 	.word	0x200004c0
 8002af4:	20000314 	.word	0x20000314
 8002af8:	20000360 	.word	0x20000360
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8002afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b00:	4892      	ldr	r0, [pc, #584]	; (8002d4c <QTR8_read+0x5e8>)
 8002b02:	f003 f81f 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <QTR8_read+0x3ca>
		Sensors_read |= 0x000000000100;
 8002b0c:	4b90      	ldr	r3, [pc, #576]	; (8002d50 <QTR8_read+0x5ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	4a8e      	ldr	r2, [pc, #568]	; (8002d50 <QTR8_read+0x5ec>)
 8002b16:	6013      	str	r3, [r2, #0]
		pos += 3000 * SENSOR_SCALE;//3000
 8002b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b1c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    	//Last_end = 1;//1
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	4888      	ldr	r0, [pc, #544]	; (8002d54 <QTR8_read+0x5f0>)
 8002b32:	f003 f807 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <QTR8_read+0x3fa>
		Sensors_read |= 0x000000001000;
 8002b3c:	4b84      	ldr	r3, [pc, #528]	; (8002d50 <QTR8_read+0x5ec>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b44:	4a82      	ldr	r2, [pc, #520]	; (8002d50 <QTR8_read+0x5ec>)
 8002b46:	6013      	str	r3, [r2, #0]
		pos += 4000 * SENSOR_SCALE;//4000
 8002b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b4c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	487c      	ldr	r0, [pc, #496]	; (8002d54 <QTR8_read+0x5f0>)
 8002b62:	f002 ffef 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d011      	beq.n	8002b90 <QTR8_read+0x42c>
		Sensors_read |= 0x000000010000;
 8002b6c:	4b78      	ldr	r3, [pc, #480]	; (8002d50 <QTR8_read+0x5ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	4a76      	ldr	r2, [pc, #472]	; (8002d50 <QTR8_read+0x5ec>)
 8002b76:	6013      	str	r3, [r2, #0]
		pos += 5000 * SENSOR_SCALE;//5000
 8002b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b7c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002b80:	3308      	adds	r3, #8
 8002b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  }
	if (HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin)) {
 8002b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b94:	486f      	ldr	r0, [pc, #444]	; (8002d54 <QTR8_read+0x5f0>)
 8002b96:	f002 ffd5 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <QTR8_read+0x460>
		Sensors_read |= 0x000000100000;
 8002ba0:	4b6b      	ldr	r3, [pc, #428]	; (8002d50 <QTR8_read+0x5ec>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	4a69      	ldr	r2, [pc, #420]	; (8002d50 <QTR8_read+0x5ec>)
 8002baa:	6013      	str	r3, [r2, #0]
		pos += 6000 * SENSOR_SCALE;//6000
 8002bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb0:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  }
	if (HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin)) {
 8002bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bc8:	4862      	ldr	r0, [pc, #392]	; (8002d54 <QTR8_read+0x5f0>)
 8002bca:	f002 ffbb 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d011      	beq.n	8002bf8 <QTR8_read+0x494>
		Sensors_read |= 0x000001000000;
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <QTR8_read+0x5ec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <QTR8_read+0x5ec>)
 8002bde:	6013      	str	r3, [r2, #0]
		pos += 7000 * SENSOR_SCALE;//7000
 8002be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be4:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8002be8:	3318      	adds	r3, #24
 8002bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
 8002bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c00:	f002 ffa0 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <QTR8_read+0x4c8>
		Sensors_read |= 0x000010000000;
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <QTR8_read+0x5ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c12:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <QTR8_read+0x5ec>)
 8002c14:	6013      	str	r3, [r2, #0]
		pos += 8000 * SENSOR_SCALE;//8000
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c1a:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8002c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002c22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c26:	3301      	adds	r3, #1
 8002c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  }
  if (HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) {
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c34:	f002 ff86 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <QTR8_read+0x4fa>
	   Sensors_read |= 0x000100000000;
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <QTR8_read+0x5ec>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a43      	ldr	r2, [pc, #268]	; (8002d50 <QTR8_read+0x5ec>)
 8002c44:	6013      	str	r3, [r2, #0]
	   pos += 9000 * SENSOR_SCALE;//8000
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c4a:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8002c4e:	3328      	adds	r3, #40	; 0x28
 8002c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	active++;
 8002c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  }
  if (HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin)) {
 8002c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c66:	f002 ff6d 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00f      	beq.n	8002c90 <QTR8_read+0x52c>
	   Sensors_read |= 0x001000000000;
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <QTR8_read+0x5ec>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a36      	ldr	r2, [pc, #216]	; (8002d50 <QTR8_read+0x5ec>)
 8002c76:	6013      	str	r3, [r2, #0]
	   pos += 10000 * SENSOR_SCALE;//8000
 8002c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002c80:	3310      	adds	r3, #16
 8002c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin)) {
 8002c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c98:	f002 ff54 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00f      	beq.n	8002cc2 <QTR8_read+0x55e>
	   Sensors_read |= 0x010000000000;
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <QTR8_read+0x5ec>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <QTR8_read+0x5ec>)
 8002ca8:	6013      	str	r3, [r2, #0]
	   pos += 11000 * SENSOR_SCALE;//8000
 8002caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cae:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8002cb2:	3338      	adds	r3, #56	; 0x38
 8002cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  // Last_end = 0;//0
  }
  if (HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) { // RIGH SIDE
 8002cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cca:	f002 ff3b 	bl	8005b44 <HAL_GPIO_ReadPin>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <QTR8_read+0x596>
	   Sensors_read |= 0x100000000000;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <QTR8_read+0x5ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <QTR8_read+0x5ec>)
 8002cda:	6013      	str	r3, [r2, #0]
	   pos += 12000 * SENSOR_SCALE;//8000
 8002cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    active++;
 8002cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	   Last_end = 0;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <QTR8_read+0x5f4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d00:	4812      	ldr	r0, [pc, #72]	; (8002d4c <QTR8_read+0x5e8>)
 8002d02:	f002 ff37 	bl	8005b74 <HAL_GPIO_WritePin>

  actives = active;
 8002d06:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <QTR8_read+0x5f8>)
 8002d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d0c:	6013      	str	r3, [r2, #0]
	Position = pos/active;
 8002d0e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <QTR8_read+0x5fc>)
 8002d1c:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <QTR8_read+0x5f8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d105      	bne.n	8002d32 <QTR8_read+0x5ce>
		Last_idle++;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <QTR8_read+0x600>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <QTR8_read+0x600>)
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e002      	b.n	8002d38 <QTR8_read+0x5d4>
	else
		Last_idle = 0;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <QTR8_read+0x600>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

	return pos/active;
 8002d38:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d40:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	37a4      	adds	r7, #164	; 0xa4
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4c:	48000400 	.word	0x48000400
 8002d50:	20000314 	.word	0x20000314
 8002d54:	48000800 	.word	0x48000800
 8002d58:	20000360 	.word	0x20000360
 8002d5c:	20000368 	.word	0x20000368
 8002d60:	20000318 	.word	0x20000318
 8002d64:	20000364 	.word	0x20000364

08002d68 <forward_brake>:


void forward_brake(int pos_right, int pos_left)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <forward_brake+0x40>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <forward_brake+0x18>
		sharp_turn();
 8002d7a:	f7ff fc89 	bl	8002690 <sharp_turn>
	else
	  motor_control(pos_right, pos_left);
}
 8002d7e:	e00f      	b.n	8002da0 <forward_brake+0x38>
	  motor_control(pos_right, pos_left);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd fc07 	bl	8000594 <__aeabi_i2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	f7fd fc02 	bl	8000594 <__aeabi_i2d>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	ec43 2b11 	vmov	d1, r2, r3
 8002d98:	ec45 4b10 	vmov	d0, r4, r5
 8002d9c:	f7ff fb94 	bl	80024c8 <motor_control>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}
 8002da8:	20000368 	.word	0x20000368

08002dac <past_errors>:

void past_errors (int error)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 8002db4:	2309      	movs	r3, #9
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e00b      	b.n	8002dd2 <past_errors+0x26>
      Errors[i] = Errors[i-1];
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <past_errors+0x40>)
 8002dc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dc4:	4909      	ldr	r1, [pc, #36]	; (8002dec <past_errors+0x40>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	dcf0      	bgt.n	8002dba <past_errors+0xe>
  Errors[0] = error;
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <past_errors+0x40>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000338 	.word	0x20000338

08002df0 <errors_sum>:

int errors_sum (int index, int abs)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  int sum = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	e01a      	b.n	8002e3a <errors_sum+0x4a>
  {
    if (abs == 1 && Errors[i] < 0)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10d      	bne.n	8002e26 <errors_sum+0x36>
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <errors_sum+0x60>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da07      	bge.n	8002e26 <errors_sum+0x36>
      sum += -Errors[i];
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <errors_sum+0x60>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e006      	b.n	8002e34 <errors_sum+0x44>
    else
      sum += Errors[i];
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <errors_sum+0x60>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbe0      	blt.n	8002e04 <errors_sum+0x14>
  }
  return sum;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	20000338 	.word	0x20000338

08002e54 <PID_control>:

void PID_control()
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
  uint16_t position = QTR8_read();
 8002e5a:	f7ff fc83 	bl	8002764 <QTR8_read>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	81fb      	strh	r3, [r7, #14]
  int error = (6500 * SENSOR_SCALE) - position;
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	f5c3 53cb 	rsb	r3, r3, #6496	; 0x1960
 8002e68:	3304      	adds	r3, #4
 8002e6a:	60bb      	str	r3, [r7, #8]
  past_errors(error);
 8002e6c:	68b8      	ldr	r0, [r7, #8]
 8002e6e:	f7ff ff9d 	bl	8002dac <past_errors>

  P = error;
 8002e72:	4a48      	ldr	r2, [pc, #288]	; (8002f94 <PID_control+0x140>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2005      	movs	r0, #5
 8002e7c:	f7ff ffb8 	bl	8002df0 <errors_sum>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <PID_control+0x144>)
 8002e84:	6013      	str	r3, [r2, #0]
  D = error - Last_error;
 8002e86:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <PID_control+0x148>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4a44      	ldr	r2, [pc, #272]	; (8002fa0 <PID_control+0x14c>)
 8002e90:	6013      	str	r3, [r2, #0]
  R = errors_sum(5, 1);
 8002e92:	2101      	movs	r1, #1
 8002e94:	2005      	movs	r0, #5
 8002e96:	f7ff ffab 	bl	8002df0 <errors_sum>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a41      	ldr	r2, [pc, #260]	; (8002fa4 <PID_control+0x150>)
 8002e9e:	6013      	str	r3, [r2, #0]
  Last_error = error;
 8002ea0:	4a3e      	ldr	r2, [pc, #248]	; (8002f9c <PID_control+0x148>)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6013      	str	r3, [r2, #0]

  int motorspeed = P*GRUZIK.Kp + I*Ki + D*GRUZIK.Kd;
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <PID_control+0x140>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <PID_control+0x154>)
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <PID_control+0x144>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ec8:	4b38      	ldr	r3, [pc, #224]	; (8002fac <PID_control+0x158>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed6:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <PID_control+0x14c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <PID_control+0x154>)
 8002ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	607b      	str	r3, [r7, #4]

  int motorspeedl = GRUZIK.Base_speed_L + motorspeed - R*Kr;
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <PID_control+0x154>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <PID_control+0x150>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <PID_control+0x15c>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f28:	ee17 3a90 	vmov	r3, s15
 8002f2c:	617b      	str	r3, [r7, #20]
  int motorspeedr = GRUZIK.Base_speed_R - motorspeed - R*Kr;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <PID_control+0x154>)
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <PID_control+0x150>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <PID_control+0x15c>)
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f5c:	ee17 3a90 	vmov	r3, s15
 8002f60:	613b      	str	r3, [r7, #16]

  if (motorspeedl > GRUZIK.Max_speed_L)
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <PID_control+0x154>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dd02      	ble.n	8002f72 <PID_control+0x11e>
    motorspeedl = GRUZIK.Max_speed_L;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <PID_control+0x154>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	617b      	str	r3, [r7, #20]
  if (motorspeedr > GRUZIK.Max_speed_R)
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <PID_control+0x154>)
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	dd02      	ble.n	8002f82 <PID_control+0x12e>
    motorspeedr = GRUZIK.Max_speed_R;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <PID_control+0x154>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 8002f82:	6979      	ldr	r1, [r7, #20]
 8002f84:	6938      	ldr	r0, [r7, #16]
 8002f86:	f7ff feef 	bl	8002d68 <forward_brake>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000324 	.word	0x20000324
 8002f98:	20000328 	.word	0x20000328
 8002f9c:	20000334 	.word	0x20000334
 8002fa0:	2000032c 	.word	0x2000032c
 8002fa4:	20000330 	.word	0x20000330
 8002fa8:	200002cc 	.word	0x200002cc
 8002fac:	2000031c 	.word	0x2000031c
 8002fb0:	20000320 	.word	0x20000320

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <Error_Handler+0x8>
	...

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_MspInit+0x44>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_MspInit+0x44>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <HAL_MspInit+0x44>)
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_MspInit+0x44>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	4a08      	ldr	r2, [pc, #32]	; (8003004 <HAL_MspInit+0x44>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_MspInit+0x44>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ff6:	f002 fe79 	bl	8005cec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800300c:	e7fe      	b.n	800300c <NMI_Handler+0x4>

0800300e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <HardFault_Handler+0x4>

08003014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <MemManage_Handler+0x4>

0800301a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800301e:	e7fe      	b.n	800301e <BusFault_Handler+0x4>

08003020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <UsageFault_Handler+0x4>

08003026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003054:	f000 fc0e 	bl	8003874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <DMA1_Channel1_IRQHandler+0x10>)
 8003062:	f002 fa9e 	bl	80055a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000026c 	.word	0x2000026c

08003070 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM3_IRQHandler+0x10>)
 8003076:	f004 f809 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000428 	.word	0x20000428

08003084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <USART1_IRQHandler+0x10>)
 800308a:	f005 fa51 	bl	8008530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200004c0 	.word	0x200004c0

08003098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_kill>:

int _kill(int pid, int sig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b2:	f007 fa43 	bl	800a53c <__errno>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2216      	movs	r2, #22
 80030ba:	601a      	str	r2, [r3, #0]
  return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_exit>:

void _exit (int status)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ffe7 	bl	80030a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030da:	e7fe      	b.n	80030da <_exit+0x12>

080030dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00a      	b.n	8003104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ee:	f3af 8000 	nop.w
 80030f2:	4601      	mov	r1, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	60ba      	str	r2, [r7, #8]
 80030fa:	b2ca      	uxtb	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3301      	adds	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	dbf0      	blt.n	80030ee <_read+0x12>
  }

  return len;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e009      	b.n	800313c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	60ba      	str	r2, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	dbf1      	blt.n	8003128 <_write+0x12>
  }
  return len;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_close>:

int _close(int file)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003176:	605a      	str	r2, [r3, #4]
  return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_isatty>:

int _isatty(int file)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f007 f9a8 	bl	800a53c <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20020000 	.word	0x20020000
 8003218:	00000400 	.word	0x00000400
 800321c:	200003d8 	.word	0x200003d8
 8003220:	20000568 	.word	0x20000568

08003224 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	f107 031c 	add.w	r3, r7, #28
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003268:	463b      	mov	r3, r7
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	615a      	str	r2, [r3, #20]
 8003278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800327a:	4b33      	ldr	r3, [pc, #204]	; (8003348 <MX_TIM2_Init+0x100>)
 800327c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <MX_TIM2_Init+0x100>)
 8003284:	22a9      	movs	r2, #169	; 0xa9
 8003286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <MX_TIM2_Init+0x100>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <MX_TIM2_Init+0x100>)
 8003290:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <MX_TIM2_Init+0x100>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <MX_TIM2_Init+0x100>)
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a2:	4829      	ldr	r0, [pc, #164]	; (8003348 <MX_TIM2_Init+0x100>)
 80032a4:	f003 fcae 	bl	8006c04 <HAL_TIM_Base_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80032ae:	f7ff fe81 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032bc:	4619      	mov	r1, r3
 80032be:	4822      	ldr	r0, [pc, #136]	; (8003348 <MX_TIM2_Init+0x100>)
 80032c0:	f004 f948 	bl	8007554 <HAL_TIM_ConfigClockSource>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80032ca:	f7ff fe73 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032ce:	481e      	ldr	r0, [pc, #120]	; (8003348 <MX_TIM2_Init+0x100>)
 80032d0:	f003 fd68 	bl	8006da4 <HAL_TIM_PWM_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80032da:	f7ff fe6b 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	4619      	mov	r1, r3
 80032ec:	4816      	ldr	r0, [pc, #88]	; (8003348 <MX_TIM2_Init+0x100>)
 80032ee:	f004 ff19 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80032f8:	f7ff fe5c 	bl	8002fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032fc:	2360      	movs	r3, #96	; 0x60
 80032fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800330c:	463b      	mov	r3, r7
 800330e:	2200      	movs	r2, #0
 8003310:	4619      	mov	r1, r3
 8003312:	480d      	ldr	r0, [pc, #52]	; (8003348 <MX_TIM2_Init+0x100>)
 8003314:	f004 f80a 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800331e:	f7ff fe49 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003322:	463b      	mov	r3, r7
 8003324:	2204      	movs	r2, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4807      	ldr	r0, [pc, #28]	; (8003348 <MX_TIM2_Init+0x100>)
 800332a:	f003 ffff 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003334:	f7ff fe3e 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003338:	4803      	ldr	r0, [pc, #12]	; (8003348 <MX_TIM2_Init+0x100>)
 800333a:	f000 f919 	bl	8003570 <HAL_TIM_MspPostInit>

}
 800333e:	bf00      	nop
 8003340:	3738      	adds	r7, #56	; 0x38
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200003dc 	.word	0x200003dc

0800334c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003352:	f107 0310 	add.w	r3, r7, #16
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <MX_TIM3_Init+0x94>)
 800336c:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <MX_TIM3_Init+0x98>)
 800336e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <MX_TIM3_Init+0x94>)
 8003372:	22a9      	movs	r2, #169	; 0xa9
 8003374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <MX_TIM3_Init+0x94>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <MX_TIM3_Init+0x94>)
 800337e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <MX_TIM3_Init+0x94>)
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <MX_TIM3_Init+0x94>)
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003390:	4813      	ldr	r0, [pc, #76]	; (80033e0 <MX_TIM3_Init+0x94>)
 8003392:	f003 fc37 	bl	8006c04 <HAL_TIM_Base_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800339c:	f7ff fe0a 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4619      	mov	r1, r3
 80033ac:	480c      	ldr	r0, [pc, #48]	; (80033e0 <MX_TIM3_Init+0x94>)
 80033ae:	f004 f8d1 	bl	8007554 <HAL_TIM_ConfigClockSource>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80033b8:	f7ff fdfc 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4619      	mov	r1, r3
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <MX_TIM3_Init+0x94>)
 80033ca:	f004 feab 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80033d4:	f7ff fdee 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000428 	.word	0x20000428
 80033e4:	40000400 	.word	0x40000400

080033e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003408:	463b      	mov	r3, r7
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <MX_TIM5_Init+0xe8>)
 800341c:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <MX_TIM5_Init+0xec>)
 800341e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3399;
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003422:	f640 5247 	movw	r2, #3399	; 0xd47
 8003426:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <MX_TIM5_Init+0xe8>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003430:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003434:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <MX_TIM5_Init+0xe8>)
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003442:	4823      	ldr	r0, [pc, #140]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003444:	f003 fbde 	bl	8006c04 <HAL_TIM_Base_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 800344e:	f7ff fdb1 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345c:	4619      	mov	r1, r3
 800345e:	481c      	ldr	r0, [pc, #112]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003460:	f004 f878 	bl	8007554 <HAL_TIM_ConfigClockSource>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800346a:	f7ff fda3 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800346e:	4818      	ldr	r0, [pc, #96]	; (80034d0 <MX_TIM5_Init+0xe8>)
 8003470:	f003 fc98 	bl	8006da4 <HAL_TIM_PWM_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800347a:	f7ff fd9b 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	4619      	mov	r1, r3
 800348c:	4810      	ldr	r0, [pc, #64]	; (80034d0 <MX_TIM5_Init+0xe8>)
 800348e:	f004 fe49 	bl	8008124 <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8003498:	f7ff fd8c 	bl	8002fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349c:	2360      	movs	r3, #96	; 0x60
 800349e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034ac:	463b      	mov	r3, r7
 80034ae:	2208      	movs	r2, #8
 80034b0:	4619      	mov	r1, r3
 80034b2:	4807      	ldr	r0, [pc, #28]	; (80034d0 <MX_TIM5_Init+0xe8>)
 80034b4:	f003 ff3a 	bl	800732c <HAL_TIM_PWM_ConfigChannel>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 80034be:	f7ff fd79 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80034c2:	4803      	ldr	r0, [pc, #12]	; (80034d0 <MX_TIM5_Init+0xe8>)
 80034c4:	f000 f854 	bl	8003570 <HAL_TIM_MspPostInit>

}
 80034c8:	bf00      	nop
 80034ca:	3738      	adds	r7, #56	; 0x38
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000474 	.word	0x20000474
 80034d4:	40000c00 	.word	0x40000c00

080034d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d10c      	bne.n	8003504 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003502:	e02a      	b.n	800355a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_TIM_Base_MspInit+0x90>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d114      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6593      	str	r3, [r2, #88]	; 0x58
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201d      	movs	r0, #29
 800352c:	f001 fe21 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003530:	201d      	movs	r0, #29
 8003532:	f001 fe38 	bl	80051a6 <HAL_NVIC_EnableIRQ>
}
 8003536:	e010      	b.n	800355a <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM5)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0b      	ldr	r2, [pc, #44]	; (800356c <HAL_TIM_Base_MspInit+0x94>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10b      	bne.n	800355a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6593      	str	r3, [r2, #88]	; 0x58
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_TIM_Base_MspInit+0x8c>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000c00 	.word	0x40000c00

08003570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d11d      	bne.n	80035ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800359e:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035aa:	2303      	movs	r3, #3
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ba:	2301      	movs	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c8:	f002 f93a 	bl	8005840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80035cc:	e021      	b.n	8003612 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM5)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <HAL_TIM_MspPostInit+0xb0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11c      	bne.n	8003612 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 80035da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035dc:	4a0f      	ldr	r2, [pc, #60]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_TIM_MspPostInit+0xac>)
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035f0:	2304      	movs	r3, #4
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003600:	2302      	movs	r3, #2
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360e:	f002 f917 	bl	8005840 <HAL_GPIO_Init>
}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40000c00 	.word	0x40000c00

08003624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 800362a:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <MX_USART1_UART_Init+0x94>)
 800362c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003636:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 800363e:	2200      	movs	r2, #0
 8003640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 800364a:	220c      	movs	r2, #12
 800364c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 800365c:	2200      	movs	r2, #0
 800365e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800366c:	4811      	ldr	r0, [pc, #68]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 800366e:	f004 fe35 	bl	80082dc <HAL_UART_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003678:	f7ff fc9c 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800367c:	2100      	movs	r1, #0
 800367e:	480d      	ldr	r0, [pc, #52]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003680:	f006 fe8d 	bl	800a39e <HAL_UARTEx_SetTxFifoThreshold>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800368a:	f7ff fc93 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800368e:	2100      	movs	r1, #0
 8003690:	4808      	ldr	r0, [pc, #32]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 8003692:	f006 fec2 	bl	800a41a <HAL_UARTEx_SetRxFifoThreshold>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800369c:	f7ff fc8a 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036a0:	4804      	ldr	r0, [pc, #16]	; (80036b4 <MX_USART1_UART_Init+0x90>)
 80036a2:	f006 fe43 	bl	800a32c <HAL_UARTEx_DisableFifoMode>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80036ac:	f7ff fc82 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200004c0 	.word	0x200004c0
 80036b8:	40013800 	.word	0x40013800

080036bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b09e      	sub	sp, #120	; 0x78
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	2254      	movs	r2, #84	; 0x54
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 ff57 	bl	800a590 <memset>
  if(uartHandle->Instance==USART1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_UART_MspInit+0xb4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d13d      	bne.n	8003768 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036ec:	2301      	movs	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 f835 	bl	8006768 <HAL_RCCEx_PeriphCLKConfig>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003704:	f7ff fc56 	bl	8002fb4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_UART_MspInit+0xb8>)
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_UART_MspInit+0xb8>)
 800370e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003712:	6613      	str	r3, [r2, #96]	; 0x60
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_UART_MspInit+0xb8>)
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_UART_MspInit+0xb8>)
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	4a13      	ldr	r2, [pc, #76]	; (8003774 <HAL_UART_MspInit+0xb8>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_UART_MspInit+0xb8>)
 800372e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003748:	2307      	movs	r3, #7
 800374a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003750:	4619      	mov	r1, r3
 8003752:	4809      	ldr	r0, [pc, #36]	; (8003778 <HAL_UART_MspInit+0xbc>)
 8003754:	f002 f874 	bl	8005840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	2025      	movs	r0, #37	; 0x25
 800375e:	f001 fd08 	bl	8005172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003762:	2025      	movs	r0, #37	; 0x25
 8003764:	f001 fd1f 	bl	80051a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003768:	bf00      	nop
 800376a:	3778      	adds	r7, #120	; 0x78
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40013800 	.word	0x40013800
 8003774:	40021000 	.word	0x40021000
 8003778:	48000800 	.word	0x48000800

0800377c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800377e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003780:	f7ff fd50 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <LoopForever+0xe>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <LoopForever+0x16>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037aa:	f006 fecd 	bl	800a548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037ae:	f7fe fd29 	bl	8002204 <main>

080037b2 <LoopForever>:

LoopForever:
    b LoopForever
 80037b2:	e7fe      	b.n	80037b2 <LoopForever>
  ldr   r0, =_estack
 80037b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80037c0:	0800f0d0 	.word	0x0800f0d0
  ldr r2, =_sbss
 80037c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80037c8:	20000568 	.word	0x20000568

080037cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC1_2_IRQHandler>

080037ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d8:	2003      	movs	r0, #3
 80037da:	f001 fcbf 	bl	800515c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037de:	2000      	movs	r0, #0
 80037e0:	f000 f80e 	bl	8003800 <HAL_InitTick>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	71fb      	strb	r3, [r7, #7]
 80037ee:	e001      	b.n	80037f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037f0:	f7ff fbe6 	bl	8002fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f4:	79fb      	ldrb	r3, [r7, #7]

}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <HAL_InitTick+0x68>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003814:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_InitTick+0x6c>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <HAL_InitTick+0x68>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fcca 	bl	80051c2 <HAL_SYSTICK_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d809      	bhi.n	800384e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800383a:	2200      	movs	r2, #0
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	f04f 30ff 	mov.w	r0, #4294967295
 8003842:	f001 fc96 	bl	8005172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_InitTick+0x70>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	e007      	b.n	800385e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	e004      	b.n	800385e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	2000000c 	.word	0x2000000c
 800386c:	20000004 	.word	0x20000004
 8003870:	20000008 	.word	0x20000008

08003874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_IncTick+0x1c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_IncTick+0x20>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4413      	add	r3, r2
 8003882:	4a03      	ldr	r2, [pc, #12]	; (8003890 <HAL_IncTick+0x1c>)
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20000554 	.word	0x20000554
 8003894:	2000000c 	.word	0x2000000c

08003898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return uwTick;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_GetTick+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000554 	.word	0x20000554

080038b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff ffee 	bl	8003898 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d004      	beq.n	80038d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_Delay+0x40>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038d4:	bf00      	nop
 80038d6:	f7ff ffdf 	bl	8003898 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d8f7      	bhi.n	80038d6 <HAL_Delay+0x26>
  {
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3360      	adds	r3, #96	; 0x60
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <LL_ADC_SetOffset+0x44>)
 800397e:	4013      	ands	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	03fff000 	.word	0x03fff000

080039a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	461a      	mov	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3360      	adds	r3, #96	; 0x60
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3360      	adds	r3, #96	; 0x60
 8003a16:	461a      	mov	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3360      	adds	r3, #96	; 0x60
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	615a      	str	r2, [r3, #20]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3330      	adds	r3, #48	; 0x30
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	211f      	movs	r1, #31
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	401a      	ands	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	f003 011f 	and.w	r1, r3, #31
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	431a      	orrs	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3314      	adds	r3, #20
 8003b26:	461a      	mov	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0e5b      	lsrs	r3, r3, #25
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	0d1b      	lsrs	r3, r3, #20
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2107      	movs	r1, #7
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	0d1b      	lsrs	r3, r3, #20
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401a      	ands	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0318 	and.w	r3, r3, #24
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b90:	40d9      	lsrs	r1, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	400b      	ands	r3, r1
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	0007ffff 	.word	0x0007ffff

08003bb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6093      	str	r3, [r2, #8]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d101      	bne.n	8003c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c58:	d101      	bne.n	8003c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <LL_ADC_IsEnabled+0x18>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <LL_ADC_IsEnabled+0x1a>
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d101      	bne.n	8003cfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d101      	bne.n	8003d20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1a9      	b.n	800409e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fe f8fb 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff3f 	bl	8003bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff25 	bl	8003bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff5a 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d115      	bne.n	8003dc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff3e 	bl	8003c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003da0:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <HAL_ADC_Init+0x2e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	4a9c      	ldr	r2, [pc, #624]	; (8004018 <HAL_ADC_Init+0x2e8>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003db4:	e002      	b.n	8003dbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f9      	bne.n	8003db6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff3c 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10d      	bne.n	8003dee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff75 	bl	8003ce2 <LL_ADC_REG_IsConversionOngoing>
 8003df8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 8142 	bne.w	800408c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 813e 	bne.w	800408c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff35 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d141      	bne.n	8003eb4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e38:	d004      	beq.n	8003e44 <HAL_ADC_Init+0x114>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a77      	ldr	r2, [pc, #476]	; (800401c <HAL_ADC_Init+0x2ec>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10f      	bne.n	8003e64 <HAL_ADC_Init+0x134>
 8003e44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e48:	f7ff ff24 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	4873      	ldr	r0, [pc, #460]	; (800401c <HAL_ADC_Init+0x2ec>)
 8003e50:	f7ff ff20 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e012      	b.n	8003e8a <HAL_ADC_Init+0x15a>
 8003e64:	486e      	ldr	r0, [pc, #440]	; (8004020 <HAL_ADC_Init+0x2f0>)
 8003e66:	f7ff ff15 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	486d      	ldr	r0, [pc, #436]	; (8004024 <HAL_ADC_Init+0x2f4>)
 8003e6e:	f7ff ff11 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e72:	4603      	mov	r3, r0
 8003e74:	431c      	orrs	r4, r3
 8003e76:	486c      	ldr	r0, [pc, #432]	; (8004028 <HAL_ADC_Init+0x2f8>)
 8003e78:	f7ff ff0c 	bl	8003c94 <LL_ADC_IsEnabled>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4323      	orrs	r3, r4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADC_Init+0x172>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5f      	ldr	r2, [pc, #380]	; (800401c <HAL_ADC_Init+0x2ec>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_Init+0x176>
 8003ea2:	4a62      	ldr	r2, [pc, #392]	; (800402c <HAL_ADC_Init+0x2fc>)
 8003ea4:	e000      	b.n	8003ea8 <HAL_ADC_Init+0x178>
 8003ea6:	4a62      	ldr	r2, [pc, #392]	; (8004030 <HAL_ADC_Init+0x300>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7ff fd20 	bl	80038f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7f5b      	ldrb	r3, [r3, #29]
 8003eb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ebe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ec4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003eca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ed2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d106      	bne.n	8003ef0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	045b      	lsls	r3, r3, #17
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	4b48      	ldr	r3, [pc, #288]	; (8004034 <HAL_ADC_Init+0x304>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fee4 	bl	8003d08 <LL_ADC_INJ_IsConversionOngoing>
 8003f40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d17f      	bne.n	8004048 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d17c      	bne.n	8004048 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6a:	f023 0302 	bic.w	r3, r3, #2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6911      	ldr	r1, [r2, #16]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003fae:	e013      	b.n	8003fd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12a      	bne.n	8004038 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004004:	430a      	orrs	r2, r1
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e019      	b.n	8004048 <HAL_ADC_Init+0x318>
 8004014:	20000004 	.word	0x20000004
 8004018:	053e2d63 	.word	0x053e2d63
 800401c:	50000100 	.word	0x50000100
 8004020:	50000400 	.word	0x50000400
 8004024:	50000500 	.word	0x50000500
 8004028:	50000600 	.word	0x50000600
 800402c:	50000300 	.word	0x50000300
 8004030:	50000700 	.word	0x50000700
 8004034:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d10c      	bne.n	800406a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f023 010f 	bic.w	r1, r3, #15
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
 8004068:	e007      	b.n	800407a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 020f 	bic.w	r2, r2, #15
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	65da      	str	r2, [r3, #92]	; 0x5c
 800408a:	e007      	b.n	800409c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800409c:	7ffb      	ldrb	r3, [r7, #31]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3724      	adds	r7, #36	; 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop

080040a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040bc:	d004      	beq.n	80040c8 <HAL_ADC_Start_DMA+0x20>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5a      	ldr	r2, [pc, #360]	; (800422c <HAL_ADC_Start_DMA+0x184>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_Start_DMA+0x24>
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_ADC_Start_DMA+0x188>)
 80040ca:	e000      	b.n	80040ce <HAL_ADC_Start_DMA+0x26>
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_ADC_Start_DMA+0x18c>)
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fd70 	bl	8003bb4 <LL_ADC_GetMultimode>
 80040d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe01 	bl	8003ce2 <LL_ADC_REG_IsConversionOngoing>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 809b 	bne.w	800421e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x4e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e096      	b.n	8004224 <HAL_ADC_Start_DMA+0x17c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_ADC_Start_DMA+0x190>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d008      	beq.n	800411a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b05      	cmp	r3, #5
 8004112:	d002      	beq.n	800411a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b09      	cmp	r3, #9
 8004118:	d17a      	bne.n	8004210 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fcf6 	bl	8004b0c <ADC_Enable>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d16d      	bne.n	8004206 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_ADC_Start_DMA+0x184>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_ADC_Start_DMA+0xb4>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_ADC_Start_DMA+0x194>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d002      	beq.n	8004158 <HAL_ADC_Start_DMA+0xb0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	e003      	b.n	8004160 <HAL_ADC_Start_DMA+0xb8>
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <HAL_ADC_Start_DMA+0x198>)
 800415a:	e001      	b.n	8004160 <HAL_ADC_Start_DMA+0xb8>
 800415c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	4293      	cmp	r3, r2
 8004166:	d002      	beq.n	800416e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	f023 0206 	bic.w	r2, r3, #6
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	661a      	str	r2, [r3, #96]	; 0x60
 8004192:	e002      	b.n	800419a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_ADC_Start_DMA+0x19c>)
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	4a28      	ldr	r2, [pc, #160]	; (8004248 <HAL_ADC_Start_DMA+0x1a0>)
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ae:	4a27      	ldr	r2, [pc, #156]	; (800424c <HAL_ADC_Start_DMA+0x1a4>)
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	221c      	movs	r2, #28
 80041b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0210 	orr.w	r2, r2, #16
 80041d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3340      	adds	r3, #64	; 0x40
 80041ec:	4619      	mov	r1, r3
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f001 f89b 	bl	800532c <HAL_DMA_Start_IT>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fd5b 	bl	8003cba <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004204:	e00d      	b.n	8004222 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800420e:	e008      	b.n	8004222 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800421c:	e001      	b.n	8004222 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	50000100 	.word	0x50000100
 8004230:	50000300 	.word	0x50000300
 8004234:	50000700 	.word	0x50000700
 8004238:	50000600 	.word	0x50000600
 800423c:	50000500 	.word	0x50000500
 8004240:	50000400 	.word	0x50000400
 8004244:	08004c39 	.word	0x08004c39
 8004248:	08004d11 	.word	0x08004d11
 800424c:	08004d2d 	.word	0x08004d2d

08004250 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b0b6      	sub	sp, #216	; 0xd8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x24>
 80042aa:	2302      	movs	r3, #2
 80042ac:	f000 bc13 	b.w	8004ad6 <HAL_ADC_ConfigChannel+0x84a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fd10 	bl	8003ce2 <LL_ADC_REG_IsConversionOngoing>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 83f3 	bne.w	8004ab0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7ff fbf1 	bl	8003abe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fcfe 	bl	8003ce2 <LL_ADC_REG_IsConversionOngoing>
 80042e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fd0a 	bl	8003d08 <LL_ADC_INJ_IsConversionOngoing>
 80042f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 81d9 	bne.w	80046b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 81d4 	bne.w	80046b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004314:	d10f      	bne.n	8004336 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	4619      	mov	r1, r3
 8004322:	f7ff fbf8 	bl	8003b16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fb9f 	bl	8003a72 <LL_ADC_SetSamplingTimeCommonConfig>
 8004334:	e00e      	b.n	8004354 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	461a      	mov	r2, r3
 8004344:	f7ff fbe7 	bl	8003b16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fb8f 	bl	8003a72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	08db      	lsrs	r3, r3, #3
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d022      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004386:	f7ff fae9 	bl	800395c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	461a      	mov	r2, r3
 8004398:	f7ff fb35 	bl	8003a06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x126>
 80043ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b0:	e000      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x128>
 80043b2:	2300      	movs	r3, #0
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff fb41 	bl	8003a3c <LL_ADC_SetOffsetSaturation>
 80043ba:	e17b      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff faee 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x15c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fae3 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	f003 021f 	and.w	r2, r3, #31
 80043e6:	e01e      	b.n	8004426 <HAL_ADC_ConfigChannel+0x19a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fad8 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800440a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800440e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004416:	2320      	movs	r3, #32
 8004418:	e004      	b.n	8004424 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800441a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <HAL_ADC_ConfigChannel+0x1b2>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0e9b      	lsrs	r3, r3, #26
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	e018      	b.n	8004470 <HAL_ADC_ConfigChannel+0x1e4>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800445a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004462:	2320      	movs	r3, #32
 8004464:	e004      	b.n	8004470 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004470:	429a      	cmp	r2, r3
 8004472:	d106      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff faa7 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fa8b 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 800448e:	4603      	mov	r3, r0
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x222>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fa80 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 80044a4:	4603      	mov	r3, r0
 80044a6:	0e9b      	lsrs	r3, r3, #26
 80044a8:	f003 021f 	and.w	r2, r3, #31
 80044ac:	e01e      	b.n	80044ec <HAL_ADC_ConfigChannel+0x260>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2101      	movs	r1, #1
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fa75 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80044cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80044d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80044dc:	2320      	movs	r3, #32
 80044de:	e004      	b.n	80044ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80044e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x278>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	e018      	b.n	8004536 <HAL_ADC_ConfigChannel+0x2aa>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800451c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e004      	b.n	8004536 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800452c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004536:	429a      	cmp	r2, r3
 8004538:	d106      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fa44 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fa28 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 8004554:	4603      	mov	r3, r0
 8004556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x2e8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fa1d 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 800456a:	4603      	mov	r3, r0
 800456c:	0e9b      	lsrs	r3, r3, #26
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	e01e      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x326>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fa12 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 8004580:	4603      	mov	r3, r0
 8004582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800458a:	fa93 f3a3 	rbit	r3, r3
 800458e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800459a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80045a2:	2320      	movs	r3, #32
 80045a4:	e004      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x33e>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	e016      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x36c>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80045dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80045e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80045ea:	2320      	movs	r3, #32
 80045ec:	e004      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80045ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d106      	bne.n	800460a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2200      	movs	r2, #0
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff f9e3 	bl	80039d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2103      	movs	r1, #3
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f9c7 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 8004616:	4603      	mov	r3, r0
 8004618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x3aa>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2103      	movs	r1, #3
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f9bc 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 800462c:	4603      	mov	r3, r0
 800462e:	0e9b      	lsrs	r3, r3, #26
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	e017      	b.n	8004666 <HAL_ADC_ConfigChannel+0x3da>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2103      	movs	r1, #3
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f9b1 	bl	80039a4 <LL_ADC_GetOffsetChannel>
 8004642:	4603      	mov	r3, r0
 8004644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800464e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004650:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	e003      	b.n	8004664 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800465c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_ConfigChannel+0x3f2>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	e011      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x416>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800468c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004696:	2320      	movs	r3, #32
 8004698:	e003      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800469a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d106      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2103      	movs	r1, #3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f98e 	bl	80039d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff faeb 	bl	8003c94 <LL_ADC_IsEnabled>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 813d 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f7ff fa4a 	bl	8003b6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4aa2      	ldr	r2, [pc, #648]	; (8004968 <HAL_ADC_ConfigChannel+0x6dc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	f040 812e 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <HAL_ADC_ConfigChannel+0x480>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2b09      	cmp	r3, #9
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e019      	b.n	8004740 <HAL_ADC_ConfigChannel+0x4b4>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800471a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800471c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800471e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004724:	2320      	movs	r3, #32
 8004726:	e003      	b.n	8004730 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2b09      	cmp	r3, #9
 8004738:	bf94      	ite	ls
 800473a:	2301      	movls	r3, #1
 800473c:	2300      	movhi	r3, #0
 800473e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004740:	2b00      	cmp	r3, #0
 8004742:	d079      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x4d4>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0e9b      	lsrs	r3, r3, #26
 8004756:	3301      	adds	r3, #1
 8004758:	069b      	lsls	r3, r3, #26
 800475a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800475e:	e015      	b.n	800478c <HAL_ADC_ConfigChannel+0x500>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004778:	2320      	movs	r3, #32
 800477a:	e003      	b.n	8004784 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800477c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	3301      	adds	r3, #1
 8004786:	069b      	lsls	r3, r3, #26
 8004788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_ADC_ConfigChannel+0x520>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0e9b      	lsrs	r3, r3, #26
 800479e:	3301      	adds	r3, #1
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	e017      	b.n	80047dc <HAL_ADC_ConfigChannel+0x550>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80047c4:	2320      	movs	r3, #32
 80047c6:	e003      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80047c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2101      	movs	r1, #1
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	ea42 0103 	orr.w	r1, r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x576>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	3301      	adds	r3, #1
 80047f4:	f003 021f 	and.w	r2, r3, #31
 80047f8:	4613      	mov	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	051b      	lsls	r3, r3, #20
 8004800:	e018      	b.n	8004834 <HAL_ADC_ConfigChannel+0x5a8>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800481a:	2320      	movs	r3, #32
 800481c:	e003      	b.n	8004826 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004834:	430b      	orrs	r3, r1
 8004836:	e07e      	b.n	8004936 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x5c8>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	0e9b      	lsrs	r3, r3, #26
 800484a:	3301      	adds	r3, #1
 800484c:	069b      	lsls	r3, r3, #26
 800484e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004852:	e015      	b.n	8004880 <HAL_ADC_ConfigChannel+0x5f4>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800486c:	2320      	movs	r3, #32
 800486e:	e003      	b.n	8004878 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3301      	adds	r3, #1
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x614>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	3301      	adds	r3, #1
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f303 	lsl.w	r3, r1, r3
 800489e:	e017      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x644>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	61fb      	str	r3, [r7, #28]
  return result;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80048b8:	2320      	movs	r3, #32
 80048ba:	e003      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2101      	movs	r1, #1
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	ea42 0103 	orr.w	r1, r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10d      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x670>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	3301      	adds	r3, #1
 80048e8:	f003 021f 	and.w	r2, r3, #31
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	3b1e      	subs	r3, #30
 80048f4:	051b      	lsls	r3, r3, #20
 80048f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048fa:	e01b      	b.n	8004934 <HAL_ADC_ConfigChannel+0x6a8>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fa93 f3a3 	rbit	r3, r3
 8004908:	613b      	str	r3, [r7, #16]
  return result;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004914:	2320      	movs	r3, #32
 8004916:	e003      	b.n	8004920 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	3301      	adds	r3, #1
 8004922:	f003 021f 	and.w	r2, r3, #31
 8004926:	4613      	mov	r3, r2
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4413      	add	r3, r2
 800492c:	3b1e      	subs	r3, #30
 800492e:	051b      	lsls	r3, r3, #20
 8004930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004934:	430b      	orrs	r3, r1
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	4619      	mov	r1, r3
 800493c:	f7ff f8eb 	bl	8003b16 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_ADC_ConfigChannel+0x6e0>)
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80be 	beq.w	8004aca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004956:	d004      	beq.n	8004962 <HAL_ADC_ConfigChannel+0x6d6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_ADC_ConfigChannel+0x6e4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10a      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x6ec>
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_ADC_ConfigChannel+0x6e8>)
 8004964:	e009      	b.n	800497a <HAL_ADC_ConfigChannel+0x6ee>
 8004966:	bf00      	nop
 8004968:	407f0000 	.word	0x407f0000
 800496c:	80080000 	.word	0x80080000
 8004970:	50000100 	.word	0x50000100
 8004974:	50000300 	.word	0x50000300
 8004978:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <HAL_ADC_ConfigChannel+0x854>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe ffe0 	bl	8003940 <LL_ADC_GetCommonPathInternalCh>
 8004980:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a56      	ldr	r2, [pc, #344]	; (8004ae4 <HAL_ADC_ConfigChannel+0x858>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_ADC_ConfigChannel+0x70c>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a55      	ldr	r2, [pc, #340]	; (8004ae8 <HAL_ADC_ConfigChannel+0x85c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d13a      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800499c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d134      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ac:	d005      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x72e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4e      	ldr	r2, [pc, #312]	; (8004aec <HAL_ADC_ConfigChannel+0x860>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	f040 8085 	bne.w	8004ac4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c2:	d004      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x742>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a49      	ldr	r2, [pc, #292]	; (8004af0 <HAL_ADC_ConfigChannel+0x864>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x746>
 80049ce:	4a49      	ldr	r2, [pc, #292]	; (8004af4 <HAL_ADC_ConfigChannel+0x868>)
 80049d0:	e000      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x748>
 80049d2:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_ADC_ConfigChannel+0x854>)
 80049d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fe ff9b 	bl	800391a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049e4:	4b44      	ldr	r3, [pc, #272]	; (8004af8 <HAL_ADC_ConfigChannel+0x86c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	4a44      	ldr	r2, [pc, #272]	; (8004afc <HAL_ADC_ConfigChannel+0x870>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049fe:	e002      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f9      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a0c:	e05a      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3b      	ldr	r2, [pc, #236]	; (8004b00 <HAL_ADC_ConfigChannel+0x874>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d125      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11f      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_ADC_ConfigChannel+0x864>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d104      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x7ac>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <HAL_ADC_ConfigChannel+0x878>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d047      	beq.n	8004ac8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a40:	d004      	beq.n	8004a4c <HAL_ADC_ConfigChannel+0x7c0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2a      	ldr	r2, [pc, #168]	; (8004af0 <HAL_ADC_ConfigChannel+0x864>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x7c4>
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <HAL_ADC_ConfigChannel+0x868>)
 8004a4e:	e000      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x7c6>
 8004a50:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <HAL_ADC_ConfigChannel+0x854>)
 8004a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe ff5c 	bl	800391a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a62:	e031      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <HAL_ADC_ConfigChannel+0x87c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d12d      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d127      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_ADC_ConfigChannel+0x864>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a8c:	d004      	beq.n	8004a98 <HAL_ADC_ConfigChannel+0x80c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <HAL_ADC_ConfigChannel+0x864>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x810>
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_ADC_ConfigChannel+0x868>)
 8004a9a:	e000      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x812>
 8004a9c:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_ADC_ConfigChannel+0x854>)
 8004a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe ff36 	bl	800391a <LL_ADC_SetCommonPathInternalCh>
 8004aae:	e00c      	b.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	f043 0220 	orr.w	r2, r3, #32
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004ac2:	e002      	b.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ad2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	37d8      	adds	r7, #216	; 0xd8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	50000700 	.word	0x50000700
 8004ae4:	c3210000 	.word	0xc3210000
 8004ae8:	90c00010 	.word	0x90c00010
 8004aec:	50000600 	.word	0x50000600
 8004af0:	50000100 	.word	0x50000100
 8004af4:	50000300 	.word	0x50000300
 8004af8:	20000004 	.word	0x20000004
 8004afc:	053e2d63 	.word	0x053e2d63
 8004b00:	c7520000 	.word	0xc7520000
 8004b04:	50000500 	.word	0x50000500
 8004b08:	cb840000 	.word	0xcb840000

08004b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff f8b9 	bl	8003c94 <LL_ADC_IsEnabled>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d176      	bne.n	8004c16 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <ADC_Enable+0x114>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	f043 0210 	orr.w	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b46:	f043 0201 	orr.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e062      	b.n	8004c18 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff f888 	bl	8003c6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b64:	d004      	beq.n	8004b70 <ADC_Enable+0x64>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <ADC_Enable+0x118>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <ADC_Enable+0x68>
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <ADC_Enable+0x11c>)
 8004b72:	e000      	b.n	8004b76 <ADC_Enable+0x6a>
 8004b74:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <ADC_Enable+0x120>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe fee2 	bl	8003940 <LL_ADC_GetCommonPathInternalCh>
 8004b7c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d013      	beq.n	8004bae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <ADC_Enable+0x124>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <ADC_Enable+0x128>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	099b      	lsrs	r3, r3, #6
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	4613      	mov	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ba0:	e002      	b.n	8004ba8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f9      	bne.n	8004ba2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bae:	f7fe fe73 	bl	8003898 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bb4:	e028      	b.n	8004c08 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f86a 	bl	8003c94 <LL_ADC_IsEnabled>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f84e 	bl	8003c6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bd0:	f7fe fe62 	bl	8003898 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d914      	bls.n	8004c08 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00d      	beq.n	8004c08 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	f043 0210 	orr.w	r2, r3, #16
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e007      	b.n	8004c18 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d1cf      	bne.n	8004bb6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	8000003f 	.word	0x8000003f
 8004c24:	50000100 	.word	0x50000100
 8004c28:	50000300 	.word	0x50000300
 8004c2c:	50000700 	.word	0x50000700
 8004c30:	20000004 	.word	0x20000004
 8004c34:	053e2d63 	.word	0x053e2d63

08004c38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d14b      	bne.n	8004cea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d021      	beq.n	8004cb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe ff11 	bl	8003a98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d032      	beq.n	8004ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d12b      	bne.n	8004ce2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11f      	bne.n	8004ce2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cae:	e018      	b.n	8004ce2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d111      	bne.n	8004ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d105      	bne.n	8004ce2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fab4 	bl	8004250 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ce8:	e00e      	b.n	8004d08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fabe 	bl	8004278 <HAL_ADC_ErrorCallback>
}
 8004cfc:	e004      	b.n	8004d08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff faa0 	bl	8004264 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	f043 0204 	orr.w	r2, r3, #4
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff fa90 	bl	8004278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <LL_ADC_IsEnabled>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <LL_ADC_IsEnabled+0x18>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <LL_ADC_IsEnabled+0x1a>
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d101      	bne.n	8004d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b0a1      	sub	sp, #132	; 0x84
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e0e7      	b.n	8004f9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de2:	d102      	bne.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004de4:	4b6f      	ldr	r3, [pc, #444]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	e009      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6e      	ldr	r2, [pc, #440]	; (8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d102      	bne.n	8004dfa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004df4:	4b6d      	ldr	r3, [pc, #436]	; (8004fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	e001      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0be      	b.n	8004f9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ffb1 	bl	8004d86 <LL_ADC_REG_IsConversionOngoing>
 8004e24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ffab 	bl	8004d86 <LL_ADC_REG_IsConversionOngoing>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f040 80a0 	bne.w	8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 809c 	bne.w	8004f78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e48:	d004      	beq.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a55      	ldr	r2, [pc, #340]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004e54:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004e56:	e000      	b.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004e58:	4b56      	ldr	r3, [pc, #344]	; (8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004e5a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04b      	beq.n	8004efc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e76:	035b      	lsls	r3, r3, #13
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e88:	d004      	beq.n	8004e94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a45      	ldr	r2, [pc, #276]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d10f      	bne.n	8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004e94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e98:	f7ff ff62 	bl	8004d60 <LL_ADC_IsEnabled>
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4841      	ldr	r0, [pc, #260]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ea0:	f7ff ff5e 	bl	8004d60 <LL_ADC_IsEnabled>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4323      	orrs	r3, r4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e012      	b.n	8004eda <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004eb4:	483c      	ldr	r0, [pc, #240]	; (8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004eb6:	f7ff ff53 	bl	8004d60 <LL_ADC_IsEnabled>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	483b      	ldr	r0, [pc, #236]	; (8004fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ebe:	f7ff ff4f 	bl	8004d60 <LL_ADC_IsEnabled>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	431c      	orrs	r4, r3
 8004ec6:	483c      	ldr	r0, [pc, #240]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ec8:	f7ff ff4a 	bl	8004d60 <LL_ADC_IsEnabled>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4323      	orrs	r3, r4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d056      	beq.n	8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ee6:	f023 030f 	bic.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	6892      	ldr	r2, [r2, #8]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004efa:	e047      	b.n	8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f10:	d004      	beq.n	8004f1c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10f      	bne.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f20:	f7ff ff1e 	bl	8004d60 <LL_ADC_IsEnabled>
 8004f24:	4604      	mov	r4, r0
 8004f26:	481f      	ldr	r0, [pc, #124]	; (8004fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f28:	f7ff ff1a 	bl	8004d60 <LL_ADC_IsEnabled>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4323      	orrs	r3, r4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e012      	b.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004f3c:	481a      	ldr	r0, [pc, #104]	; (8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f3e:	f7ff ff0f 	bl	8004d60 <LL_ADC_IsEnabled>
 8004f42:	4604      	mov	r4, r0
 8004f44:	4819      	ldr	r0, [pc, #100]	; (8004fac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f46:	f7ff ff0b 	bl	8004d60 <LL_ADC_IsEnabled>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	431c      	orrs	r4, r3
 8004f4e:	481a      	ldr	r0, [pc, #104]	; (8004fb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f50:	f7ff ff06 	bl	8004d60 <LL_ADC_IsEnabled>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4323      	orrs	r3, r4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d012      	beq.n	8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f6e:	f023 030f 	bic.w	r3, r3, #15
 8004f72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f76:	e009      	b.n	8004f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f8a:	e000      	b.n	8004f8e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3784      	adds	r7, #132	; 0x84
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	50000100 	.word	0x50000100
 8004fa8:	50000400 	.word	0x50000400
 8004fac:	50000500 	.word	0x50000500
 8004fb0:	50000300 	.word	0x50000300
 8004fb4:	50000700 	.word	0x50000700
 8004fb8:	50000600 	.word	0x50000600

08004fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fcc:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fee:	4a04      	ldr	r2, [pc, #16]	; (8005000 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	60d3      	str	r3, [r2, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__NVIC_GetPriorityGrouping+0x18>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	f003 0307 	and.w	r3, r3, #7
}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db0b      	blt.n	800504a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	f003 021f 	and.w	r2, r3, #31
 8005038:	4907      	ldr	r1, [pc, #28]	; (8005058 <__NVIC_EnableIRQ+0x38>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2001      	movs	r0, #1
 8005042:	fa00 f202 	lsl.w	r2, r0, r2
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e100 	.word	0xe000e100

0800505c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	6039      	str	r1, [r7, #0]
 8005066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db0a      	blt.n	8005086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	490c      	ldr	r1, [pc, #48]	; (80050a8 <__NVIC_SetPriority+0x4c>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	0112      	lsls	r2, r2, #4
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	440b      	add	r3, r1
 8005080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005084:	e00a      	b.n	800509c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	4908      	ldr	r1, [pc, #32]	; (80050ac <__NVIC_SetPriority+0x50>)
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	3b04      	subs	r3, #4
 8005094:	0112      	lsls	r2, r2, #4
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	440b      	add	r3, r1
 800509a:	761a      	strb	r2, [r3, #24]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000e100 	.word	0xe000e100
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f1c3 0307 	rsb	r3, r3, #7
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf28      	it	cs
 80050ce:	2304      	movcs	r3, #4
 80050d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3304      	adds	r3, #4
 80050d6:	2b06      	cmp	r3, #6
 80050d8:	d902      	bls.n	80050e0 <NVIC_EncodePriority+0x30>
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3b03      	subs	r3, #3
 80050de:	e000      	b.n	80050e2 <NVIC_EncodePriority+0x32>
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43da      	mvns	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	401a      	ands	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f8:	f04f 31ff 	mov.w	r1, #4294967295
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	43d9      	mvns	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	4313      	orrs	r3, r2
         );
}
 800510a:	4618      	mov	r0, r3
 800510c:	3724      	adds	r7, #36	; 0x24
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005128:	d301      	bcc.n	800512e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800512a:	2301      	movs	r3, #1
 800512c:	e00f      	b.n	800514e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <SysTick_Config+0x40>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005136:	210f      	movs	r1, #15
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	f7ff ff8e 	bl	800505c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <SysTick_Config+0x40>)
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <SysTick_Config+0x40>)
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	e000e010 	.word	0xe000e010

0800515c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ff29 	bl	8004fbc <__NVIC_SetPriorityGrouping>
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	4603      	mov	r3, r0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005180:	f7ff ff40 	bl	8005004 <__NVIC_GetPriorityGrouping>
 8005184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff ff90 	bl	80050b0 <NVIC_EncodePriority>
 8005190:	4602      	mov	r2, r0
 8005192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff5f 	bl	800505c <__NVIC_SetPriority>
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff33 	bl	8005020 <__NVIC_EnableIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ffa4 	bl	8005118 <SysTick_Config>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e08d      	b.n	800530a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b47      	ldr	r3, [pc, #284]	; (8005314 <HAL_DMA_Init+0x138>)
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d80f      	bhi.n	800521a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	4b45      	ldr	r3, [pc, #276]	; (8005318 <HAL_DMA_Init+0x13c>)
 8005202:	4413      	add	r3, r2
 8005204:	4a45      	ldr	r2, [pc, #276]	; (800531c <HAL_DMA_Init+0x140>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	009a      	lsls	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a42      	ldr	r2, [pc, #264]	; (8005320 <HAL_DMA_Init+0x144>)
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
 8005218:	e00e      	b.n	8005238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_DMA_Init+0x148>)
 8005222:	4413      	add	r3, r2
 8005224:	4a3d      	ldr	r2, [pc, #244]	; (800531c <HAL_DMA_Init+0x140>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <HAL_DMA_Init+0x14c>)
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800525c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa76 	bl	800577c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005298:	d102      	bne.n	80052a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_DMA_Init+0x104>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d80c      	bhi.n	80052e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa96 	bl	80057f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e008      	b.n	80052f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40020407 	.word	0x40020407
 8005318:	bffdfff8 	.word	0xbffdfff8
 800531c:	cccccccd 	.word	0xcccccccd
 8005320:	40020000 	.word	0x40020000
 8005324:	bffdfbf8 	.word	0xbffdfbf8
 8005328:	40020400 	.word	0x40020400

0800532c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_DMA_Start_IT+0x20>
 8005348:	2302      	movs	r3, #2
 800534a:	e066      	b.n	800541a <HAL_DMA_Start_IT+0xee>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d155      	bne.n	800540c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f9bb 	bl	8005700 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 020e 	orr.w	r2, r2, #14
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e00f      	b.n	80053c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 020a 	orr.w	r2, r2, #10
 80053c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0201 	orr.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e005      	b.n	8005418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005414:	2302      	movs	r3, #2
 8005416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d005      	beq.n	8005446 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e037      	b.n	80054b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 020e 	bic.w	r2, r2, #14
 8005454:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005464:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f003 021f 	and.w	r2, r3, #31
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005492:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80054b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d00d      	beq.n	8005508 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2204      	movs	r2, #4
 80054f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e047      	b.n	8005598 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 020e 	bic.w	r2, r2, #14
 8005516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 021f 	and.w	r2, r3, #31
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f202 	lsl.w	r2, r1, r2
 800554a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005554:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800556c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005576:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
    }
  }
  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2204      	movs	r2, #4
 80055c4:	409a      	lsls	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d026      	beq.n	800561c <HAL_DMA_IRQHandler+0x7a>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d021      	beq.n	800561c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0204 	bic.w	r2, r2, #4
 80055f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f003 021f 	and.w	r2, r3, #31
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2104      	movs	r1, #4
 8005604:	fa01 f202 	lsl.w	r2, r1, r2
 8005608:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	2b00      	cmp	r3, #0
 8005610:	d071      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800561a:	e06c      	b.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2202      	movs	r2, #2
 8005626:	409a      	lsls	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02e      	beq.n	800568e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d029      	beq.n	800568e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 020a 	bic.w	r2, r2, #10
 8005656:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f003 021f 	and.w	r2, r3, #31
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2102      	movs	r1, #2
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d038      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800568c:	e033      	b.n	80056f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f003 031f 	and.w	r3, r3, #31
 8005696:	2208      	movs	r2, #8
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02a      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d025      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 020e 	bic.w	r2, r2, #14
 80056ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c0:	f003 021f 	and.w	r2, r3, #31
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f202 	lsl.w	r2, r1, r2
 80056ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
}
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005716:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005728:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f003 021f 	and.w	r2, r3, #31
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	2101      	movs	r1, #1
 8005738:	fa01 f202 	lsl.w	r2, r1, r2
 800573c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b10      	cmp	r3, #16
 800574c:	d108      	bne.n	8005760 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800575e:	e007      	b.n	8005770 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800578c:	429a      	cmp	r2, r3
 800578e:	d802      	bhi.n	8005796 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e001      	b.n	800579a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005798:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3b08      	subs	r3, #8
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	009a      	lsls	r2, r3, #2
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	461a      	mov	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40020407 	.word	0x40020407
 80057e8:	40020800 	.word	0x40020800
 80057ec:	40020820 	.word	0x40020820
 80057f0:	cccccccd 	.word	0xcccccccd
 80057f4:	40020880 	.word	0x40020880

080057f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	461a      	mov	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a08      	ldr	r2, [pc, #32]	; (800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800581a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b01      	subs	r3, #1
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2201      	movs	r2, #1
 8005826:	409a      	lsls	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	1000823f 	.word	0x1000823f
 800583c:	40020940 	.word	0x40020940

08005840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800584e:	e15a      	b.n	8005b06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2101      	movs	r1, #1
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 814c 	beq.w	8005b00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d005      	beq.n	8005880 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800587c:	2b02      	cmp	r3, #2
 800587e:	d130      	bne.n	80058e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2203      	movs	r2, #3
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058b6:	2201      	movs	r2, #1
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4013      	ands	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f003 0201 	and.w	r2, r3, #1
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d017      	beq.n	800591e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	2203      	movs	r2, #3
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4013      	ands	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d123      	bne.n	8005972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	08da      	lsrs	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3208      	adds	r2, #8
 8005932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	220f      	movs	r2, #15
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43db      	mvns	r3, r3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	08da      	lsrs	r2, r3, #3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3208      	adds	r2, #8
 800596c:	6939      	ldr	r1, [r7, #16]
 800596e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	2203      	movs	r2, #3
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 0203 	and.w	r2, r3, #3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80a6 	beq.w	8005b00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059b4:	4b5b      	ldr	r3, [pc, #364]	; (8005b24 <HAL_GPIO_Init+0x2e4>)
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	4a5a      	ldr	r2, [pc, #360]	; (8005b24 <HAL_GPIO_Init+0x2e4>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6613      	str	r3, [r2, #96]	; 0x60
 80059c0:	4b58      	ldr	r3, [pc, #352]	; (8005b24 <HAL_GPIO_Init+0x2e4>)
 80059c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059cc:	4a56      	ldr	r2, [pc, #344]	; (8005b28 <HAL_GPIO_Init+0x2e8>)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	3302      	adds	r3, #2
 80059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 0303 	and.w	r3, r3, #3
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	220f      	movs	r2, #15
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059f6:	d01f      	beq.n	8005a38 <HAL_GPIO_Init+0x1f8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a4c      	ldr	r2, [pc, #304]	; (8005b2c <HAL_GPIO_Init+0x2ec>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d019      	beq.n	8005a34 <HAL_GPIO_Init+0x1f4>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a4b      	ldr	r2, [pc, #300]	; (8005b30 <HAL_GPIO_Init+0x2f0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <HAL_GPIO_Init+0x1f0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_GPIO_Init+0x2f4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00d      	beq.n	8005a2c <HAL_GPIO_Init+0x1ec>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a49      	ldr	r2, [pc, #292]	; (8005b38 <HAL_GPIO_Init+0x2f8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <HAL_GPIO_Init+0x1e8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a48      	ldr	r2, [pc, #288]	; (8005b3c <HAL_GPIO_Init+0x2fc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_GPIO_Init+0x1e4>
 8005a20:	2305      	movs	r3, #5
 8005a22:	e00a      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a24:	2306      	movs	r3, #6
 8005a26:	e008      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	e006      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e004      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e002      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_GPIO_Init+0x1fa>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	f002 0203 	and.w	r2, r2, #3
 8005a40:	0092      	lsls	r2, r2, #2
 8005a42:	4093      	lsls	r3, r2
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a4a:	4937      	ldr	r1, [pc, #220]	; (8005b28 <HAL_GPIO_Init+0x2e8>)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	3302      	adds	r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a58:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a7c:	4a30      	ldr	r2, [pc, #192]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a82:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005aa6:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005aac:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005afa:	4a11      	ldr	r2, [pc, #68]	; (8005b40 <HAL_GPIO_Init+0x300>)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3301      	adds	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f47f ae9d 	bne.w	8005850 <HAL_GPIO_Init+0x10>
  }
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	48000400 	.word	0x48000400
 8005b30:	48000800 	.word	0x48000800
 8005b34:	48000c00 	.word	0x48000c00
 8005b38:	48001000 	.word	0x48001000
 8005b3c:	48001400 	.word	0x48001400
 8005b40:	40010400 	.word	0x40010400

08005b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e001      	b.n	8005b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
 8005b80:	4613      	mov	r3, r2
 8005b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b84:	787b      	ldrb	r3, [r7, #1]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b8a:	887a      	ldrh	r2, [r7, #2]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b90:	e002      	b.n	8005b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d141      	bne.n	8005c36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bb2:	4b4b      	ldr	r3, [pc, #300]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbe:	d131      	bne.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bc0:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc6:	4a46      	ldr	r2, [pc, #280]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bd0:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bd8:	4a41      	ldr	r2, [pc, #260]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005be0:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2232      	movs	r2, #50	; 0x32
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	0c9b      	lsrs	r3, r3, #18
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bf6:	e002      	b.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfe:	4b38      	ldr	r3, [pc, #224]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0a:	d102      	bne.n	8005c12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f2      	bne.n	8005bf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c12:	4b33      	ldr	r3, [pc, #204]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1e:	d158      	bne.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e057      	b.n	8005cd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c24:	4b2e      	ldr	r3, [pc, #184]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c34:	e04d      	b.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c3c:	d141      	bne.n	8005cc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c3e:	4b28      	ldr	r3, [pc, #160]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4a:	d131      	bne.n	8005cb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c52:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c5c:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c64:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2232      	movs	r2, #50	; 0x32
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	0c9b      	lsrs	r3, r3, #18
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c82:	e002      	b.n	8005c8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c96:	d102      	bne.n	8005c9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f2      	bne.n	8005c84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c9e:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005caa:	d112      	bne.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e011      	b.n	8005cd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005cc0:	e007      	b.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cca:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	20000004 	.word	0x20000004
 8005ce8:	431bde83 	.word	0x431bde83

08005cec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cfa:	6093      	str	r3, [r2, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40007000 	.word	0x40007000

08005d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e2fe      	b.n	800631c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d075      	beq.n	8005e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2a:	4b97      	ldr	r3, [pc, #604]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
 8005d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d34:	4b94      	ldr	r3, [pc, #592]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b0c      	cmp	r3, #12
 8005d42:	d102      	bne.n	8005d4a <HAL_RCC_OscConfig+0x3e>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d002      	beq.n	8005d50 <HAL_RCC_OscConfig+0x44>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	4b8d      	ldr	r3, [pc, #564]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d05b      	beq.n	8005e14 <HAL_RCC_OscConfig+0x108>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d157      	bne.n	8005e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e2d9      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d106      	bne.n	8005d80 <HAL_RCC_OscConfig+0x74>
 8005d72:	4b85      	ldr	r3, [pc, #532]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a84      	ldr	r2, [pc, #528]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e01d      	b.n	8005dbc <HAL_RCC_OscConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x98>
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7e      	ldr	r2, [pc, #504]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b7c      	ldr	r3, [pc, #496]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7b      	ldr	r2, [pc, #492]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0xb0>
 8005da4:	4b78      	ldr	r3, [pc, #480]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a77      	ldr	r2, [pc, #476]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b75      	ldr	r3, [pc, #468]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a74      	ldr	r2, [pc, #464]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fd fd68 	bl	8003898 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fd fd64 	bl	8003898 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e29e      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dde:	4b6a      	ldr	r3, [pc, #424]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xc0>
 8005dea:	e014      	b.n	8005e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fd fd54 	bl	8003898 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fd fd50 	bl	8003898 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e28a      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e06:	4b60      	ldr	r3, [pc, #384]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0xe8>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d075      	beq.n	8005f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e22:	4b59      	ldr	r3, [pc, #356]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e2c:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCC_OscConfig+0x136>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_OscConfig+0x13c>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d11f      	bne.n	8005e88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e48:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_OscConfig+0x154>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e25d      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e60:	4b49      	ldr	r3, [pc, #292]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4946      	ldr	r1, [pc, #280]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <HAL_RCC_OscConfig+0x280>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fcc1 	bl	8003800 <HAL_InitTick>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d043      	beq.n	8005f0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e249      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d023      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e90:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a3c      	ldr	r2, [pc, #240]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fd fcfc 	bl	8003898 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea4:	f7fd fcf8 	bl	8003898 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e232      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb6:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0f0      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec2:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	061b      	lsls	r3, r3, #24
 8005ed0:	492d      	ldr	r1, [pc, #180]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	604b      	str	r3, [r1, #4]
 8005ed6:	e01a      	b.n	8005f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fd fcd8 	bl	8003898 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eec:	f7fd fcd4 	bl	8003898 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e20e      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x1e0>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d041      	beq.n	8005f9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f22:	4b19      	ldr	r3, [pc, #100]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f28:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f32:	f7fd fcb1 	bl	8003898 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f3a:	f7fd fcad 	bl	8003898 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e1e7      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0ef      	beq.n	8005f3a <HAL_RCC_OscConfig+0x22e>
 8005f5a:	e020      	b.n	8005f9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_RCC_OscConfig+0x27c>)
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f6c:	f7fd fc94 	bl	8003898 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f72:	e00d      	b.n	8005f90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f74:	f7fd fc90 	bl	8003898 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d906      	bls.n	8005f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e1ca      	b.n	800631c <HAL_RCC_OscConfig+0x610>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f90:	4b8c      	ldr	r3, [pc, #560]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8005f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1ea      	bne.n	8005f74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a6 	beq.w	80060f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fac:	2300      	movs	r3, #0
 8005fae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fb0:	4b84      	ldr	r3, [pc, #528]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x2b4>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <HAL_RCC_OscConfig+0x2b6>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00d      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc6:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8005fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8005fd2:	4b7c      	ldr	r3, [pc, #496]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fe2:	4b79      	ldr	r3, [pc, #484]	; (80061c8 <HAL_RCC_OscConfig+0x4bc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d118      	bne.n	8006020 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fee:	4b76      	ldr	r3, [pc, #472]	; (80061c8 <HAL_RCC_OscConfig+0x4bc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a75      	ldr	r2, [pc, #468]	; (80061c8 <HAL_RCC_OscConfig+0x4bc>)
 8005ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffa:	f7fd fc4d 	bl	8003898 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006002:	f7fd fc49 	bl	8003898 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e183      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006014:	4b6c      	ldr	r3, [pc, #432]	; (80061c8 <HAL_RCC_OscConfig+0x4bc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d108      	bne.n	800603a <HAL_RCC_OscConfig+0x32e>
 8006028:	4b66      	ldr	r3, [pc, #408]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	4a65      	ldr	r2, [pc, #404]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006030:	f043 0301 	orr.w	r3, r3, #1
 8006034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006038:	e024      	b.n	8006084 <HAL_RCC_OscConfig+0x378>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b05      	cmp	r3, #5
 8006040:	d110      	bne.n	8006064 <HAL_RCC_OscConfig+0x358>
 8006042:	4b60      	ldr	r3, [pc, #384]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	4a5e      	ldr	r2, [pc, #376]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800604a:	f043 0304 	orr.w	r3, r3, #4
 800604e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006052:	4b5c      	ldr	r3, [pc, #368]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	4a5a      	ldr	r2, [pc, #360]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006062:	e00f      	b.n	8006084 <HAL_RCC_OscConfig+0x378>
 8006064:	4b57      	ldr	r3, [pc, #348]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	4a56      	ldr	r2, [pc, #344]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006074:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607a:	4a52      	ldr	r2, [pc, #328]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800607c:	f023 0304 	bic.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d016      	beq.n	80060ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fd fc04 	bl	8003898 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fd fc00 	bl	8003898 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e138      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060aa:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ed      	beq.n	8006094 <HAL_RCC_OscConfig+0x388>
 80060b8:	e015      	b.n	80060e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fd fbed 	bl	8003898 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fd fbe9 	bl	8003898 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e121      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d8:	4b3a      	ldr	r3, [pc, #232]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ed      	bne.n	80060c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060e6:	7ffb      	ldrb	r3, [r7, #31]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ec:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f0:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d03c      	beq.n	800617e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01c      	beq.n	8006146 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800610e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006112:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fd fbbc 	bl	8003898 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006124:	f7fd fbb8 	bl	8003898 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e0f2      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006136:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ef      	beq.n	8006124 <HAL_RCC_OscConfig+0x418>
 8006144:	e01b      	b.n	800617e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006146:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800614e:	f023 0301 	bic.w	r3, r3, #1
 8006152:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fd fb9f 	bl	8003898 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800615e:	f7fd fb9b 	bl	8003898 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e0d5      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006170:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 8006172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ef      	bne.n	800615e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80c9 	beq.w	800631a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006188:	4b0e      	ldr	r3, [pc, #56]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b0c      	cmp	r3, #12
 8006192:	f000 8083 	beq.w	800629c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d15e      	bne.n	800625c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fd fb75 	bl	8003898 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b0:	e00c      	b.n	80061cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b2:	f7fd fb71 	bl	8003898 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d905      	bls.n	80061cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0ab      	b.n	800631c <HAL_RCC_OscConfig+0x610>
 80061c4:	40021000 	.word	0x40021000
 80061c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061cc:	4b55      	ldr	r3, [pc, #340]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ec      	bne.n	80061b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d8:	4b52      	ldr	r3, [pc, #328]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	4b52      	ldr	r3, [pc, #328]	; (8006328 <HAL_RCC_OscConfig+0x61c>)
 80061de:	4013      	ands	r3, r2
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6a11      	ldr	r1, [r2, #32]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061e8:	3a01      	subs	r2, #1
 80061ea:	0112      	lsls	r2, r2, #4
 80061ec:	4311      	orrs	r1, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061f2:	0212      	lsls	r2, r2, #8
 80061f4:	4311      	orrs	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061fa:	0852      	lsrs	r2, r2, #1
 80061fc:	3a01      	subs	r2, #1
 80061fe:	0552      	lsls	r2, r2, #21
 8006200:	4311      	orrs	r1, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006206:	0852      	lsrs	r2, r2, #1
 8006208:	3a01      	subs	r2, #1
 800620a:	0652      	lsls	r2, r2, #25
 800620c:	4311      	orrs	r1, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006212:	06d2      	lsls	r2, r2, #27
 8006214:	430a      	orrs	r2, r1
 8006216:	4943      	ldr	r1, [pc, #268]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006218:	4313      	orrs	r3, r2
 800621a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621c:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a40      	ldr	r2, [pc, #256]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006226:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006228:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a3d      	ldr	r2, [pc, #244]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 800622e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006232:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7fd fb30 	bl	8003898 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623c:	f7fd fb2c 	bl	8003898 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e066      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800624e:	4b35      	ldr	r3, [pc, #212]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0x530>
 800625a:	e05e      	b.n	800631a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625c:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fd fb16 	bl	8003898 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fd fb12 	bl	8003898 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e04c      	b.n	800631c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006282:	4b28      	ldr	r3, [pc, #160]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800628e:	4b25      	ldr	r3, [pc, #148]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	4924      	ldr	r1, [pc, #144]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <HAL_RCC_OscConfig+0x620>)
 8006296:	4013      	ands	r3, r2
 8006298:	60cb      	str	r3, [r1, #12]
 800629a:	e03e      	b.n	800631a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e039      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062a8:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <HAL_RCC_OscConfig+0x618>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 0203 	and.w	r2, r3, #3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d12c      	bne.n	8006316 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	3b01      	subs	r3, #1
 80062c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d123      	bne.n	8006316 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d11b      	bne.n	8006316 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d113      	bne.n	8006316 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	3b01      	subs	r3, #1
 80062fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d109      	bne.n	8006316 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	3b01      	subs	r3, #1
 8006310:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40021000 	.word	0x40021000
 8006328:	019f800c 	.word	0x019f800c
 800632c:	feeefffc 	.word	0xfeeefffc

08006330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e11e      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006348:	4b91      	ldr	r3, [pc, #580]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d910      	bls.n	8006378 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006356:	4b8e      	ldr	r3, [pc, #568]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 020f 	bic.w	r2, r3, #15
 800635e:	498c      	ldr	r1, [pc, #560]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006366:	4b8a      	ldr	r3, [pc, #552]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d001      	beq.n	8006378 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e106      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d073      	beq.n	800646c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d129      	bne.n	80063e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638c:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0f4      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800639c:	f000 f99e 	bl	80066dc <RCC_GetSysClockFreqFromPLLSource>
 80063a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4a7c      	ldr	r2, [pc, #496]	; (8006598 <HAL_RCC_ClockConfig+0x268>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d93f      	bls.n	800642a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063aa:	4b7a      	ldr	r3, [pc, #488]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d033      	beq.n	800642a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d12f      	bne.n	800642a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063ca:	4b72      	ldr	r3, [pc, #456]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d2:	4a70      	ldr	r2, [pc, #448]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80063d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e024      	b.n	800642a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063e8:	4b6a      	ldr	r3, [pc, #424]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0c6      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063f8:	4b66      	ldr	r3, [pc, #408]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0be      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006408:	f000 f8ce 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 800640c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4a61      	ldr	r2, [pc, #388]	; (8006598 <HAL_RCC_ClockConfig+0x268>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d909      	bls.n	800642a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006416:	4b5f      	ldr	r3, [pc, #380]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641e:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006426:	2380      	movs	r3, #128	; 0x80
 8006428:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800642a:	4b5a      	ldr	r3, [pc, #360]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 0203 	bic.w	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4957      	ldr	r1, [pc, #348]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643c:	f7fd fa2c 	bl	8003898 <HAL_GetTick>
 8006440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	e00a      	b.n	800645a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006444:	f7fd fa28 	bl	8003898 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006452:	4293      	cmp	r3, r2
 8006454:	d901      	bls.n	800645a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e095      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	4b4e      	ldr	r3, [pc, #312]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 020c 	and.w	r2, r3, #12
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	429a      	cmp	r2, r3
 800646a:	d1eb      	bne.n	8006444 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d023      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006484:	4b43      	ldr	r3, [pc, #268]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a42      	ldr	r2, [pc, #264]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800648a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800648e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800649c:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80064a4:	4a3b      	ldr	r2, [pc, #236]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80064a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ac:	4b39      	ldr	r3, [pc, #228]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4936      	ldr	r1, [pc, #216]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]
 80064be:	e008      	b.n	80064d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d105      	bne.n	80064d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064c6:	4b33      	ldr	r3, [pc, #204]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4a32      	ldr	r2, [pc, #200]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 80064cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064d2:	4b2f      	ldr	r3, [pc, #188]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d21d      	bcs.n	800651c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e0:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 020f 	bic.w	r2, r3, #15
 80064e8:	4929      	ldr	r1, [pc, #164]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064f0:	f7fd f9d2 	bl	8003898 <HAL_GetTick>
 80064f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f6:	e00a      	b.n	800650e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f8:	f7fd f9ce 	bl	8003898 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f241 3288 	movw	r2, #5000	; 0x1388
 8006506:	4293      	cmp	r3, r2
 8006508:	d901      	bls.n	800650e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e03b      	b.n	8006586 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <HAL_RCC_ClockConfig+0x260>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d1ed      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	4917      	ldr	r1, [pc, #92]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	490f      	ldr	r1, [pc, #60]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006556:	4313      	orrs	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800655a:	f000 f825 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 800655e:	4602      	mov	r2, r0
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <HAL_RCC_ClockConfig+0x264>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	490c      	ldr	r1, [pc, #48]	; (800659c <HAL_RCC_ClockConfig+0x26c>)
 800656c:	5ccb      	ldrb	r3, [r1, r3]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	fa22 f303 	lsr.w	r3, r2, r3
 8006576:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x270>)
 8006578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800657a:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <HAL_RCC_ClockConfig+0x274>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd f93e 	bl	8003800 <HAL_InitTick>
 8006584:	4603      	mov	r3, r0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40022000 	.word	0x40022000
 8006594:	40021000 	.word	0x40021000
 8006598:	04c4b400 	.word	0x04c4b400
 800659c:	0800eb84 	.word	0x0800eb84
 80065a0:	20000004 	.word	0x20000004
 80065a4:	20000008 	.word	0x20000008

080065a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065ae:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d102      	bne.n	80065c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065ba:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	e047      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065c0:	4b27      	ldr	r3, [pc, #156]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 030c 	and.w	r3, r3, #12
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d102      	bne.n	80065d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e03e      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065d2:	4b23      	ldr	r3, [pc, #140]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b0c      	cmp	r3, #12
 80065dc:	d136      	bne.n	800664c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	3301      	adds	r3, #1
 80065f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d10c      	bne.n	8006616 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	fbb2 f3f3 	udiv	r3, r2, r3
 8006604:	4a16      	ldr	r2, [pc, #88]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006606:	68d2      	ldr	r2, [r2, #12]
 8006608:	0a12      	lsrs	r2, r2, #8
 800660a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	617b      	str	r3, [r7, #20]
      break;
 8006614:	e00c      	b.n	8006630 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006620:	68d2      	ldr	r2, [r2, #12]
 8006622:	0a12      	lsrs	r2, r2, #8
 8006624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006628:	fb02 f303 	mul.w	r3, r2, r3
 800662c:	617b      	str	r3, [r7, #20]
      break;
 800662e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	0e5b      	lsrs	r3, r3, #25
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	3301      	adds	r3, #1
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	e001      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006650:	693b      	ldr	r3, [r7, #16]
}
 8006652:	4618      	mov	r0, r3
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000
 8006664:	00f42400 	.word	0x00f42400
 8006668:	016e3600 	.word	0x016e3600

0800666c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <HAL_RCC_GetHCLKFreq+0x14>)
 8006672:	681b      	ldr	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000004 	.word	0x20000004

08006684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006688:	f7ff fff0 	bl	800666c <HAL_RCC_GetHCLKFreq>
 800668c:	4602      	mov	r2, r0
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	4904      	ldr	r1, [pc, #16]	; (80066ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800669a:	5ccb      	ldrb	r3, [r1, r3]
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40021000 	.word	0x40021000
 80066ac:	0800eb94 	.word	0x0800eb94

080066b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80066b4:	f7ff ffda 	bl	800666c <HAL_RCC_GetHCLKFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0adb      	lsrs	r3, r3, #11
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	4904      	ldr	r1, [pc, #16]	; (80066d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40021000 	.word	0x40021000
 80066d8:	0800eb94 	.word	0x0800eb94

080066dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d10c      	bne.n	800671a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006700:	4a17      	ldr	r2, [pc, #92]	; (8006760 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	4a14      	ldr	r2, [pc, #80]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800670a:	68d2      	ldr	r2, [r2, #12]
 800670c:	0a12      	lsrs	r2, r2, #8
 800670e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006712:	fb02 f303 	mul.w	r3, r2, r3
 8006716:	617b      	str	r3, [r7, #20]
    break;
 8006718:	e00c      	b.n	8006734 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671a:	4a12      	ldr	r2, [pc, #72]	; (8006764 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	4a0e      	ldr	r2, [pc, #56]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006724:	68d2      	ldr	r2, [r2, #12]
 8006726:	0a12      	lsrs	r2, r2, #8
 8006728:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	617b      	str	r3, [r7, #20]
    break;
 8006732:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006734:	4b09      	ldr	r3, [pc, #36]	; (800675c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	0e5b      	lsrs	r3, r3, #25
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	3301      	adds	r3, #1
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800674e:	687b      	ldr	r3, [r7, #4]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40021000 	.word	0x40021000
 8006760:	016e3600 	.word	0x016e3600
 8006764:	00f42400 	.word	0x00f42400

08006768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006770:	2300      	movs	r3, #0
 8006772:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006774:	2300      	movs	r3, #0
 8006776:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8098 	beq.w	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006786:	2300      	movs	r3, #0
 8006788:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800678a:	4b43      	ldr	r3, [pc, #268]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a0:	6593      	str	r3, [r2, #88]	; 0x58
 80067a2:	4b3d      	ldr	r3, [pc, #244]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ae:	2301      	movs	r3, #1
 80067b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b3a      	ldr	r3, [pc, #232]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a39      	ldr	r2, [pc, #228]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067be:	f7fd f86b 	bl	8003898 <HAL_GetTick>
 80067c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c4:	e009      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fd f867 	bl	8003898 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d902      	bls.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	74fb      	strb	r3, [r7, #19]
        break;
 80067d8:	e005      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0ef      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d159      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067ec:	4b2a      	ldr	r3, [pc, #168]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01e      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	429a      	cmp	r2, r3
 8006806:	d019      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006808:	4b23      	ldr	r3, [pc, #140]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006812:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006814:	4b20      	ldr	r3, [pc, #128]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	4a1f      	ldr	r2, [pc, #124]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006824:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800682c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006834:	4a18      	ldr	r2, [pc, #96]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d016      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fd f827 	bl	8003898 <HAL_GetTick>
 800684a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684c:	e00b      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684e:	f7fd f823 	bl	8003898 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	f241 3288 	movw	r2, #5000	; 0x1388
 800685c:	4293      	cmp	r3, r2
 800685e:	d902      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	74fb      	strb	r3, [r7, #19]
            break;
 8006864:	e006      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ec      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006874:	7cfb      	ldrb	r3, [r7, #19]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	4903      	ldr	r1, [pc, #12]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006890:	e008      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006892:	7cfb      	ldrb	r3, [r7, #19]
 8006894:	74bb      	strb	r3, [r7, #18]
 8006896:	e005      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006898:	40021000 	.word	0x40021000
 800689c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	7cfb      	ldrb	r3, [r7, #19]
 80068a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a4:	7c7b      	ldrb	r3, [r7, #17]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d105      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068aa:	4ba7      	ldr	r3, [pc, #668]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	4aa6      	ldr	r2, [pc, #664]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068c2:	4ba1      	ldr	r3, [pc, #644]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c8:	f023 0203 	bic.w	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	499d      	ldr	r1, [pc, #628]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e4:	4b98      	ldr	r3, [pc, #608]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f023 020c 	bic.w	r2, r3, #12
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	4995      	ldr	r1, [pc, #596]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006906:	4b90      	ldr	r3, [pc, #576]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	498c      	ldr	r1, [pc, #560]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006916:	4313      	orrs	r3, r2
 8006918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006928:	4b87      	ldr	r3, [pc, #540]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	4984      	ldr	r1, [pc, #528]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800694a:	4b7f      	ldr	r3, [pc, #508]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	497b      	ldr	r1, [pc, #492]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800696c:	4b76      	ldr	r3, [pc, #472]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	4973      	ldr	r1, [pc, #460]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698e:	4b6e      	ldr	r3, [pc, #440]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	496a      	ldr	r1, [pc, #424]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b0:	4b65      	ldr	r3, [pc, #404]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4962      	ldr	r1, [pc, #392]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069d2:	4b5d      	ldr	r3, [pc, #372]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	4959      	ldr	r1, [pc, #356]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069f4:	4b54      	ldr	r3, [pc, #336]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069fa:	f023 0203 	bic.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	4951      	ldr	r1, [pc, #324]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a16:	4b4c      	ldr	r3, [pc, #304]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	4948      	ldr	r1, [pc, #288]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a38:	4b43      	ldr	r3, [pc, #268]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4940      	ldr	r1, [pc, #256]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a56:	d105      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a58:	4b3b      	ldr	r3, [pc, #236]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a3a      	ldr	r2, [pc, #232]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d015      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a70:	4b35      	ldr	r3, [pc, #212]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	4932      	ldr	r1, [pc, #200]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a8e:	d105      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a90:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a2c      	ldr	r2, [pc, #176]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d015      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aa8:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	4924      	ldr	r1, [pc, #144]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac6:	d105      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac8:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ad2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d015      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	4916      	ldr	r1, [pc, #88]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006afe:	d105      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d019      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4908      	ldr	r1, [pc, #32]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b36:	d109      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4a02      	ldr	r2, [pc, #8]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b42:	60d3      	str	r3, [r2, #12]
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d015      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	4926      	ldr	r1, [pc, #152]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b76:	d105      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b78:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d015      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b90:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	4918      	ldr	r1, [pc, #96]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d105      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d015      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	490a      	ldr	r1, [pc, #40]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40021000 	.word	0x40021000

08006c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e049      	b.n	8006caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc fc54 	bl	80034d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 fdce 	bl	80077e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d001      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e054      	b.n	8006d76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a26      	ldr	r2, [pc, #152]	; (8006d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d022      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d01d      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d018      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00e      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d009      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x80>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_TIM_Base_Start_IT+0xe8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d115      	bne.n	8006d60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <HAL_TIM_Base_Start_IT+0xec>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d015      	beq.n	8006d72 <HAL_TIM_Base_Start_IT+0xbe>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4c:	d011      	beq.n	8006d72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0201 	orr.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5e:	e008      	b.n	8006d72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e000      	b.n	8006d74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40013400 	.word	0x40013400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40015000 	.word	0x40015000
 8006da0:	00010007 	.word	0x00010007

08006da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e049      	b.n	8006e4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f841 	bl	8006e52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f000 fcfe 	bl	80077e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <HAL_TIM_PWM_Start+0x24>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e03c      	b.n	8006f06 <HAL_TIM_PWM_Start+0x9e>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d109      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x3e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	bf14      	ite	ne
 8006e9e:	2301      	movne	r3, #1
 8006ea0:	2300      	moveq	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	e02f      	b.n	8006f06 <HAL_TIM_PWM_Start+0x9e>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d109      	bne.n	8006ec0 <HAL_TIM_PWM_Start+0x58>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	e022      	b.n	8006f06 <HAL_TIM_PWM_Start+0x9e>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b0c      	cmp	r3, #12
 8006ec4:	d109      	bne.n	8006eda <HAL_TIM_PWM_Start+0x72>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	bf14      	ite	ne
 8006ed2:	2301      	movne	r3, #1
 8006ed4:	2300      	moveq	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	e015      	b.n	8006f06 <HAL_TIM_PWM_Start+0x9e>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d109      	bne.n	8006ef4 <HAL_TIM_PWM_Start+0x8c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	bf14      	ite	ne
 8006eec:	2301      	movne	r3, #1
 8006eee:	2300      	moveq	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e008      	b.n	8006f06 <HAL_TIM_PWM_Start+0x9e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e0a6      	b.n	800705c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Start+0xb6>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f1c:	e023      	b.n	8006f66 <HAL_TIM_PWM_Start+0xfe>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Start+0xc6>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f2c:	e01b      	b.n	8006f66 <HAL_TIM_PWM_Start+0xfe>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_PWM_Start+0xd6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3c:	e013      	b.n	8006f66 <HAL_TIM_PWM_Start+0xfe>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_PWM_Start+0xe6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f4c:	e00b      	b.n	8006f66 <HAL_TIM_PWM_Start+0xfe>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d104      	bne.n	8006f5e <HAL_TIM_PWM_Start+0xf6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f5c:	e003      	b.n	8006f66 <HAL_TIM_PWM_Start+0xfe>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f8b2 	bl	80080d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3a      	ldr	r2, [pc, #232]	; (8007064 <HAL_TIM_PWM_Start+0x1fc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d018      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0x148>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a39      	ldr	r2, [pc, #228]	; (8007068 <HAL_TIM_PWM_Start+0x200>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d013      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0x148>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a37      	ldr	r2, [pc, #220]	; (800706c <HAL_TIM_PWM_Start+0x204>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00e      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0x148>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a36      	ldr	r2, [pc, #216]	; (8007070 <HAL_TIM_PWM_Start+0x208>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d009      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0x148>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a34      	ldr	r2, [pc, #208]	; (8007074 <HAL_TIM_PWM_Start+0x20c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_TIM_PWM_Start+0x148>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a33      	ldr	r2, [pc, #204]	; (8007078 <HAL_TIM_PWM_Start+0x210>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d101      	bne.n	8006fb4 <HAL_TIM_PWM_Start+0x14c>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x14e>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a25      	ldr	r2, [pc, #148]	; (8007064 <HAL_TIM_PWM_Start+0x1fc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d01d      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a26      	ldr	r2, [pc, #152]	; (800707c <HAL_TIM_PWM_Start+0x214>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a24      	ldr	r2, [pc, #144]	; (8007080 <HAL_TIM_PWM_Start+0x218>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a23      	ldr	r2, [pc, #140]	; (8007084 <HAL_TIM_PWM_Start+0x21c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a19      	ldr	r2, [pc, #100]	; (8007068 <HAL_TIM_PWM_Start+0x200>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_TIM_PWM_Start+0x204>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIM_PWM_Start+0x1b2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a18      	ldr	r2, [pc, #96]	; (8007078 <HAL_TIM_PWM_Start+0x210>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d115      	bne.n	8007046 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <HAL_TIM_PWM_Start+0x220>)
 8007022:	4013      	ands	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b06      	cmp	r3, #6
 800702a:	d015      	beq.n	8007058 <HAL_TIM_PWM_Start+0x1f0>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d011      	beq.n	8007058 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007044:	e008      	b.n	8007058 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e000      	b.n	800705a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40013400 	.word	0x40013400
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800
 8007078:	40015000 	.word	0x40015000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	00010007 	.word	0x00010007

0800708c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01b      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0202 	mvn.w	r2, #2
 80070c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb66 	bl	80077a8 <HAL_TIM_IC_CaptureCallback>
 80070dc:	e005      	b.n	80070ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fb58 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb69 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d020      	beq.n	800713c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01b      	beq.n	800713c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb40 	bl	80077a8 <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb32 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fb43 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d020      	beq.n	8007188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0208 	mvn.w	r2, #8
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fb1a 	bl	80077a8 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb0c 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb1d 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	d020      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01b      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0210 	mvn.w	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2208      	movs	r2, #8
 80071aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 faf4 	bl	80077a8 <HAL_TIM_IC_CaptureCallback>
 80071c0:	e005      	b.n	80071ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fae6 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 faf7 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0201 	mvn.w	r2, #1
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fac4 	bl	8007780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f81f 	bl	8008264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f817 	bl	8008278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d007      	beq.n	800726e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fab1 	bl	80077d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f06f 0220 	mvn.w	r2, #32
 800728a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 ffdf 	bl	8008250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00c      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80072ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 ffeb 	bl	800828c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00c      	beq.n	80072da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80072d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 ffe3 	bl	80082a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00c      	beq.n	80072fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80072f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ffdb 	bl	80082b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00c      	beq.n	8007322 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 ffd3 	bl	80082c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007346:	2302      	movs	r3, #2
 8007348:	e0ff      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b14      	cmp	r3, #20
 8007356:	f200 80f0 	bhi.w	800753a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	080073b5 	.word	0x080073b5
 8007364:	0800753b 	.word	0x0800753b
 8007368:	0800753b 	.word	0x0800753b
 800736c:	0800753b 	.word	0x0800753b
 8007370:	080073f5 	.word	0x080073f5
 8007374:	0800753b 	.word	0x0800753b
 8007378:	0800753b 	.word	0x0800753b
 800737c:	0800753b 	.word	0x0800753b
 8007380:	08007437 	.word	0x08007437
 8007384:	0800753b 	.word	0x0800753b
 8007388:	0800753b 	.word	0x0800753b
 800738c:	0800753b 	.word	0x0800753b
 8007390:	08007477 	.word	0x08007477
 8007394:	0800753b 	.word	0x0800753b
 8007398:	0800753b 	.word	0x0800753b
 800739c:	0800753b 	.word	0x0800753b
 80073a0:	080074b9 	.word	0x080074b9
 80073a4:	0800753b 	.word	0x0800753b
 80073a8:	0800753b 	.word	0x0800753b
 80073ac:	0800753b 	.word	0x0800753b
 80073b0:	080074f9 	.word	0x080074f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fac6 	bl	800794c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0204 	bic.w	r2, r2, #4
 80073de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6999      	ldr	r1, [r3, #24]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	619a      	str	r2, [r3, #24]
      break;
 80073f2:	e0a5      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fb40 	bl	8007a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6999      	ldr	r1, [r3, #24]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	021a      	lsls	r2, r3, #8
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	619a      	str	r2, [r3, #24]
      break;
 8007434:	e084      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fbb3 	bl	8007ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0208 	orr.w	r2, r2, #8
 8007450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0204 	bic.w	r2, r2, #4
 8007460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69d9      	ldr	r1, [r3, #28]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	61da      	str	r2, [r3, #28]
      break;
 8007474:	e064      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fc25 	bl	8007ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69d9      	ldr	r1, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	021a      	lsls	r2, r3, #8
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	61da      	str	r2, [r3, #28]
      break;
 80074b6:	e043      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fc98 	bl	8007df4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0208 	orr.w	r2, r2, #8
 80074d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0204 	bic.w	r2, r2, #4
 80074e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80074f6:	e023      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fce2 	bl	8007ec8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007512:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007522:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	021a      	lsls	r2, r3, #8
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007538:	e002      	b.n	8007540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007548:	7dfb      	ldrb	r3, [r7, #23]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIM_ConfigClockSource+0x1c>
 800756c:	2302      	movs	r3, #2
 800756e:	e0f6      	b.n	800775e <HAL_TIM_ConfigClockSource+0x20a>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800758e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6f      	ldr	r2, [pc, #444]	; (8007768 <HAL_TIM_ConfigClockSource+0x214>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	f000 80c1 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 80075b0:	4a6d      	ldr	r2, [pc, #436]	; (8007768 <HAL_TIM_ConfigClockSource+0x214>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	f200 80c6 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 80075b8:	4a6c      	ldr	r2, [pc, #432]	; (800776c <HAL_TIM_ConfigClockSource+0x218>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	f000 80b9 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 80075c0:	4a6a      	ldr	r2, [pc, #424]	; (800776c <HAL_TIM_ConfigClockSource+0x218>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	f200 80be 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 80075c8:	4a69      	ldr	r2, [pc, #420]	; (8007770 <HAL_TIM_ConfigClockSource+0x21c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	f000 80b1 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 80075d0:	4a67      	ldr	r2, [pc, #412]	; (8007770 <HAL_TIM_ConfigClockSource+0x21c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f200 80b6 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 80075d8:	4a66      	ldr	r2, [pc, #408]	; (8007774 <HAL_TIM_ConfigClockSource+0x220>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 80a9 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 80075e0:	4a64      	ldr	r2, [pc, #400]	; (8007774 <HAL_TIM_ConfigClockSource+0x220>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f200 80ae 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 80075e8:	4a63      	ldr	r2, [pc, #396]	; (8007778 <HAL_TIM_ConfigClockSource+0x224>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f000 80a1 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 80075f0:	4a61      	ldr	r2, [pc, #388]	; (8007778 <HAL_TIM_ConfigClockSource+0x224>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f200 80a6 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 80075f8:	4a60      	ldr	r2, [pc, #384]	; (800777c <HAL_TIM_ConfigClockSource+0x228>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 8099 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007600:	4a5e      	ldr	r2, [pc, #376]	; (800777c <HAL_TIM_ConfigClockSource+0x228>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 809e 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007608:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800760c:	f000 8091 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007610:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007614:	f200 8096 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761c:	f000 8089 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007624:	f200 808e 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d03e      	beq.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	f200 8087 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763a:	f000 8086 	beq.w	800774a <HAL_TIM_ConfigClockSource+0x1f6>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d87f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007644:	2b70      	cmp	r3, #112	; 0x70
 8007646:	d01a      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x12a>
 8007648:	2b70      	cmp	r3, #112	; 0x70
 800764a:	d87b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 800764c:	2b60      	cmp	r3, #96	; 0x60
 800764e:	d050      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x19e>
 8007650:	2b60      	cmp	r3, #96	; 0x60
 8007652:	d877      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007654:	2b50      	cmp	r3, #80	; 0x50
 8007656:	d03c      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x17e>
 8007658:	2b50      	cmp	r3, #80	; 0x50
 800765a:	d873      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d058      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x1be>
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d86f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d064      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d86b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 800766c:	2b20      	cmp	r3, #32
 800766e:	d060      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007670:	2b20      	cmp	r3, #32
 8007672:	d867      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05c      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 8007678:	2b10      	cmp	r3, #16
 800767a:	d05a      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1de>
 800767c:	e062      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f000 fd03 	bl	8008098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	609a      	str	r2, [r3, #8]
      break;
 80076aa:	e04f      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6899      	ldr	r1, [r3, #8]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f000 fcec 	bl	8008098 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ce:	609a      	str	r2, [r3, #8]
      break;
 80076d0:	e03c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6859      	ldr	r1, [r3, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	461a      	mov	r2, r3
 80076e0:	f000 fc5e 	bl	8007fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2150      	movs	r1, #80	; 0x50
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fcb7 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 80076f0:	e02c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 fc7d 	bl	8007ffe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2160      	movs	r1, #96	; 0x60
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fca7 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007710:	e01c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	461a      	mov	r2, r3
 8007720:	f000 fc3e 	bl	8007fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2140      	movs	r1, #64	; 0x40
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fc97 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007730:	e00c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f000 fc8e 	bl	800805e <TIM_ITRx_SetConfig>
      break;
 8007742:	e003      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e000      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800774a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	00100070 	.word	0x00100070
 800776c:	00100060 	.word	0x00100060
 8007770:	00100050 	.word	0x00100050
 8007774:	00100040 	.word	0x00100040
 8007778:	00100030 	.word	0x00100030
 800777c:	00100020 	.word	0x00100020

08007780 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a4c      	ldr	r2, [pc, #304]	; (8007928 <TIM_Base_SetConfig+0x144>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d017      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007802:	d013      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a49      	ldr	r2, [pc, #292]	; (800792c <TIM_Base_SetConfig+0x148>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00f      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a48      	ldr	r2, [pc, #288]	; (8007930 <TIM_Base_SetConfig+0x14c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00b      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a47      	ldr	r2, [pc, #284]	; (8007934 <TIM_Base_SetConfig+0x150>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d007      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a46      	ldr	r2, [pc, #280]	; (8007938 <TIM_Base_SetConfig+0x154>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_Base_SetConfig+0x48>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a45      	ldr	r2, [pc, #276]	; (800793c <TIM_Base_SetConfig+0x158>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d108      	bne.n	800783e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a39      	ldr	r2, [pc, #228]	; (8007928 <TIM_Base_SetConfig+0x144>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d023      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d01f      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a36      	ldr	r2, [pc, #216]	; (800792c <TIM_Base_SetConfig+0x148>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01b      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a35      	ldr	r2, [pc, #212]	; (8007930 <TIM_Base_SetConfig+0x14c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d017      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a34      	ldr	r2, [pc, #208]	; (8007934 <TIM_Base_SetConfig+0x150>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d013      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a33      	ldr	r2, [pc, #204]	; (8007938 <TIM_Base_SetConfig+0x154>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00f      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a33      	ldr	r2, [pc, #204]	; (8007940 <TIM_Base_SetConfig+0x15c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00b      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a32      	ldr	r2, [pc, #200]	; (8007944 <TIM_Base_SetConfig+0x160>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a31      	ldr	r2, [pc, #196]	; (8007948 <TIM_Base_SetConfig+0x164>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_Base_SetConfig+0xaa>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a2c      	ldr	r2, [pc, #176]	; (800793c <TIM_Base_SetConfig+0x158>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d108      	bne.n	80078a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a18      	ldr	r2, [pc, #96]	; (8007928 <TIM_Base_SetConfig+0x144>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d013      	beq.n	80078f4 <TIM_Base_SetConfig+0x110>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <TIM_Base_SetConfig+0x154>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00f      	beq.n	80078f4 <TIM_Base_SetConfig+0x110>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a1a      	ldr	r2, [pc, #104]	; (8007940 <TIM_Base_SetConfig+0x15c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00b      	beq.n	80078f4 <TIM_Base_SetConfig+0x110>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <TIM_Base_SetConfig+0x160>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d007      	beq.n	80078f4 <TIM_Base_SetConfig+0x110>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a18      	ldr	r2, [pc, #96]	; (8007948 <TIM_Base_SetConfig+0x164>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0x110>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a13      	ldr	r2, [pc, #76]	; (800793c <TIM_Base_SetConfig+0x158>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d103      	bne.n	80078fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	d105      	bne.n	800791a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f023 0201 	bic.w	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]
  }
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40012c00 	.word	0x40012c00
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	40000c00 	.word	0x40000c00
 8007938:	40013400 	.word	0x40013400
 800793c:	40015000 	.word	0x40015000
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	f023 0201 	bic.w	r2, r3, #1
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f023 0302 	bic.w	r3, r3, #2
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a30      	ldr	r2, [pc, #192]	; (8007a68 <TIM_OC1_SetConfig+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <TIM_OC1_SetConfig+0x88>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <TIM_OC1_SetConfig+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_OC1_SetConfig+0x88>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a2e      	ldr	r2, [pc, #184]	; (8007a70 <TIM_OC1_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_OC1_SetConfig+0x88>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a2d      	ldr	r2, [pc, #180]	; (8007a74 <TIM_OC1_SetConfig+0x128>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_OC1_SetConfig+0x88>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a2c      	ldr	r2, [pc, #176]	; (8007a78 <TIM_OC1_SetConfig+0x12c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC1_SetConfig+0x88>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a2b      	ldr	r2, [pc, #172]	; (8007a7c <TIM_OC1_SetConfig+0x130>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10c      	bne.n	80079ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f023 0308 	bic.w	r3, r3, #8
 80079da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 0304 	bic.w	r3, r3, #4
 80079ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <TIM_OC1_SetConfig+0x11c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <TIM_OC1_SetConfig+0xd2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <TIM_OC1_SetConfig+0x120>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_OC1_SetConfig+0xd2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <TIM_OC1_SetConfig+0x124>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_OC1_SetConfig+0xd2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <TIM_OC1_SetConfig+0x128>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_OC1_SetConfig+0xd2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <TIM_OC1_SetConfig+0x12c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_OC1_SetConfig+0xd2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <TIM_OC1_SetConfig+0x130>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d111      	bne.n	8007a42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	621a      	str	r2, [r3, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40013400 	.word	0x40013400
 8007a70:	40014000 	.word	0x40014000
 8007a74:	40014400 	.word	0x40014400
 8007a78:	40014800 	.word	0x40014800
 8007a7c:	40015000 	.word	0x40015000

08007a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f023 0210 	bic.w	r2, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	021b      	lsls	r3, r3, #8
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0320 	bic.w	r3, r3, #32
 8007ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a2c      	ldr	r2, [pc, #176]	; (8007b90 <TIM_OC2_SetConfig+0x110>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_OC2_SetConfig+0x74>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a2b      	ldr	r2, [pc, #172]	; (8007b94 <TIM_OC2_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC2_SetConfig+0x74>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <TIM_OC2_SetConfig+0x118>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10d      	bne.n	8007b10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a1f      	ldr	r2, [pc, #124]	; (8007b90 <TIM_OC2_SetConfig+0x110>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <TIM_OC2_SetConfig+0xc0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1e      	ldr	r2, [pc, #120]	; (8007b94 <TIM_OC2_SetConfig+0x114>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00f      	beq.n	8007b40 <TIM_OC2_SetConfig+0xc0>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <TIM_OC2_SetConfig+0x11c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00b      	beq.n	8007b40 <TIM_OC2_SetConfig+0xc0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <TIM_OC2_SetConfig+0x120>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <TIM_OC2_SetConfig+0xc0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <TIM_OC2_SetConfig+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_OC2_SetConfig+0xc0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <TIM_OC2_SetConfig+0x118>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d113      	bne.n	8007b68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40012c00 	.word	0x40012c00
 8007b94:	40013400 	.word	0x40013400
 8007b98:	40015000 	.word	0x40015000
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40014400 	.word	0x40014400
 8007ba4:	40014800 	.word	0x40014800

08007ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <TIM_OC3_SetConfig+0x10c>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC3_SetConfig+0x72>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <TIM_OC3_SetConfig+0x110>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC3_SetConfig+0x72>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a29      	ldr	r2, [pc, #164]	; (8007cbc <TIM_OC3_SetConfig+0x114>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <TIM_OC3_SetConfig+0x10c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <TIM_OC3_SetConfig+0xbe>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <TIM_OC3_SetConfig+0x110>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_OC3_SetConfig+0xbe>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <TIM_OC3_SetConfig+0x118>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_OC3_SetConfig+0xbe>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <TIM_OC3_SetConfig+0x11c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_OC3_SetConfig+0xbe>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <TIM_OC3_SetConfig+0x120>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC3_SetConfig+0xbe>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a16      	ldr	r2, [pc, #88]	; (8007cbc <TIM_OC3_SetConfig+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d113      	bne.n	8007c8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	621a      	str	r2, [r3, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40012c00 	.word	0x40012c00
 8007cb8:	40013400 	.word	0x40013400
 8007cbc:	40015000 	.word	0x40015000
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800

08007ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a2c      	ldr	r2, [pc, #176]	; (8007ddc <TIM_OC4_SetConfig+0x110>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <TIM_OC4_SetConfig+0x74>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a2b      	ldr	r2, [pc, #172]	; (8007de0 <TIM_OC4_SetConfig+0x114>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d003      	beq.n	8007d40 <TIM_OC4_SetConfig+0x74>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <TIM_OC4_SetConfig+0x118>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <TIM_OC4_SetConfig+0x110>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d013      	beq.n	8007d8c <TIM_OC4_SetConfig+0xc0>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a1e      	ldr	r2, [pc, #120]	; (8007de0 <TIM_OC4_SetConfig+0x114>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00f      	beq.n	8007d8c <TIM_OC4_SetConfig+0xc0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1e      	ldr	r2, [pc, #120]	; (8007de8 <TIM_OC4_SetConfig+0x11c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <TIM_OC4_SetConfig+0xc0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <TIM_OC4_SetConfig+0x120>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d007      	beq.n	8007d8c <TIM_OC4_SetConfig+0xc0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1c      	ldr	r2, [pc, #112]	; (8007df0 <TIM_OC4_SetConfig+0x124>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC4_SetConfig+0xc0>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <TIM_OC4_SetConfig+0x118>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d113      	bne.n	8007db4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	019b      	lsls	r3, r3, #6
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	019b      	lsls	r3, r3, #6
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	621a      	str	r2, [r3, #32]
}
 8007dce:	bf00      	nop
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40013400 	.word	0x40013400
 8007de4:	40015000 	.word	0x40015000
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40014400 	.word	0x40014400
 8007df0:	40014800 	.word	0x40014800

08007df4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <TIM_OC5_SetConfig+0xbc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <TIM_OC5_SetConfig+0x82>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <TIM_OC5_SetConfig+0xc0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00f      	beq.n	8007e76 <TIM_OC5_SetConfig+0x82>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <TIM_OC5_SetConfig+0xc4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <TIM_OC5_SetConfig+0x82>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <TIM_OC5_SetConfig+0xc8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_OC5_SetConfig+0x82>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <TIM_OC5_SetConfig+0xcc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_OC5_SetConfig+0x82>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a14      	ldr	r2, [pc, #80]	; (8007ec4 <TIM_OC5_SetConfig+0xd0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d109      	bne.n	8007e8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40014800 	.word	0x40014800
 8007ec4:	40015000 	.word	0x40015000

08007ec8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	051b      	lsls	r3, r3, #20
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a1a      	ldr	r2, [pc, #104]	; (8007f88 <TIM_OC6_SetConfig+0xc0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <TIM_OC6_SetConfig+0x84>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a19      	ldr	r2, [pc, #100]	; (8007f8c <TIM_OC6_SetConfig+0xc4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00f      	beq.n	8007f4c <TIM_OC6_SetConfig+0x84>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a18      	ldr	r2, [pc, #96]	; (8007f90 <TIM_OC6_SetConfig+0xc8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_OC6_SetConfig+0x84>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a17      	ldr	r2, [pc, #92]	; (8007f94 <TIM_OC6_SetConfig+0xcc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_OC6_SetConfig+0x84>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <TIM_OC6_SetConfig+0xd0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_OC6_SetConfig+0x84>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <TIM_OC6_SetConfig+0xd4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d109      	bne.n	8007f60 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40013400 	.word	0x40013400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800
 8007f9c:	40015000 	.word	0x40015000

08007fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	f023 0201 	bic.w	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f023 030a 	bic.w	r3, r3, #10
 8007fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	f023 0210 	bic.w	r2, r3, #16
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800803a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	bf00      	nop
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	f043 0307 	orr.w	r3, r3, #7
 8008084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	021a      	lsls	r2, r3, #8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	609a      	str	r2, [r3, #8]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	2201      	movs	r2, #1
 80080ec:	fa02 f303 	lsl.w	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6a1a      	ldr	r2, [r3, #32]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	401a      	ands	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1a      	ldr	r2, [r3, #32]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	fa01 f303 	lsl.w	r3, r1, r3
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008138:	2302      	movs	r3, #2
 800813a:	e074      	b.n	8008226 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a34      	ldr	r2, [pc, #208]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d009      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a33      	ldr	r2, [pc, #204]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d004      	beq.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a31      	ldr	r2, [pc, #196]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d108      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008180:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a21      	ldr	r2, [pc, #132]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d022      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d01d      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d018      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00e      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d009      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a18      	ldr	r2, [pc, #96]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d004      	beq.n	80081fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a11      	ldr	r2, [pc, #68]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10c      	bne.n	8008214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	4313      	orrs	r3, r2
 800820a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40013400 	.word	0x40013400
 800823c:	40015000 	.word	0x40015000
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800
 8008248:	40000c00 	.word	0x40000c00
 800824c:	40014000 	.word	0x40014000

08008250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e042      	b.n	8008374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7fb f9db 	bl	80036bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2224      	movs	r2, #36	; 0x24
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0201 	bic.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 ff42 	bl	80091b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc43 	bl	8008bb8 <UART_SetConfig>
 8008332:	4603      	mov	r3, r0
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e01b      	b.n	8008374 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800834a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800835a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0201 	orr.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ffc1 	bl	80092f4 <UART_CheckIdleState>
 8008372:	4603      	mov	r3, r0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008392:	2b20      	cmp	r3, #32
 8008394:	d17b      	bne.n	800848e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_UART_Transmit+0x26>
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e074      	b.n	8008490 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2221      	movs	r2, #33	; 0x21
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083b6:	f7fb fa6f 	bl	8003898 <HAL_GetTick>
 80083ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d4:	d108      	bne.n	80083e8 <HAL_UART_Transmit+0x6c>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d104      	bne.n	80083e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e003      	b.n	80083f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083f0:	e030      	b.n	8008454 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f001 f823 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e03d      	b.n	8008490 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008428:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	3302      	adds	r3, #2
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	e007      	b.n	8008442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	3301      	adds	r3, #1
 8008440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800845a:	b29b      	uxth	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1c8      	bne.n	80083f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2200      	movs	r2, #0
 8008468:	2140      	movs	r1, #64	; 0x40
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 ffec 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d005      	beq.n	8008482 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e006      	b.n	8008490 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2220      	movs	r2, #32
 8008486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	e000      	b.n	8008490 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800848e:	2302      	movs	r3, #2
  }
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d137      	bne.n	8008520 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_UART_Receive_IT+0x24>
 80084b6:	88fb      	ldrh	r3, [r7, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e030      	b.n	8008522 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a18      	ldr	r2, [pc, #96]	; (800852c <HAL_UART_Receive_IT+0x94>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d01f      	beq.n	8008510 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d018      	beq.n	8008510 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	613b      	str	r3, [r7, #16]
   return(result);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	623b      	str	r3, [r7, #32]
 80084fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	69f9      	ldr	r1, [r7, #28]
 8008502:	6a3a      	ldr	r2, [r7, #32]
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	61bb      	str	r3, [r7, #24]
   return(result);
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e6      	bne.n	80084de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	461a      	mov	r2, r3
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f001 f804 	bl	8009524 <UART_Start_Receive_IT>
 800851c:	4603      	mov	r3, r0
 800851e:	e000      	b.n	8008522 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008520:	2302      	movs	r3, #2
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	3728      	adds	r7, #40	; 0x28
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40008000 	.word	0x40008000

08008530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b0ba      	sub	sp, #232	; 0xe8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800855a:	f640 030f 	movw	r3, #2063	; 0x80f
 800855e:	4013      	ands	r3, r2
 8008560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008568:	2b00      	cmp	r3, #0
 800856a:	d11b      	bne.n	80085a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800856c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d015      	beq.n	80085a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d105      	bne.n	8008590 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 82e3 	beq.w	8008b60 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
      }
      return;
 80085a2:	e2dd      	b.n	8008b60 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8123 	beq.w	80087f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085b2:	4b8d      	ldr	r3, [pc, #564]	; (80087e8 <HAL_UART_IRQHandler+0x2b8>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085be:	4b8b      	ldr	r3, [pc, #556]	; (80087ec <HAL_UART_IRQHandler+0x2bc>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8116 	beq.w	80087f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d011      	beq.n	80085f8 <HAL_UART_IRQHandler+0xc8>
 80085d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2201      	movs	r2, #1
 80085e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f043 0201 	orr.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d011      	beq.n	8008628 <HAL_UART_IRQHandler+0xf8>
 8008604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2202      	movs	r2, #2
 8008616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861e:	f043 0204 	orr.w	r2, r3, #4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d011      	beq.n	8008658 <HAL_UART_IRQHandler+0x128>
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2204      	movs	r2, #4
 8008646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	f043 0202 	orr.w	r2, r3, #2
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d017      	beq.n	8008694 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008670:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008674:	4b5c      	ldr	r3, [pc, #368]	; (80087e8 <HAL_UART_IRQHandler+0x2b8>)
 8008676:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2208      	movs	r2, #8
 8008682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868a:	f043 0208 	orr.w	r2, r3, #8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <HAL_UART_IRQHandler+0x196>
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8249 	beq.w	8008b64 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d013      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871a:	2b40      	cmp	r3, #64	; 0x40
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800871e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008722:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008726:	2b00      	cmp	r3, #0
 8008728:	d054      	beq.n	80087d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 f81c 	bl	8009768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d146      	bne.n	80087cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800876a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800876e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1d9      	bne.n	800873e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800879a:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <HAL_UART_IRQHandler+0x2c0>)
 800879c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fc fe95 	bl	80054d4 <HAL_DMA_Abort_IT>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d019      	beq.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80087be:	4610      	mov	r0, r2
 80087c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c2:	e00f      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f9e1 	bl	8008b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ca:	e00b      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f9dd 	bl	8008b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d2:	e007      	b.n	80087e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9d9 	bl	8008b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80087e2:	e1bf      	b.n	8008b64 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e4:	bf00      	nop
    return;
 80087e6:	e1bd      	b.n	8008b64 <HAL_UART_IRQHandler+0x634>
 80087e8:	10000001 	.word	0x10000001
 80087ec:	04000120 	.word	0x04000120
 80087f0:	08009835 	.word	0x08009835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 8153 	bne.w	8008aa4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 814c 	beq.w	8008aa4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8145 	beq.w	8008aa4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2210      	movs	r2, #16
 8008820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	f040 80bb 	bne.w	80089a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 818f 	beq.w	8008b68 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008850:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008854:	429a      	cmp	r2, r3
 8008856:	f080 8187 	bcs.w	8008b68 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 8087 	bne.w	8008986 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800888c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	461a      	mov	r2, r3
 800889e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1da      	bne.n	8008878 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e1      	bne.n	80088c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800890e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e3      	bne.n	80088fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008954:	f023 0310 	bic.w	r3, r3, #16
 8008958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008966:	65bb      	str	r3, [r7, #88]	; 0x58
 8008968:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800896c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e4      	bne.n	8008944 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008980:	4618      	mov	r0, r3
 8008982:	f7fc fd4e 	bl	8005422 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2202      	movs	r2, #2
 800898a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008998:	b29b      	uxth	r3, r3
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	b29b      	uxth	r3, r3
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f8fd 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a6:	e0df      	b.n	8008b68 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80d1 	beq.w	8008b6c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80089ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80cc 	beq.w	8008b6c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089f6:	647b      	str	r3, [r7, #68]	; 0x44
 80089f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e4      	bne.n	80089d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	623b      	str	r3, [r7, #32]
   return(result);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a32:	633a      	str	r2, [r7, #48]	; 0x30
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e1      	bne.n	8008a0a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	e853 3f00 	ldrex	r3, [r3]
 8008a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0310 	bic.w	r3, r3, #16
 8008a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	69b9      	ldr	r1, [r7, #24]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	617b      	str	r3, [r7, #20]
   return(result);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e4      	bne.n	8008a5a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f87f 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aa2:	e063      	b.n	8008b6c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <HAL_UART_IRQHandler+0x59e>
 8008ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fc12 	bl	800a2f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008acc:	e051      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d03a      	beq.n	8008b70 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
    }
    return;
 8008b02:	e035      	b.n	8008b70 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_UART_IRQHandler+0x5f4>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fe9f 	bl	8009860 <UART_EndTransmit_IT>
    return;
 8008b22:	e026      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d009      	beq.n	8008b44 <HAL_UART_IRQHandler+0x614>
 8008b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fbeb 	bl	800a318 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b42:	e016      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d010      	beq.n	8008b72 <HAL_UART_IRQHandler+0x642>
 8008b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da0c      	bge.n	8008b72 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fbd3 	bl	800a304 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b5e:	e008      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
      return;
 8008b60:	bf00      	nop
 8008b62:	e006      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
    return;
 8008b64:	bf00      	nop
 8008b66:	e004      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
      return;
 8008b68:	bf00      	nop
 8008b6a:	e002      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
      return;
 8008b6c:	bf00      	nop
 8008b6e:	e000      	b.n	8008b72 <HAL_UART_IRQHandler+0x642>
    return;
 8008b70:	bf00      	nop
  }
}
 8008b72:	37e8      	adds	r7, #232	; 0xe8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bbc:	b08c      	sub	sp, #48	; 0x30
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4baa      	ldr	r3, [pc, #680]	; (8008e90 <UART_SetConfig+0x2d8>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a9f      	ldr	r2, [pc, #636]	; (8008e94 <UART_SetConfig+0x2dc>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d004      	beq.n	8008c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c20:	4313      	orrs	r3, r2
 8008c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	f023 010f 	bic.w	r1, r3, #15
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a90      	ldr	r2, [pc, #576]	; (8008e98 <UART_SetConfig+0x2e0>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d125      	bne.n	8008ca8 <UART_SetConfig+0xf0>
 8008c5c:	4b8f      	ldr	r3, [pc, #572]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d81a      	bhi.n	8008ca0 <UART_SetConfig+0xe8>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <UART_SetConfig+0xb8>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008c89 	.word	0x08008c89
 8008c7c:	08008c99 	.word	0x08008c99
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c86:	e116      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8e:	e112      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008c90:	2304      	movs	r3, #4
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c96:	e10e      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008c98:	2308      	movs	r3, #8
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9e:	e10a      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008ca0:	2310      	movs	r3, #16
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ca6:	e106      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a7c      	ldr	r2, [pc, #496]	; (8008ea0 <UART_SetConfig+0x2e8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d138      	bne.n	8008d24 <UART_SetConfig+0x16c>
 8008cb2:	4b7a      	ldr	r3, [pc, #488]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb8:	f003 030c 	and.w	r3, r3, #12
 8008cbc:	2b0c      	cmp	r3, #12
 8008cbe:	d82d      	bhi.n	8008d1c <UART_SetConfig+0x164>
 8008cc0:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x110>)
 8008cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc6:	bf00      	nop
 8008cc8:	08008cfd 	.word	0x08008cfd
 8008ccc:	08008d1d 	.word	0x08008d1d
 8008cd0:	08008d1d 	.word	0x08008d1d
 8008cd4:	08008d1d 	.word	0x08008d1d
 8008cd8:	08008d0d 	.word	0x08008d0d
 8008cdc:	08008d1d 	.word	0x08008d1d
 8008ce0:	08008d1d 	.word	0x08008d1d
 8008ce4:	08008d1d 	.word	0x08008d1d
 8008ce8:	08008d05 	.word	0x08008d05
 8008cec:	08008d1d 	.word	0x08008d1d
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	08008d1d 	.word	0x08008d1d
 8008cf8:	08008d15 	.word	0x08008d15
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d02:	e0d8      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0a:	e0d4      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d12:	e0d0      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1a:	e0cc      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d22:	e0c8      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a5e      	ldr	r2, [pc, #376]	; (8008ea4 <UART_SetConfig+0x2ec>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d125      	bne.n	8008d7a <UART_SetConfig+0x1c2>
 8008d2e:	4b5b      	ldr	r3, [pc, #364]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d38:	2b30      	cmp	r3, #48	; 0x30
 8008d3a:	d016      	beq.n	8008d6a <UART_SetConfig+0x1b2>
 8008d3c:	2b30      	cmp	r3, #48	; 0x30
 8008d3e:	d818      	bhi.n	8008d72 <UART_SetConfig+0x1ba>
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d00a      	beq.n	8008d5a <UART_SetConfig+0x1a2>
 8008d44:	2b20      	cmp	r3, #32
 8008d46:	d814      	bhi.n	8008d72 <UART_SetConfig+0x1ba>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <UART_SetConfig+0x19a>
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d008      	beq.n	8008d62 <UART_SetConfig+0x1aa>
 8008d50:	e00f      	b.n	8008d72 <UART_SetConfig+0x1ba>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d58:	e0ad      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d60:	e0a9      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d62:	2304      	movs	r3, #4
 8008d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d68:	e0a5      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d6a:	2308      	movs	r3, #8
 8008d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d70:	e0a1      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d72:	2310      	movs	r3, #16
 8008d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d78:	e09d      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a4a      	ldr	r2, [pc, #296]	; (8008ea8 <UART_SetConfig+0x2f0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d125      	bne.n	8008dd0 <UART_SetConfig+0x218>
 8008d84:	4b45      	ldr	r3, [pc, #276]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008d90:	d016      	beq.n	8008dc0 <UART_SetConfig+0x208>
 8008d92:	2bc0      	cmp	r3, #192	; 0xc0
 8008d94:	d818      	bhi.n	8008dc8 <UART_SetConfig+0x210>
 8008d96:	2b80      	cmp	r3, #128	; 0x80
 8008d98:	d00a      	beq.n	8008db0 <UART_SetConfig+0x1f8>
 8008d9a:	2b80      	cmp	r3, #128	; 0x80
 8008d9c:	d814      	bhi.n	8008dc8 <UART_SetConfig+0x210>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <UART_SetConfig+0x1f0>
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d008      	beq.n	8008db8 <UART_SetConfig+0x200>
 8008da6:	e00f      	b.n	8008dc8 <UART_SetConfig+0x210>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dae:	e082      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008db0:	2302      	movs	r3, #2
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db6:	e07e      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008db8:	2304      	movs	r3, #4
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dbe:	e07a      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc6:	e076      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dce:	e072      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a35      	ldr	r2, [pc, #212]	; (8008eac <UART_SetConfig+0x2f4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d12a      	bne.n	8008e30 <UART_SetConfig+0x278>
 8008dda:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de8:	d01a      	beq.n	8008e20 <UART_SetConfig+0x268>
 8008dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dee:	d81b      	bhi.n	8008e28 <UART_SetConfig+0x270>
 8008df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df4:	d00c      	beq.n	8008e10 <UART_SetConfig+0x258>
 8008df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dfa:	d815      	bhi.n	8008e28 <UART_SetConfig+0x270>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <UART_SetConfig+0x250>
 8008e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e04:	d008      	beq.n	8008e18 <UART_SetConfig+0x260>
 8008e06:	e00f      	b.n	8008e28 <UART_SetConfig+0x270>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e0e:	e052      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e10:	2302      	movs	r3, #2
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e16:	e04e      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e18:	2304      	movs	r3, #4
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e1e:	e04a      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e20:	2308      	movs	r3, #8
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e26:	e046      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e2e:	e042      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <UART_SetConfig+0x2dc>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d13a      	bne.n	8008eb0 <UART_SetConfig+0x2f8>
 8008e3a:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <UART_SetConfig+0x2e4>)
 8008e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e48:	d01a      	beq.n	8008e80 <UART_SetConfig+0x2c8>
 8008e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e4e:	d81b      	bhi.n	8008e88 <UART_SetConfig+0x2d0>
 8008e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e54:	d00c      	beq.n	8008e70 <UART_SetConfig+0x2b8>
 8008e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5a:	d815      	bhi.n	8008e88 <UART_SetConfig+0x2d0>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <UART_SetConfig+0x2b0>
 8008e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e64:	d008      	beq.n	8008e78 <UART_SetConfig+0x2c0>
 8008e66:	e00f      	b.n	8008e88 <UART_SetConfig+0x2d0>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e022      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e70:	2302      	movs	r3, #2
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e76:	e01e      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e7e:	e01a      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e80:	2308      	movs	r3, #8
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e86:	e016      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e8e:	e012      	b.n	8008eb6 <UART_SetConfig+0x2fe>
 8008e90:	cfff69f3 	.word	0xcfff69f3
 8008e94:	40008000 	.word	0x40008000
 8008e98:	40013800 	.word	0x40013800
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	40004400 	.word	0x40004400
 8008ea4:	40004800 	.word	0x40004800
 8008ea8:	40004c00 	.word	0x40004c00
 8008eac:	40005000 	.word	0x40005000
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4aae      	ldr	r2, [pc, #696]	; (8009174 <UART_SetConfig+0x5bc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	f040 8097 	bne.w	8008ff0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d823      	bhi.n	8008f12 <UART_SetConfig+0x35a>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <UART_SetConfig+0x318>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008ef5 	.word	0x08008ef5
 8008ed4:	08008f13 	.word	0x08008f13
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f13 	.word	0x08008f13
 8008ee0:	08008f03 	.word	0x08008f03
 8008ee4:	08008f13 	.word	0x08008f13
 8008ee8:	08008f13 	.word	0x08008f13
 8008eec:	08008f13 	.word	0x08008f13
 8008ef0:	08008f0b 	.word	0x08008f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef4:	f7fd fbc6 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8008ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008efa:	e010      	b.n	8008f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008efc:	4b9e      	ldr	r3, [pc, #632]	; (8009178 <UART_SetConfig+0x5c0>)
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f00:	e00d      	b.n	8008f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f02:	f7fd fb51 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8008f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f08:	e009      	b.n	8008f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f10:	e005      	b.n	8008f1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 8130 	beq.w	8009186 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	4a94      	ldr	r2, [pc, #592]	; (800917c <UART_SetConfig+0x5c4>)
 8008f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f30:	461a      	mov	r2, r3
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4413      	add	r3, r2
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d305      	bcc.n	8008f56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f5c:	e113      	b.n	8009186 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	2200      	movs	r2, #0
 8008f62:	60bb      	str	r3, [r7, #8]
 8008f64:	60fa      	str	r2, [r7, #12]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	4a84      	ldr	r2, [pc, #528]	; (800917c <UART_SetConfig+0x5c4>)
 8008f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2200      	movs	r2, #0
 8008f74:	603b      	str	r3, [r7, #0]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f80:	f7f7 feba 	bl	8000cf8 <__aeabi_uldivmod>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	f04f 0300 	mov.w	r3, #0
 8008f94:	020b      	lsls	r3, r1, #8
 8008f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f9a:	0202      	lsls	r2, r0, #8
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	6849      	ldr	r1, [r1, #4]
 8008fa0:	0849      	lsrs	r1, r1, #1
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	eb12 0804 	adds.w	r8, r2, r4
 8008fac:	eb43 0905 	adc.w	r9, r3, r5
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	469a      	mov	sl, r3
 8008fb8:	4693      	mov	fp, r2
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	f7f7 fe99 	bl	8000cf8 <__aeabi_uldivmod>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4613      	mov	r3, r2
 8008fcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fd4:	d308      	bcc.n	8008fe8 <UART_SetConfig+0x430>
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fdc:	d204      	bcs.n	8008fe8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6a3a      	ldr	r2, [r7, #32]
 8008fe4:	60da      	str	r2, [r3, #12]
 8008fe6:	e0ce      	b.n	8009186 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fee:	e0ca      	b.n	8009186 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff8:	d166      	bne.n	80090c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d827      	bhi.n	8009052 <UART_SetConfig+0x49a>
 8009002:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <UART_SetConfig+0x450>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	0800902d 	.word	0x0800902d
 800900c:	08009035 	.word	0x08009035
 8009010:	0800903d 	.word	0x0800903d
 8009014:	08009053 	.word	0x08009053
 8009018:	08009043 	.word	0x08009043
 800901c:	08009053 	.word	0x08009053
 8009020:	08009053 	.word	0x08009053
 8009024:	08009053 	.word	0x08009053
 8009028:	0800904b 	.word	0x0800904b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800902c:	f7fd fb2a 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8009030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009032:	e014      	b.n	800905e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009034:	f7fd fb3c 	bl	80066b0 <HAL_RCC_GetPCLK2Freq>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800903a:	e010      	b.n	800905e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800903c:	4b4e      	ldr	r3, [pc, #312]	; (8009178 <UART_SetConfig+0x5c0>)
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009040:	e00d      	b.n	800905e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009042:	f7fd fab1 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8009046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009048:	e009      	b.n	800905e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009050:	e005      	b.n	800905e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800905c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8090 	beq.w	8009186 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	4a44      	ldr	r2, [pc, #272]	; (800917c <UART_SetConfig+0x5c4>)
 800906c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009070:	461a      	mov	r2, r3
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	fbb3 f3f2 	udiv	r3, r3, r2
 8009078:	005a      	lsls	r2, r3, #1
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	441a      	add	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d916      	bls.n	80090c0 <UART_SetConfig+0x508>
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009098:	d212      	bcs.n	80090c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	b29b      	uxth	r3, r3
 800909e:	f023 030f 	bic.w	r3, r3, #15
 80090a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	8bfb      	ldrh	r3, [r7, #30]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	8bfa      	ldrh	r2, [r7, #30]
 80090bc:	60da      	str	r2, [r3, #12]
 80090be:	e062      	b.n	8009186 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80090c6:	e05e      	b.n	8009186 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d828      	bhi.n	8009122 <UART_SetConfig+0x56a>
 80090d0:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0x520>)
 80090d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d6:	bf00      	nop
 80090d8:	080090fd 	.word	0x080090fd
 80090dc:	08009105 	.word	0x08009105
 80090e0:	0800910d 	.word	0x0800910d
 80090e4:	08009123 	.word	0x08009123
 80090e8:	08009113 	.word	0x08009113
 80090ec:	08009123 	.word	0x08009123
 80090f0:	08009123 	.word	0x08009123
 80090f4:	08009123 	.word	0x08009123
 80090f8:	0800911b 	.word	0x0800911b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090fc:	f7fd fac2 	bl	8006684 <HAL_RCC_GetPCLK1Freq>
 8009100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009102:	e014      	b.n	800912e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009104:	f7fd fad4 	bl	80066b0 <HAL_RCC_GetPCLK2Freq>
 8009108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800910a:	e010      	b.n	800912e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800910c:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <UART_SetConfig+0x5c0>)
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009110:	e00d      	b.n	800912e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009112:	f7fd fa49 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8009116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009118:	e009      	b.n	800912e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009120:	e005      	b.n	800912e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800912c:	bf00      	nop
    }

    if (pclk != 0U)
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d028      	beq.n	8009186 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	4a10      	ldr	r2, [pc, #64]	; (800917c <UART_SetConfig+0x5c4>)
 800913a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800913e:	461a      	mov	r2, r3
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	fbb3 f2f2 	udiv	r2, r3, r2
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	441a      	add	r2, r3
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	fbb2 f3f3 	udiv	r3, r2, r3
 8009156:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	2b0f      	cmp	r3, #15
 800915c:	d910      	bls.n	8009180 <UART_SetConfig+0x5c8>
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009164:	d20c      	bcs.n	8009180 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	b29a      	uxth	r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60da      	str	r2, [r3, #12]
 8009170:	e009      	b.n	8009186 <UART_SetConfig+0x5ce>
 8009172:	bf00      	nop
 8009174:	40008000 	.word	0x40008000
 8009178:	00f42400 	.word	0x00f42400
 800917c:	0800eb9c 	.word	0x0800eb9c
      }
      else
      {
        ret = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2201      	movs	r2, #1
 800918a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2201      	movs	r2, #1
 8009192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2200      	movs	r2, #0
 800919a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2200      	movs	r2, #0
 80091a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80091a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3730      	adds	r7, #48	; 0x30
 80091aa:	46bd      	mov	sp, r7
 80091ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080091b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091bc:	f003 0308 	and.w	r3, r3, #8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f003 0310 	and.w	r3, r3, #16
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ae:	d10a      	bne.n	80092c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b098      	sub	sp, #96	; 0x60
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009304:	f7fa fac8 	bl	8003898 <HAL_GetTick>
 8009308:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b08      	cmp	r3, #8
 8009316:	d12f      	bne.n	8009378 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f88e 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d022      	beq.n	8009378 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009346:	653b      	str	r3, [r7, #80]	; 0x50
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009350:	647b      	str	r3, [r7, #68]	; 0x44
 8009352:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800935e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e6      	bne.n	8009332 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e063      	b.n	8009440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d149      	bne.n	800941a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938e:	2200      	movs	r2, #0
 8009390:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f857 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d03c      	beq.n	800941a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	623b      	str	r3, [r7, #32]
   return(result);
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
 80093c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e6      	bne.n	80093a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093f2:	61fa      	str	r2, [r7, #28]
 80093f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	69b9      	ldr	r1, [r7, #24]
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e5      	bne.n	80093d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e012      	b.n	8009440 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3758      	adds	r7, #88	; 0x58
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009458:	e04f      	b.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d04b      	beq.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009462:	f7fa fa19 	bl	8003898 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	429a      	cmp	r2, r3
 8009470:	d302      	bcc.n	8009478 <UART_WaitOnFlagUntilTimeout+0x30>
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e04e      	b.n	800951a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	d037      	beq.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d034      	beq.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b40      	cmp	r3, #64	; 0x40
 8009494:	d031      	beq.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	f003 0308 	and.w	r3, r3, #8
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d110      	bne.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2208      	movs	r2, #8
 80094aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f95b 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2208      	movs	r2, #8
 80094b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e029      	b.n	800951a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094d4:	d111      	bne.n	80094fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f941 	bl	8009768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e00f      	b.n	800951a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4013      	ands	r3, r2
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	bf0c      	ite	eq
 800950a:	2301      	moveq	r3, #1
 800950c:	2300      	movne	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	429a      	cmp	r2, r3
 8009516:	d0a0      	beq.n	800945a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009524:	b480      	push	{r7}
 8009526:	b0a3      	sub	sp, #140	; 0x8c
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	88fa      	ldrh	r2, [r7, #6]
 8009544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009556:	d10e      	bne.n	8009576 <UART_Start_Receive_IT+0x52>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d105      	bne.n	800956c <UART_Start_Receive_IT+0x48>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800956a:	e02d      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	22ff      	movs	r2, #255	; 0xff
 8009570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009574:	e028      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10d      	bne.n	800959a <UART_Start_Receive_IT+0x76>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <UART_Start_Receive_IT+0x6c>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	22ff      	movs	r2, #255	; 0xff
 800958a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800958e:	e01b      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	227f      	movs	r2, #127	; 0x7f
 8009594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009598:	e016      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095a2:	d10d      	bne.n	80095c0 <UART_Start_Receive_IT+0x9c>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <UART_Start_Receive_IT+0x92>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	227f      	movs	r2, #127	; 0x7f
 80095b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095b4:	e008      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	223f      	movs	r2, #63	; 0x3f
 80095ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095be:	e003      	b.n	80095c8 <UART_Start_Receive_IT+0xa4>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2222      	movs	r2, #34	; 0x22
 80095d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80095e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80095fc:	673a      	str	r2, [r7, #112]	; 0x70
 80095fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009602:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800960a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e3      	bne.n	80095d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009618:	d14f      	bne.n	80096ba <UART_Start_Receive_IT+0x196>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009620:	88fa      	ldrh	r2, [r7, #6]
 8009622:	429a      	cmp	r2, r3
 8009624:	d349      	bcc.n	80096ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962e:	d107      	bne.n	8009640 <UART_Start_Receive_IT+0x11c>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a47      	ldr	r2, [pc, #284]	; (8009758 <UART_Start_Receive_IT+0x234>)
 800963c:	675a      	str	r2, [r3, #116]	; 0x74
 800963e:	e002      	b.n	8009646 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a46      	ldr	r2, [pc, #280]	; (800975c <UART_Start_Receive_IT+0x238>)
 8009644:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d01a      	beq.n	8009684 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009672:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009674:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009678:	e841 2300 	strex	r3, r2, [r1]
 800967c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800967e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3308      	adds	r3, #8
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80096a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ac:	e841 2300 	strex	r3, r2, [r1]
 80096b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1e5      	bne.n	8009684 <UART_Start_Receive_IT+0x160>
 80096b8:	e046      	b.n	8009748 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c2:	d107      	bne.n	80096d4 <UART_Start_Receive_IT+0x1b0>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a24      	ldr	r2, [pc, #144]	; (8009760 <UART_Start_Receive_IT+0x23c>)
 80096d0:	675a      	str	r2, [r3, #116]	; 0x74
 80096d2:	e002      	b.n	80096da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a23      	ldr	r2, [pc, #140]	; (8009764 <UART_Start_Receive_IT+0x240>)
 80096d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d019      	beq.n	8009716 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80096f6:	677b      	str	r3, [r7, #116]	; 0x74
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009700:	637b      	str	r3, [r7, #52]	; 0x34
 8009702:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_Start_Receive_IT+0x1be>
 8009714:	e018      	b.n	8009748 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	613b      	str	r3, [r7, #16]
   return(result);
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f043 0320 	orr.w	r3, r3, #32
 800972a:	67bb      	str	r3, [r7, #120]	; 0x78
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	461a      	mov	r2, r3
 8009732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009734:	623b      	str	r3, [r7, #32]
 8009736:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	69f9      	ldr	r1, [r7, #28]
 800973a:	6a3a      	ldr	r2, [r7, #32]
 800973c:	e841 2300 	strex	r3, r2, [r1]
 8009740:	61bb      	str	r3, [r7, #24]
   return(result);
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e6      	bne.n	8009716 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	378c      	adds	r7, #140	; 0x8c
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	08009f89 	.word	0x08009f89
 800975c:	08009c29 	.word	0x08009c29
 8009760:	08009a71 	.word	0x08009a71
 8009764:	080098b9 	.word	0x080098b9

08009768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009768:	b480      	push	{r7}
 800976a:	b095      	sub	sp, #84	; 0x54
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800978e:	643b      	str	r3, [r7, #64]	; 0x40
 8009790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097b8:	f023 0301 	bic.w	r3, r3, #1
 80097bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3308      	adds	r3, #8
 80097c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e3      	bne.n	80097a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d118      	bne.n	8009814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f023 0310 	bic.w	r3, r3, #16
 80097f6:	647b      	str	r3, [r7, #68]	; 0x44
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6979      	ldr	r1, [r7, #20]
 8009806:	69ba      	ldr	r2, [r7, #24]
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	613b      	str	r3, [r7, #16]
   return(result);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009828:	bf00      	nop
 800982a:	3754      	adds	r7, #84	; 0x54
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff f99a 	bl	8008b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009858:	bf00      	nop
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	60bb      	str	r3, [r7, #8]
   return(result);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987c:	61fb      	str	r3, [r7, #28]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6979      	ldr	r1, [r7, #20]
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	613b      	str	r3, [r7, #16]
   return(result);
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e6      	bne.n	8009868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff f965 	bl	8008b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ae:	bf00      	nop
 80098b0:	3720      	adds	r7, #32
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b09c      	sub	sp, #112	; 0x70
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d0:	2b22      	cmp	r3, #34	; 0x22
 80098d2:	f040 80be 	bne.w	8009a52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098e4:	b2d9      	uxtb	r1, r3
 80098e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f0:	400a      	ands	r2, r1
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009918:	b29b      	uxth	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 80a1 	bne.w	8009a62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800992e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009934:	66bb      	str	r3, [r7, #104]	; 0x68
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800993e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009940:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800994c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e6      	bne.n	8009920 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	667b      	str	r3, [r7, #100]	; 0x64
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009972:	647a      	str	r2, [r7, #68]	; 0x44
 8009974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a33      	ldr	r2, [pc, #204]	; (8009a6c <UART_RxISR_8BIT+0x1b4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01f      	beq.n	80099e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d018      	beq.n	80099e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	623b      	str	r3, [r7, #32]
   return(result);
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099c6:	663b      	str	r3, [r7, #96]	; 0x60
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099d0:	633b      	str	r3, [r7, #48]	; 0x30
 80099d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e6      	bne.n	80099b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d12e      	bne.n	8009a4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0310 	bic.w	r3, r3, #16
 8009a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	69b9      	ldr	r1, [r7, #24]
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e6      	bne.n	80099f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d103      	bne.n	8009a3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2210      	movs	r2, #16
 8009a38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff f8ac 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a48:	e00b      	b.n	8009a62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f8 fcb6 	bl	80023bc <HAL_UART_RxCpltCallback>
}
 8009a50:	e007      	b.n	8009a62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0208 	orr.w	r2, r2, #8
 8009a60:	619a      	str	r2, [r3, #24]
}
 8009a62:	bf00      	nop
 8009a64:	3770      	adds	r7, #112	; 0x70
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	40008000 	.word	0x40008000

08009a70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b09c      	sub	sp, #112	; 0x70
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a88:	2b22      	cmp	r3, #34	; 0x22
 8009a8a:	f040 80be 	bne.w	8009c0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009aa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab2:	1c9a      	adds	r2, r3, #2
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f040 80a1 	bne.w	8009c1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae0:	e853 3f00 	ldrex	r3, [r3]
 8009ae4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009aec:	667b      	str	r3, [r7, #100]	; 0x64
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009af6:	657b      	str	r3, [r7, #84]	; 0x54
 8009af8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1e6      	bne.n	8009ad8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	f023 0301 	bic.w	r3, r3, #1
 8009b20:	663b      	str	r3, [r7, #96]	; 0x60
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3308      	adds	r3, #8
 8009b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b2a:	643a      	str	r2, [r7, #64]	; 0x40
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e5      	bne.n	8009b0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a33      	ldr	r2, [pc, #204]	; (8009c24 <UART_RxISR_16BIT+0x1b4>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d01f      	beq.n	8009b9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d018      	beq.n	8009b9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e6      	bne.n	8009b6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d12e      	bne.n	8009c02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	e853 3f00 	ldrex	r3, [r3]
 8009bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f023 0310 	bic.w	r3, r3, #16
 8009bbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6979      	ldr	r1, [r7, #20]
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e6      	bne.n	8009baa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f003 0310 	and.w	r3, r3, #16
 8009be6:	2b10      	cmp	r3, #16
 8009be8:	d103      	bne.n	8009bf2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2210      	movs	r2, #16
 8009bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7fe ffd0 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c00:	e00b      	b.n	8009c1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7f8 fbda 	bl	80023bc <HAL_UART_RxCpltCallback>
}
 8009c08:	e007      	b.n	8009c1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699a      	ldr	r2, [r3, #24]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f042 0208 	orr.w	r2, r2, #8
 8009c18:	619a      	str	r2, [r3, #24]
}
 8009c1a:	bf00      	nop
 8009c1c:	3770      	adds	r7, #112	; 0x70
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	40008000 	.word	0x40008000

08009c28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b0ac      	sub	sp, #176	; 0xb0
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c5e:	2b22      	cmp	r3, #34	; 0x22
 8009c60:	f040 8182 	bne.w	8009f68 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c6a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c6e:	e125      	b.n	8009ebc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009c7e:	b2d9      	uxtb	r1, r3
 8009c80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	400a      	ands	r2, r1
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cba:	f003 0307 	and.w	r3, r3, #7
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d053      	beq.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d011      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce8:	f043 0201 	orr.w	r2, r3, #1
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d18:	f043 0204 	orr.w	r2, r3, #4
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d011      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2204      	movs	r2, #4
 8009d40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	f043 0202 	orr.w	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7fe ff15 	bl	8008b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 80a2 	bne.w	8009ebc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d9c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009da0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e4      	bne.n	8009d78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3308      	adds	r3, #8
 8009db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	f023 0301 	bic.w	r3, r3, #1
 8009dc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8009dd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009ddc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dde:	e841 2300 	strex	r3, r2, [r1]
 8009de2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1e1      	bne.n	8009dae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2220      	movs	r2, #32
 8009dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a5f      	ldr	r2, [pc, #380]	; (8009f80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d021      	beq.n	8009e4c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01a      	beq.n	8009e4c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e38:	657b      	str	r3, [r7, #84]	; 0x54
 8009e3a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e4      	bne.n	8009e16 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d130      	bne.n	8009eb6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	f023 0310 	bic.w	r3, r3, #16
 8009e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009e7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e4      	bne.n	8009e5a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	f003 0310 	and.w	r3, r3, #16
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d103      	bne.n	8009ea6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2210      	movs	r2, #16
 8009ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7fe fe76 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
 8009eb4:	e002      	b.n	8009ebc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7f8 fa80 	bl	80023bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ebc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d006      	beq.n	8009ed2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ec8:	f003 0320 	and.w	r3, r3, #32
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f47f aecf 	bne.w	8009c70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009edc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d049      	beq.n	8009f78 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d242      	bcs.n	8009f78 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3308      	adds	r3, #8
 8009f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e3      	bne.n	8009ef2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a15      	ldr	r2, [pc, #84]	; (8009f84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009f2e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f043 0320 	orr.w	r3, r3, #32
 8009f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	6979      	ldr	r1, [r7, #20]
 8009f58:	69ba      	ldr	r2, [r7, #24]
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e4      	bne.n	8009f30 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f66:	e007      	b.n	8009f78 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0208 	orr.w	r2, r2, #8
 8009f76:	619a      	str	r2, [r3, #24]
}
 8009f78:	bf00      	nop
 8009f7a:	37b0      	adds	r7, #176	; 0xb0
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40008000 	.word	0x40008000
 8009f84:	080098b9 	.word	0x080098b9

08009f88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b0ae      	sub	sp, #184	; 0xb8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69db      	ldr	r3, [r3, #28]
 8009fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fbe:	2b22      	cmp	r3, #34	; 0x22
 8009fc0:	f040 8186 	bne.w	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fce:	e129      	b.n	800a224 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009fe2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009fe6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009fea:	4013      	ands	r3, r2
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ff2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff8:	1c9a      	adds	r2, r3, #2
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a004:	b29b      	uxth	r3, r3
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a01a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b00      	cmp	r3, #0
 800a024:	d053      	beq.n	800a0ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d011      	beq.n	800a056 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2201      	movs	r2, #1
 800a044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a04c:	f043 0201 	orr.w	r2, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d011      	beq.n	800a086 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2202      	movs	r2, #2
 800a074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a07c:	f043 0204 	orr.w	r2, r3, #4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d011      	beq.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2204      	movs	r2, #4
 800a0a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ac:	f043 0202 	orr.w	r2, r3, #2
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d006      	beq.n	800a0ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fe fd63 	bl	8008b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f040 80a4 	bne.w	800a224 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a102:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a106:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e2      	bne.n	800a0dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a12c:	f023 0301 	bic.w	r3, r3, #1
 800a130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a13e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e1      	bne.n	800a116 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a5f      	ldr	r2, [pc, #380]	; (800a2e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d021      	beq.n	800a1b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01a      	beq.n	800a1b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a18e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e4      	bne.n	800a17e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d130      	bne.n	800a21e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d2:	f023 0310 	bic.w	r3, r3, #16
 800a1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e4      	bne.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f003 0310 	and.w	r3, r3, #16
 800a202:	2b10      	cmp	r3, #16
 800a204:	d103      	bne.n	800a20e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2210      	movs	r2, #16
 800a20c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fe fcc2 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
 800a21c:	e002      	b.n	800a224 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7f8 f8cc 	bl	80023bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a224:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a22c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a230:	f003 0320 	and.w	r3, r3, #32
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f aecb 	bne.w	8009fd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a240:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a244:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d049      	beq.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a252:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a256:	429a      	cmp	r2, r3
 800a258:	d242      	bcs.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	623b      	str	r3, [r7, #32]
   return(result);
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a27e:	633a      	str	r2, [r7, #48]	; 0x30
 800a280:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e3      	bne.n	800a25a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a15      	ldr	r2, [pc, #84]	; (800a2ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a296:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f043 0320 	orr.w	r3, r3, #32
 800a2ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	69b9      	ldr	r1, [r7, #24]
 800a2c0:	69fa      	ldr	r2, [r7, #28]
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e4      	bne.n	800a298 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2ce:	e007      	b.n	800a2e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0208 	orr.w	r2, r2, #8
 800a2de:	619a      	str	r2, [r3, #24]
}
 800a2e0:	bf00      	nop
 800a2e2:	37b8      	adds	r7, #184	; 0xb8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40008000 	.word	0x40008000
 800a2ec:	08009a71 	.word	0x08009a71

0800a2f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <HAL_UARTEx_DisableFifoMode+0x16>
 800a33e:	2302      	movs	r3, #2
 800a340:	e027      	b.n	800a392 <HAL_UARTEx_DisableFifoMode+0x66>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2224      	movs	r2, #36	; 0x24
 800a34e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 0201 	bic.w	r2, r2, #1
 800a368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e02d      	b.n	800a412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2224      	movs	r2, #36	; 0x24
 800a3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 0201 	bic.w	r2, r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f850 	bl	800a498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2220      	movs	r2, #32
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a42e:	2302      	movs	r3, #2
 800a430:	e02d      	b.n	800a48e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2224      	movs	r2, #36	; 0x24
 800a43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 0201 	bic.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f812 	bl	800a498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2220      	movs	r2, #32
 800a480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d108      	bne.n	800a4ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4b8:	e031      	b.n	800a51e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4be:	2308      	movs	r3, #8
 800a4c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	0e5b      	lsrs	r3, r3, #25
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	0f5b      	lsrs	r3, r3, #29
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	7b3a      	ldrb	r2, [r7, #12]
 800a4e6:	4911      	ldr	r1, [pc, #68]	; (800a52c <UARTEx_SetNbDataToProcess+0x94>)
 800a4e8:	5c8a      	ldrb	r2, [r1, r2]
 800a4ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ee:	7b3a      	ldrb	r2, [r7, #12]
 800a4f0:	490f      	ldr	r1, [pc, #60]	; (800a530 <UARTEx_SetNbDataToProcess+0x98>)
 800a4f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	7b7a      	ldrb	r2, [r7, #13]
 800a504:	4909      	ldr	r1, [pc, #36]	; (800a52c <UARTEx_SetNbDataToProcess+0x94>)
 800a506:	5c8a      	ldrb	r2, [r1, r2]
 800a508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a50c:	7b7a      	ldrb	r2, [r7, #13]
 800a50e:	4908      	ldr	r1, [pc, #32]	; (800a530 <UARTEx_SetNbDataToProcess+0x98>)
 800a510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a512:	fb93 f3f2 	sdiv	r3, r3, r2
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a51e:	bf00      	nop
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	0800ebb4 	.word	0x0800ebb4
 800a530:	0800ebbc 	.word	0x0800ebbc

0800a534 <atof>:
 800a534:	2100      	movs	r1, #0
 800a536:	f001 bae1 	b.w	800bafc <strtod>
	...

0800a53c <__errno>:
 800a53c:	4b01      	ldr	r3, [pc, #4]	; (800a544 <__errno+0x8>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20000010 	.word	0x20000010

0800a548 <__libc_init_array>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4d0d      	ldr	r5, [pc, #52]	; (800a580 <__libc_init_array+0x38>)
 800a54c:	4c0d      	ldr	r4, [pc, #52]	; (800a584 <__libc_init_array+0x3c>)
 800a54e:	1b64      	subs	r4, r4, r5
 800a550:	10a4      	asrs	r4, r4, #2
 800a552:	2600      	movs	r6, #0
 800a554:	42a6      	cmp	r6, r4
 800a556:	d109      	bne.n	800a56c <__libc_init_array+0x24>
 800a558:	4d0b      	ldr	r5, [pc, #44]	; (800a588 <__libc_init_array+0x40>)
 800a55a:	4c0c      	ldr	r4, [pc, #48]	; (800a58c <__libc_init_array+0x44>)
 800a55c:	f004 fa5c 	bl	800ea18 <_init>
 800a560:	1b64      	subs	r4, r4, r5
 800a562:	10a4      	asrs	r4, r4, #2
 800a564:	2600      	movs	r6, #0
 800a566:	42a6      	cmp	r6, r4
 800a568:	d105      	bne.n	800a576 <__libc_init_array+0x2e>
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a570:	4798      	blx	r3
 800a572:	3601      	adds	r6, #1
 800a574:	e7ee      	b.n	800a554 <__libc_init_array+0xc>
 800a576:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57a:	4798      	blx	r3
 800a57c:	3601      	adds	r6, #1
 800a57e:	e7f2      	b.n	800a566 <__libc_init_array+0x1e>
 800a580:	0800f0c8 	.word	0x0800f0c8
 800a584:	0800f0c8 	.word	0x0800f0c8
 800a588:	0800f0c8 	.word	0x0800f0c8
 800a58c:	0800f0cc 	.word	0x0800f0cc

0800a590 <memset>:
 800a590:	4402      	add	r2, r0
 800a592:	4603      	mov	r3, r0
 800a594:	4293      	cmp	r3, r2
 800a596:	d100      	bne.n	800a59a <memset+0xa>
 800a598:	4770      	bx	lr
 800a59a:	f803 1b01 	strb.w	r1, [r3], #1
 800a59e:	e7f9      	b.n	800a594 <memset+0x4>

0800a5a0 <__cvt>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	ec55 4b10 	vmov	r4, r5, d0
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	460e      	mov	r6, r1
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5b6:	461d      	movlt	r5, r3
 800a5b8:	2300      	movge	r3, #0
 800a5ba:	232d      	movlt	r3, #45	; 0x2d
 800a5bc:	700b      	strb	r3, [r1, #0]
 800a5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5c4:	4691      	mov	r9, r2
 800a5c6:	f023 0820 	bic.w	r8, r3, #32
 800a5ca:	bfbc      	itt	lt
 800a5cc:	4622      	movlt	r2, r4
 800a5ce:	4614      	movlt	r4, r2
 800a5d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5d4:	d005      	beq.n	800a5e2 <__cvt+0x42>
 800a5d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5da:	d100      	bne.n	800a5de <__cvt+0x3e>
 800a5dc:	3601      	adds	r6, #1
 800a5de:	2102      	movs	r1, #2
 800a5e0:	e000      	b.n	800a5e4 <__cvt+0x44>
 800a5e2:	2103      	movs	r1, #3
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	ab02      	add	r3, sp, #8
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	ec45 4b10 	vmov	d0, r4, r5
 800a5f0:	4653      	mov	r3, sl
 800a5f2:	4632      	mov	r2, r6
 800a5f4:	f001 fb94 	bl	800bd20 <_dtoa_r>
 800a5f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	d102      	bne.n	800a606 <__cvt+0x66>
 800a600:	f019 0f01 	tst.w	r9, #1
 800a604:	d022      	beq.n	800a64c <__cvt+0xac>
 800a606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a60a:	eb07 0906 	add.w	r9, r7, r6
 800a60e:	d110      	bne.n	800a632 <__cvt+0x92>
 800a610:	783b      	ldrb	r3, [r7, #0]
 800a612:	2b30      	cmp	r3, #48	; 0x30
 800a614:	d10a      	bne.n	800a62c <__cvt+0x8c>
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f6 fa8b 	bl	8000b38 <__aeabi_dcmpeq>
 800a622:	b918      	cbnz	r0, 800a62c <__cvt+0x8c>
 800a624:	f1c6 0601 	rsb	r6, r6, #1
 800a628:	f8ca 6000 	str.w	r6, [sl]
 800a62c:	f8da 3000 	ldr.w	r3, [sl]
 800a630:	4499      	add	r9, r3
 800a632:	2200      	movs	r2, #0
 800a634:	2300      	movs	r3, #0
 800a636:	4620      	mov	r0, r4
 800a638:	4629      	mov	r1, r5
 800a63a:	f7f6 fa7d 	bl	8000b38 <__aeabi_dcmpeq>
 800a63e:	b108      	cbz	r0, 800a644 <__cvt+0xa4>
 800a640:	f8cd 900c 	str.w	r9, [sp, #12]
 800a644:	2230      	movs	r2, #48	; 0x30
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	454b      	cmp	r3, r9
 800a64a:	d307      	bcc.n	800a65c <__cvt+0xbc>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a650:	1bdb      	subs	r3, r3, r7
 800a652:	4638      	mov	r0, r7
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	b004      	add	sp, #16
 800a658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	9103      	str	r1, [sp, #12]
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e7f0      	b.n	800a646 <__cvt+0xa6>

0800a664 <__exponent>:
 800a664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a666:	4603      	mov	r3, r0
 800a668:	2900      	cmp	r1, #0
 800a66a:	bfb8      	it	lt
 800a66c:	4249      	neglt	r1, r1
 800a66e:	f803 2b02 	strb.w	r2, [r3], #2
 800a672:	bfb4      	ite	lt
 800a674:	222d      	movlt	r2, #45	; 0x2d
 800a676:	222b      	movge	r2, #43	; 0x2b
 800a678:	2909      	cmp	r1, #9
 800a67a:	7042      	strb	r2, [r0, #1]
 800a67c:	dd2a      	ble.n	800a6d4 <__exponent+0x70>
 800a67e:	f10d 0407 	add.w	r4, sp, #7
 800a682:	46a4      	mov	ip, r4
 800a684:	270a      	movs	r7, #10
 800a686:	46a6      	mov	lr, r4
 800a688:	460a      	mov	r2, r1
 800a68a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a68e:	fb07 1516 	mls	r5, r7, r6, r1
 800a692:	3530      	adds	r5, #48	; 0x30
 800a694:	2a63      	cmp	r2, #99	; 0x63
 800a696:	f104 34ff 	add.w	r4, r4, #4294967295
 800a69a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	dcf1      	bgt.n	800a686 <__exponent+0x22>
 800a6a2:	3130      	adds	r1, #48	; 0x30
 800a6a4:	f1ae 0502 	sub.w	r5, lr, #2
 800a6a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6ac:	1c44      	adds	r4, r0, #1
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4561      	cmp	r1, ip
 800a6b2:	d30a      	bcc.n	800a6ca <__exponent+0x66>
 800a6b4:	f10d 0209 	add.w	r2, sp, #9
 800a6b8:	eba2 020e 	sub.w	r2, r2, lr
 800a6bc:	4565      	cmp	r5, ip
 800a6be:	bf88      	it	hi
 800a6c0:	2200      	movhi	r2, #0
 800a6c2:	4413      	add	r3, r2
 800a6c4:	1a18      	subs	r0, r3, r0
 800a6c6:	b003      	add	sp, #12
 800a6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6d2:	e7ed      	b.n	800a6b0 <__exponent+0x4c>
 800a6d4:	2330      	movs	r3, #48	; 0x30
 800a6d6:	3130      	adds	r1, #48	; 0x30
 800a6d8:	7083      	strb	r3, [r0, #2]
 800a6da:	70c1      	strb	r1, [r0, #3]
 800a6dc:	1d03      	adds	r3, r0, #4
 800a6de:	e7f1      	b.n	800a6c4 <__exponent+0x60>

0800a6e0 <_printf_float>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	ed2d 8b02 	vpush	{d8}
 800a6e8:	b08d      	sub	sp, #52	; 0x34
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6f0:	4616      	mov	r6, r2
 800a6f2:	461f      	mov	r7, r3
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	f002 fc83 	bl	800d000 <_localeconv_r>
 800a6fa:	f8d0 a000 	ldr.w	sl, [r0]
 800a6fe:	4650      	mov	r0, sl
 800a700:	f7f5 fd98 	bl	8000234 <strlen>
 800a704:	2300      	movs	r3, #0
 800a706:	930a      	str	r3, [sp, #40]	; 0x28
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8d8 3000 	ldr.w	r3, [r8]
 800a710:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a714:	3307      	adds	r3, #7
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	f103 0208 	add.w	r2, r3, #8
 800a71e:	f8c8 2000 	str.w	r2, [r8]
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a72a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f8cd 8018 	str.w	r8, [sp, #24]
 800a738:	ee08 0a10 	vmov	s16, r0
 800a73c:	4b9f      	ldr	r3, [pc, #636]	; (800a9bc <_printf_float+0x2dc>)
 800a73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a742:	f04f 32ff 	mov.w	r2, #4294967295
 800a746:	f7f6 fa29 	bl	8000b9c <__aeabi_dcmpun>
 800a74a:	bb88      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a74c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a750:	4b9a      	ldr	r3, [pc, #616]	; (800a9bc <_printf_float+0x2dc>)
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	f7f6 fa03 	bl	8000b60 <__aeabi_dcmple>
 800a75a:	bb48      	cbnz	r0, 800a7b0 <_printf_float+0xd0>
 800a75c:	2200      	movs	r2, #0
 800a75e:	2300      	movs	r3, #0
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f6 f9f2 	bl	8000b4c <__aeabi_dcmplt>
 800a768:	b110      	cbz	r0, 800a770 <_printf_float+0x90>
 800a76a:	232d      	movs	r3, #45	; 0x2d
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	4b93      	ldr	r3, [pc, #588]	; (800a9c0 <_printf_float+0x2e0>)
 800a772:	4894      	ldr	r0, [pc, #592]	; (800a9c4 <_printf_float+0x2e4>)
 800a774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a778:	bf94      	ite	ls
 800a77a:	4698      	movls	r8, r3
 800a77c:	4680      	movhi	r8, r0
 800a77e:	2303      	movs	r3, #3
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	9b05      	ldr	r3, [sp, #20]
 800a784:	f023 0204 	bic.w	r2, r3, #4
 800a788:	6022      	str	r2, [r4, #0]
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	9700      	str	r7, [sp, #0]
 800a790:	4633      	mov	r3, r6
 800a792:	aa0b      	add	r2, sp, #44	; 0x2c
 800a794:	4621      	mov	r1, r4
 800a796:	4628      	mov	r0, r5
 800a798:	f000 f9d8 	bl	800ab4c <_printf_common>
 800a79c:	3001      	adds	r0, #1
 800a79e:	f040 8090 	bne.w	800a8c2 <_printf_float+0x1e2>
 800a7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a6:	b00d      	add	sp, #52	; 0x34
 800a7a8:	ecbd 8b02 	vpop	{d8}
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f6 f9f0 	bl	8000b9c <__aeabi_dcmpun>
 800a7bc:	b140      	cbz	r0, 800a7d0 <_printf_float+0xf0>
 800a7be:	464b      	mov	r3, r9
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbc      	itt	lt
 800a7c4:	232d      	movlt	r3, #45	; 0x2d
 800a7c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7ca:	487f      	ldr	r0, [pc, #508]	; (800a9c8 <_printf_float+0x2e8>)
 800a7cc:	4b7f      	ldr	r3, [pc, #508]	; (800a9cc <_printf_float+0x2ec>)
 800a7ce:	e7d1      	b.n	800a774 <_printf_float+0x94>
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7d6:	9206      	str	r2, [sp, #24]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	d13f      	bne.n	800a85c <_printf_float+0x17c>
 800a7dc:	2306      	movs	r3, #6
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	9b05      	ldr	r3, [sp, #20]
 800a7e2:	6861      	ldr	r1, [r4, #4]
 800a7e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	ab0a      	add	r3, sp, #40	; 0x28
 800a7ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7f2:	ab09      	add	r3, sp, #36	; 0x24
 800a7f4:	ec49 8b10 	vmov	d0, r8, r9
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	6022      	str	r2, [r4, #0]
 800a7fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff fecd 	bl	800a5a0 <__cvt>
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a80a:	2b47      	cmp	r3, #71	; 0x47
 800a80c:	4680      	mov	r8, r0
 800a80e:	d108      	bne.n	800a822 <_printf_float+0x142>
 800a810:	1cc8      	adds	r0, r1, #3
 800a812:	db02      	blt.n	800a81a <_printf_float+0x13a>
 800a814:	6863      	ldr	r3, [r4, #4]
 800a816:	4299      	cmp	r1, r3
 800a818:	dd41      	ble.n	800a89e <_printf_float+0x1be>
 800a81a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a81e:	fa5f fb8b 	uxtb.w	fp, fp
 800a822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a826:	d820      	bhi.n	800a86a <_printf_float+0x18a>
 800a828:	3901      	subs	r1, #1
 800a82a:	465a      	mov	r2, fp
 800a82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a830:	9109      	str	r1, [sp, #36]	; 0x24
 800a832:	f7ff ff17 	bl	800a664 <__exponent>
 800a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a838:	1813      	adds	r3, r2, r0
 800a83a:	2a01      	cmp	r2, #1
 800a83c:	4681      	mov	r9, r0
 800a83e:	6123      	str	r3, [r4, #16]
 800a840:	dc02      	bgt.n	800a848 <_printf_float+0x168>
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	07d2      	lsls	r2, r2, #31
 800a846:	d501      	bpl.n	800a84c <_printf_float+0x16c>
 800a848:	3301      	adds	r3, #1
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a850:	2b00      	cmp	r3, #0
 800a852:	d09c      	beq.n	800a78e <_printf_float+0xae>
 800a854:	232d      	movs	r3, #45	; 0x2d
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a85a:	e798      	b.n	800a78e <_printf_float+0xae>
 800a85c:	9a06      	ldr	r2, [sp, #24]
 800a85e:	2a47      	cmp	r2, #71	; 0x47
 800a860:	d1be      	bne.n	800a7e0 <_printf_float+0x100>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1bc      	bne.n	800a7e0 <_printf_float+0x100>
 800a866:	2301      	movs	r3, #1
 800a868:	e7b9      	b.n	800a7de <_printf_float+0xfe>
 800a86a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a86e:	d118      	bne.n	800a8a2 <_printf_float+0x1c2>
 800a870:	2900      	cmp	r1, #0
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	dd0b      	ble.n	800a88e <_printf_float+0x1ae>
 800a876:	6121      	str	r1, [r4, #16]
 800a878:	b913      	cbnz	r3, 800a880 <_printf_float+0x1a0>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	07d0      	lsls	r0, r2, #31
 800a87e:	d502      	bpl.n	800a886 <_printf_float+0x1a6>
 800a880:	3301      	adds	r3, #1
 800a882:	440b      	add	r3, r1
 800a884:	6123      	str	r3, [r4, #16]
 800a886:	65a1      	str	r1, [r4, #88]	; 0x58
 800a888:	f04f 0900 	mov.w	r9, #0
 800a88c:	e7de      	b.n	800a84c <_printf_float+0x16c>
 800a88e:	b913      	cbnz	r3, 800a896 <_printf_float+0x1b6>
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	07d2      	lsls	r2, r2, #31
 800a894:	d501      	bpl.n	800a89a <_printf_float+0x1ba>
 800a896:	3302      	adds	r3, #2
 800a898:	e7f4      	b.n	800a884 <_printf_float+0x1a4>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e7f2      	b.n	800a884 <_printf_float+0x1a4>
 800a89e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a4:	4299      	cmp	r1, r3
 800a8a6:	db05      	blt.n	800a8b4 <_printf_float+0x1d4>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	6121      	str	r1, [r4, #16]
 800a8ac:	07d8      	lsls	r0, r3, #31
 800a8ae:	d5ea      	bpl.n	800a886 <_printf_float+0x1a6>
 800a8b0:	1c4b      	adds	r3, r1, #1
 800a8b2:	e7e7      	b.n	800a884 <_printf_float+0x1a4>
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	bfd4      	ite	le
 800a8b8:	f1c1 0202 	rsble	r2, r1, #2
 800a8bc:	2201      	movgt	r2, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	e7e0      	b.n	800a884 <_printf_float+0x1a4>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	055a      	lsls	r2, r3, #21
 800a8c6:	d407      	bmi.n	800a8d8 <_printf_float+0x1f8>
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	d12c      	bne.n	800a930 <_printf_float+0x250>
 800a8d6:	e764      	b.n	800a7a2 <_printf_float+0xc2>
 800a8d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8dc:	f240 80e0 	bls.w	800aaa0 <_printf_float+0x3c0>
 800a8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f7f6 f926 	bl	8000b38 <__aeabi_dcmpeq>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d034      	beq.n	800a95a <_printf_float+0x27a>
 800a8f0:	4a37      	ldr	r2, [pc, #220]	; (800a9d0 <_printf_float+0x2f0>)
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f af51 	beq.w	800a7a2 <_printf_float+0xc2>
 800a900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a904:	429a      	cmp	r2, r3
 800a906:	db02      	blt.n	800a90e <_printf_float+0x22e>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07d8      	lsls	r0, r3, #31
 800a90c:	d510      	bpl.n	800a930 <_printf_float+0x250>
 800a90e:	ee18 3a10 	vmov	r3, s16
 800a912:	4652      	mov	r2, sl
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	f43f af41 	beq.w	800a7a2 <_printf_float+0xc2>
 800a920:	f04f 0800 	mov.w	r8, #0
 800a924:	f104 091a 	add.w	r9, r4, #26
 800a928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a92a:	3b01      	subs	r3, #1
 800a92c:	4543      	cmp	r3, r8
 800a92e:	dc09      	bgt.n	800a944 <_printf_float+0x264>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	079b      	lsls	r3, r3, #30
 800a934:	f100 8105 	bmi.w	800ab42 <_printf_float+0x462>
 800a938:	68e0      	ldr	r0, [r4, #12]
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	4298      	cmp	r0, r3
 800a93e:	bfb8      	it	lt
 800a940:	4618      	movlt	r0, r3
 800a942:	e730      	b.n	800a7a6 <_printf_float+0xc6>
 800a944:	2301      	movs	r3, #1
 800a946:	464a      	mov	r2, r9
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f af27 	beq.w	800a7a2 <_printf_float+0xc2>
 800a954:	f108 0801 	add.w	r8, r8, #1
 800a958:	e7e6      	b.n	800a928 <_printf_float+0x248>
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	dc39      	bgt.n	800a9d4 <_printf_float+0x2f4>
 800a960:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <_printf_float+0x2f0>)
 800a962:	2301      	movs	r3, #1
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	f43f af19 	beq.w	800a7a2 <_printf_float+0xc2>
 800a970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a974:	4313      	orrs	r3, r2
 800a976:	d102      	bne.n	800a97e <_printf_float+0x29e>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d5d8      	bpl.n	800a930 <_printf_float+0x250>
 800a97e:	ee18 3a10 	vmov	r3, s16
 800a982:	4652      	mov	r2, sl
 800a984:	4631      	mov	r1, r6
 800a986:	4628      	mov	r0, r5
 800a988:	47b8      	blx	r7
 800a98a:	3001      	adds	r0, #1
 800a98c:	f43f af09 	beq.w	800a7a2 <_printf_float+0xc2>
 800a990:	f04f 0900 	mov.w	r9, #0
 800a994:	f104 0a1a 	add.w	sl, r4, #26
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	425b      	negs	r3, r3
 800a99c:	454b      	cmp	r3, r9
 800a99e:	dc01      	bgt.n	800a9a4 <_printf_float+0x2c4>
 800a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a2:	e792      	b.n	800a8ca <_printf_float+0x1ea>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f aef7 	beq.w	800a7a2 <_printf_float+0xc2>
 800a9b4:	f109 0901 	add.w	r9, r9, #1
 800a9b8:	e7ee      	b.n	800a998 <_printf_float+0x2b8>
 800a9ba:	bf00      	nop
 800a9bc:	7fefffff 	.word	0x7fefffff
 800a9c0:	0800ebc8 	.word	0x0800ebc8
 800a9c4:	0800ebcc 	.word	0x0800ebcc
 800a9c8:	0800ebd4 	.word	0x0800ebd4
 800a9cc:	0800ebd0 	.word	0x0800ebd0
 800a9d0:	0800ebd8 	.word	0x0800ebd8
 800a9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	bfa8      	it	ge
 800a9dc:	461a      	movge	r2, r3
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	4691      	mov	r9, r2
 800a9e2:	dc37      	bgt.n	800aa54 <_printf_float+0x374>
 800a9e4:	f04f 0b00 	mov.w	fp, #0
 800a9e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9ec:	f104 021a 	add.w	r2, r4, #26
 800a9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	eba3 0309 	sub.w	r3, r3, r9
 800a9f8:	455b      	cmp	r3, fp
 800a9fa:	dc33      	bgt.n	800aa64 <_printf_float+0x384>
 800a9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa00:	429a      	cmp	r2, r3
 800aa02:	db3b      	blt.n	800aa7c <_printf_float+0x39c>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	07da      	lsls	r2, r3, #31
 800aa08:	d438      	bmi.n	800aa7c <_printf_float+0x39c>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9a05      	ldr	r2, [sp, #20]
 800aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa10:	1a9a      	subs	r2, r3, r2
 800aa12:	eba3 0901 	sub.w	r9, r3, r1
 800aa16:	4591      	cmp	r9, r2
 800aa18:	bfa8      	it	ge
 800aa1a:	4691      	movge	r9, r2
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	dc35      	bgt.n	800aa8e <_printf_float+0x3ae>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa2a:	f104 0a1a 	add.w	sl, r4, #26
 800aa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa32:	1a9b      	subs	r3, r3, r2
 800aa34:	eba3 0309 	sub.w	r3, r3, r9
 800aa38:	4543      	cmp	r3, r8
 800aa3a:	f77f af79 	ble.w	800a930 <_printf_float+0x250>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f aeaa 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	e7ec      	b.n	800aa2e <_printf_float+0x34e>
 800aa54:	4613      	mov	r3, r2
 800aa56:	4631      	mov	r1, r6
 800aa58:	4642      	mov	r2, r8
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d1c0      	bne.n	800a9e4 <_printf_float+0x304>
 800aa62:	e69e      	b.n	800a7a2 <_printf_float+0xc2>
 800aa64:	2301      	movs	r3, #1
 800aa66:	4631      	mov	r1, r6
 800aa68:	4628      	mov	r0, r5
 800aa6a:	9205      	str	r2, [sp, #20]
 800aa6c:	47b8      	blx	r7
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f43f ae97 	beq.w	800a7a2 <_printf_float+0xc2>
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	f10b 0b01 	add.w	fp, fp, #1
 800aa7a:	e7b9      	b.n	800a9f0 <_printf_float+0x310>
 800aa7c:	ee18 3a10 	vmov	r3, s16
 800aa80:	4652      	mov	r2, sl
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d1be      	bne.n	800aa0a <_printf_float+0x32a>
 800aa8c:	e689      	b.n	800a7a2 <_printf_float+0xc2>
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	464b      	mov	r3, r9
 800aa92:	4442      	add	r2, r8
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b8      	blx	r7
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d1c1      	bne.n	800aa22 <_printf_float+0x342>
 800aa9e:	e680      	b.n	800a7a2 <_printf_float+0xc2>
 800aaa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa2:	2a01      	cmp	r2, #1
 800aaa4:	dc01      	bgt.n	800aaaa <_printf_float+0x3ca>
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	d538      	bpl.n	800ab1c <_printf_float+0x43c>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4642      	mov	r2, r8
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	f43f ae74 	beq.w	800a7a2 <_printf_float+0xc2>
 800aaba:	ee18 3a10 	vmov	r3, s16
 800aabe:	4652      	mov	r2, sl
 800aac0:	4631      	mov	r1, r6
 800aac2:	4628      	mov	r0, r5
 800aac4:	47b8      	blx	r7
 800aac6:	3001      	adds	r0, #1
 800aac8:	f43f ae6b 	beq.w	800a7a2 <_printf_float+0xc2>
 800aacc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	f7f6 f830 	bl	8000b38 <__aeabi_dcmpeq>
 800aad8:	b9d8      	cbnz	r0, 800ab12 <_printf_float+0x432>
 800aada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aadc:	f108 0201 	add.w	r2, r8, #1
 800aae0:	3b01      	subs	r3, #1
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	d10e      	bne.n	800ab0a <_printf_float+0x42a>
 800aaec:	e659      	b.n	800a7a2 <_printf_float+0xc2>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f ae52 	beq.w	800a7a2 <_printf_float+0xc2>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4543      	cmp	r3, r8
 800ab08:	dcf1      	bgt.n	800aaee <_printf_float+0x40e>
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab10:	e6dc      	b.n	800a8cc <_printf_float+0x1ec>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	f104 0a1a 	add.w	sl, r4, #26
 800ab1a:	e7f2      	b.n	800ab02 <_printf_float+0x422>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4642      	mov	r2, r8
 800ab20:	e7df      	b.n	800aae2 <_printf_float+0x402>
 800ab22:	2301      	movs	r3, #1
 800ab24:	464a      	mov	r2, r9
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f ae38 	beq.w	800a7a2 <_printf_float+0xc2>
 800ab32:	f108 0801 	add.w	r8, r8, #1
 800ab36:	68e3      	ldr	r3, [r4, #12]
 800ab38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab3a:	1a5b      	subs	r3, r3, r1
 800ab3c:	4543      	cmp	r3, r8
 800ab3e:	dcf0      	bgt.n	800ab22 <_printf_float+0x442>
 800ab40:	e6fa      	b.n	800a938 <_printf_float+0x258>
 800ab42:	f04f 0800 	mov.w	r8, #0
 800ab46:	f104 0919 	add.w	r9, r4, #25
 800ab4a:	e7f4      	b.n	800ab36 <_printf_float+0x456>

0800ab4c <_printf_common>:
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	4616      	mov	r6, r2
 800ab52:	4699      	mov	r9, r3
 800ab54:	688a      	ldr	r2, [r1, #8]
 800ab56:	690b      	ldr	r3, [r1, #16]
 800ab58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	bfb8      	it	lt
 800ab60:	4613      	movlt	r3, r2
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab68:	4607      	mov	r7, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	b10a      	cbz	r2, 800ab72 <_printf_common+0x26>
 800ab6e:	3301      	adds	r3, #1
 800ab70:	6033      	str	r3, [r6, #0]
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	0699      	lsls	r1, r3, #26
 800ab76:	bf42      	ittt	mi
 800ab78:	6833      	ldrmi	r3, [r6, #0]
 800ab7a:	3302      	addmi	r3, #2
 800ab7c:	6033      	strmi	r3, [r6, #0]
 800ab7e:	6825      	ldr	r5, [r4, #0]
 800ab80:	f015 0506 	ands.w	r5, r5, #6
 800ab84:	d106      	bne.n	800ab94 <_printf_common+0x48>
 800ab86:	f104 0a19 	add.w	sl, r4, #25
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	6832      	ldr	r2, [r6, #0]
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	dc26      	bgt.n	800abe2 <_printf_common+0x96>
 800ab94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab98:	1e13      	subs	r3, r2, #0
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	bf18      	it	ne
 800ab9e:	2301      	movne	r3, #1
 800aba0:	0692      	lsls	r2, r2, #26
 800aba2:	d42b      	bmi.n	800abfc <_printf_common+0xb0>
 800aba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aba8:	4649      	mov	r1, r9
 800abaa:	4638      	mov	r0, r7
 800abac:	47c0      	blx	r8
 800abae:	3001      	adds	r0, #1
 800abb0:	d01e      	beq.n	800abf0 <_printf_common+0xa4>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	68e5      	ldr	r5, [r4, #12]
 800abb6:	6832      	ldr	r2, [r6, #0]
 800abb8:	f003 0306 	and.w	r3, r3, #6
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	bf08      	it	eq
 800abc0:	1aad      	subeq	r5, r5, r2
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	bf0c      	ite	eq
 800abc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abcc:	2500      	movne	r5, #0
 800abce:	4293      	cmp	r3, r2
 800abd0:	bfc4      	itt	gt
 800abd2:	1a9b      	subgt	r3, r3, r2
 800abd4:	18ed      	addgt	r5, r5, r3
 800abd6:	2600      	movs	r6, #0
 800abd8:	341a      	adds	r4, #26
 800abda:	42b5      	cmp	r5, r6
 800abdc:	d11a      	bne.n	800ac14 <_printf_common+0xc8>
 800abde:	2000      	movs	r0, #0
 800abe0:	e008      	b.n	800abf4 <_printf_common+0xa8>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4652      	mov	r2, sl
 800abe6:	4649      	mov	r1, r9
 800abe8:	4638      	mov	r0, r7
 800abea:	47c0      	blx	r8
 800abec:	3001      	adds	r0, #1
 800abee:	d103      	bne.n	800abf8 <_printf_common+0xac>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf8:	3501      	adds	r5, #1
 800abfa:	e7c6      	b.n	800ab8a <_printf_common+0x3e>
 800abfc:	18e1      	adds	r1, r4, r3
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	2030      	movs	r0, #48	; 0x30
 800ac02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac06:	4422      	add	r2, r4
 800ac08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac10:	3302      	adds	r3, #2
 800ac12:	e7c7      	b.n	800aba4 <_printf_common+0x58>
 800ac14:	2301      	movs	r3, #1
 800ac16:	4622      	mov	r2, r4
 800ac18:	4649      	mov	r1, r9
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	47c0      	blx	r8
 800ac1e:	3001      	adds	r0, #1
 800ac20:	d0e6      	beq.n	800abf0 <_printf_common+0xa4>
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7d9      	b.n	800abda <_printf_common+0x8e>
	...

0800ac28 <_printf_i>:
 800ac28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	7e0f      	ldrb	r7, [r1, #24]
 800ac2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac30:	2f78      	cmp	r7, #120	; 0x78
 800ac32:	4691      	mov	r9, r2
 800ac34:	4680      	mov	r8, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	469a      	mov	sl, r3
 800ac3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac3e:	d807      	bhi.n	800ac50 <_printf_i+0x28>
 800ac40:	2f62      	cmp	r7, #98	; 0x62
 800ac42:	d80a      	bhi.n	800ac5a <_printf_i+0x32>
 800ac44:	2f00      	cmp	r7, #0
 800ac46:	f000 80d8 	beq.w	800adfa <_printf_i+0x1d2>
 800ac4a:	2f58      	cmp	r7, #88	; 0x58
 800ac4c:	f000 80a3 	beq.w	800ad96 <_printf_i+0x16e>
 800ac50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac58:	e03a      	b.n	800acd0 <_printf_i+0xa8>
 800ac5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac5e:	2b15      	cmp	r3, #21
 800ac60:	d8f6      	bhi.n	800ac50 <_printf_i+0x28>
 800ac62:	a101      	add	r1, pc, #4	; (adr r1, 800ac68 <_printf_i+0x40>)
 800ac64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac68:	0800acc1 	.word	0x0800acc1
 800ac6c:	0800acd5 	.word	0x0800acd5
 800ac70:	0800ac51 	.word	0x0800ac51
 800ac74:	0800ac51 	.word	0x0800ac51
 800ac78:	0800ac51 	.word	0x0800ac51
 800ac7c:	0800ac51 	.word	0x0800ac51
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800ac51 	.word	0x0800ac51
 800ac88:	0800ac51 	.word	0x0800ac51
 800ac8c:	0800ac51 	.word	0x0800ac51
 800ac90:	0800ac51 	.word	0x0800ac51
 800ac94:	0800ade1 	.word	0x0800ade1
 800ac98:	0800ad05 	.word	0x0800ad05
 800ac9c:	0800adc3 	.word	0x0800adc3
 800aca0:	0800ac51 	.word	0x0800ac51
 800aca4:	0800ac51 	.word	0x0800ac51
 800aca8:	0800ae03 	.word	0x0800ae03
 800acac:	0800ac51 	.word	0x0800ac51
 800acb0:	0800ad05 	.word	0x0800ad05
 800acb4:	0800ac51 	.word	0x0800ac51
 800acb8:	0800ac51 	.word	0x0800ac51
 800acbc:	0800adcb 	.word	0x0800adcb
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	1d1a      	adds	r2, r3, #4
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	602a      	str	r2, [r5, #0]
 800acc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800accc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0a3      	b.n	800ae1c <_printf_i+0x1f4>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	6829      	ldr	r1, [r5, #0]
 800acd8:	0606      	lsls	r6, r0, #24
 800acda:	f101 0304 	add.w	r3, r1, #4
 800acde:	d50a      	bpl.n	800acf6 <_printf_i+0xce>
 800ace0:	680e      	ldr	r6, [r1, #0]
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	da03      	bge.n	800acf0 <_printf_i+0xc8>
 800ace8:	232d      	movs	r3, #45	; 0x2d
 800acea:	4276      	negs	r6, r6
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	485e      	ldr	r0, [pc, #376]	; (800ae6c <_printf_i+0x244>)
 800acf2:	230a      	movs	r3, #10
 800acf4:	e019      	b.n	800ad2a <_printf_i+0x102>
 800acf6:	680e      	ldr	r6, [r1, #0]
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acfe:	bf18      	it	ne
 800ad00:	b236      	sxthne	r6, r6
 800ad02:	e7ef      	b.n	800ace4 <_printf_i+0xbc>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	1d19      	adds	r1, r3, #4
 800ad0a:	6029      	str	r1, [r5, #0]
 800ad0c:	0601      	lsls	r1, r0, #24
 800ad0e:	d501      	bpl.n	800ad14 <_printf_i+0xec>
 800ad10:	681e      	ldr	r6, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <_printf_i+0xf2>
 800ad14:	0646      	lsls	r6, r0, #25
 800ad16:	d5fb      	bpl.n	800ad10 <_printf_i+0xe8>
 800ad18:	881e      	ldrh	r6, [r3, #0]
 800ad1a:	4854      	ldr	r0, [pc, #336]	; (800ae6c <_printf_i+0x244>)
 800ad1c:	2f6f      	cmp	r7, #111	; 0x6f
 800ad1e:	bf0c      	ite	eq
 800ad20:	2308      	moveq	r3, #8
 800ad22:	230a      	movne	r3, #10
 800ad24:	2100      	movs	r1, #0
 800ad26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad2a:	6865      	ldr	r5, [r4, #4]
 800ad2c:	60a5      	str	r5, [r4, #8]
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	bfa2      	ittt	ge
 800ad32:	6821      	ldrge	r1, [r4, #0]
 800ad34:	f021 0104 	bicge.w	r1, r1, #4
 800ad38:	6021      	strge	r1, [r4, #0]
 800ad3a:	b90e      	cbnz	r6, 800ad40 <_printf_i+0x118>
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d04d      	beq.n	800addc <_printf_i+0x1b4>
 800ad40:	4615      	mov	r5, r2
 800ad42:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad46:	fb03 6711 	mls	r7, r3, r1, r6
 800ad4a:	5dc7      	ldrb	r7, [r0, r7]
 800ad4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad50:	4637      	mov	r7, r6
 800ad52:	42bb      	cmp	r3, r7
 800ad54:	460e      	mov	r6, r1
 800ad56:	d9f4      	bls.n	800ad42 <_printf_i+0x11a>
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d10b      	bne.n	800ad74 <_printf_i+0x14c>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07de      	lsls	r6, r3, #31
 800ad60:	d508      	bpl.n	800ad74 <_printf_i+0x14c>
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	6861      	ldr	r1, [r4, #4]
 800ad66:	4299      	cmp	r1, r3
 800ad68:	bfde      	ittt	le
 800ad6a:	2330      	movle	r3, #48	; 0x30
 800ad6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad74:	1b52      	subs	r2, r2, r5
 800ad76:	6122      	str	r2, [r4, #16]
 800ad78:	f8cd a000 	str.w	sl, [sp]
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	aa03      	add	r2, sp, #12
 800ad80:	4621      	mov	r1, r4
 800ad82:	4640      	mov	r0, r8
 800ad84:	f7ff fee2 	bl	800ab4c <_printf_common>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d14c      	bne.n	800ae26 <_printf_i+0x1fe>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b004      	add	sp, #16
 800ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad96:	4835      	ldr	r0, [pc, #212]	; (800ae6c <_printf_i+0x244>)
 800ad98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad9c:	6829      	ldr	r1, [r5, #0]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ada4:	6029      	str	r1, [r5, #0]
 800ada6:	061d      	lsls	r5, r3, #24
 800ada8:	d514      	bpl.n	800add4 <_printf_i+0x1ac>
 800adaa:	07df      	lsls	r7, r3, #31
 800adac:	bf44      	itt	mi
 800adae:	f043 0320 	orrmi.w	r3, r3, #32
 800adb2:	6023      	strmi	r3, [r4, #0]
 800adb4:	b91e      	cbnz	r6, 800adbe <_printf_i+0x196>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f023 0320 	bic.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	2310      	movs	r3, #16
 800adc0:	e7b0      	b.n	800ad24 <_printf_i+0xfc>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f043 0320 	orr.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	2378      	movs	r3, #120	; 0x78
 800adcc:	4828      	ldr	r0, [pc, #160]	; (800ae70 <_printf_i+0x248>)
 800adce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800add2:	e7e3      	b.n	800ad9c <_printf_i+0x174>
 800add4:	0659      	lsls	r1, r3, #25
 800add6:	bf48      	it	mi
 800add8:	b2b6      	uxthmi	r6, r6
 800adda:	e7e6      	b.n	800adaa <_printf_i+0x182>
 800addc:	4615      	mov	r5, r2
 800adde:	e7bb      	b.n	800ad58 <_printf_i+0x130>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	6826      	ldr	r6, [r4, #0]
 800ade4:	6961      	ldr	r1, [r4, #20]
 800ade6:	1d18      	adds	r0, r3, #4
 800ade8:	6028      	str	r0, [r5, #0]
 800adea:	0635      	lsls	r5, r6, #24
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	d501      	bpl.n	800adf4 <_printf_i+0x1cc>
 800adf0:	6019      	str	r1, [r3, #0]
 800adf2:	e002      	b.n	800adfa <_printf_i+0x1d2>
 800adf4:	0670      	lsls	r0, r6, #25
 800adf6:	d5fb      	bpl.n	800adf0 <_printf_i+0x1c8>
 800adf8:	8019      	strh	r1, [r3, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	4615      	mov	r5, r2
 800ae00:	e7ba      	b.n	800ad78 <_printf_i+0x150>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	1d1a      	adds	r2, r3, #4
 800ae06:	602a      	str	r2, [r5, #0]
 800ae08:	681d      	ldr	r5, [r3, #0]
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7f5 fa1e 	bl	8000250 <memchr>
 800ae14:	b108      	cbz	r0, 800ae1a <_printf_i+0x1f2>
 800ae16:	1b40      	subs	r0, r0, r5
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	6863      	ldr	r3, [r4, #4]
 800ae1c:	6123      	str	r3, [r4, #16]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae24:	e7a8      	b.n	800ad78 <_printf_i+0x150>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	462a      	mov	r2, r5
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	47d0      	blx	sl
 800ae30:	3001      	adds	r0, #1
 800ae32:	d0ab      	beq.n	800ad8c <_printf_i+0x164>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	079b      	lsls	r3, r3, #30
 800ae38:	d413      	bmi.n	800ae62 <_printf_i+0x23a>
 800ae3a:	68e0      	ldr	r0, [r4, #12]
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	4298      	cmp	r0, r3
 800ae40:	bfb8      	it	lt
 800ae42:	4618      	movlt	r0, r3
 800ae44:	e7a4      	b.n	800ad90 <_printf_i+0x168>
 800ae46:	2301      	movs	r3, #1
 800ae48:	4632      	mov	r2, r6
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	47d0      	blx	sl
 800ae50:	3001      	adds	r0, #1
 800ae52:	d09b      	beq.n	800ad8c <_printf_i+0x164>
 800ae54:	3501      	adds	r5, #1
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	9903      	ldr	r1, [sp, #12]
 800ae5a:	1a5b      	subs	r3, r3, r1
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dcf2      	bgt.n	800ae46 <_printf_i+0x21e>
 800ae60:	e7eb      	b.n	800ae3a <_printf_i+0x212>
 800ae62:	2500      	movs	r5, #0
 800ae64:	f104 0619 	add.w	r6, r4, #25
 800ae68:	e7f5      	b.n	800ae56 <_printf_i+0x22e>
 800ae6a:	bf00      	nop
 800ae6c:	0800ebda 	.word	0x0800ebda
 800ae70:	0800ebeb 	.word	0x0800ebeb

0800ae74 <siprintf>:
 800ae74:	b40e      	push	{r1, r2, r3}
 800ae76:	b500      	push	{lr}
 800ae78:	b09c      	sub	sp, #112	; 0x70
 800ae7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae7c:	9002      	str	r0, [sp, #8]
 800ae7e:	9006      	str	r0, [sp, #24]
 800ae80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae84:	4809      	ldr	r0, [pc, #36]	; (800aeac <siprintf+0x38>)
 800ae86:	9107      	str	r1, [sp, #28]
 800ae88:	9104      	str	r1, [sp, #16]
 800ae8a:	4909      	ldr	r1, [pc, #36]	; (800aeb0 <siprintf+0x3c>)
 800ae8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae90:	9105      	str	r1, [sp, #20]
 800ae92:	6800      	ldr	r0, [r0, #0]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	a902      	add	r1, sp, #8
 800ae98:	f002 fef2 	bl	800dc80 <_svfiprintf_r>
 800ae9c:	9b02      	ldr	r3, [sp, #8]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
 800aea2:	b01c      	add	sp, #112	; 0x70
 800aea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea8:	b003      	add	sp, #12
 800aeaa:	4770      	bx	lr
 800aeac:	20000010 	.word	0x20000010
 800aeb0:	ffff0208 	.word	0xffff0208

0800aeb4 <sulp>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	460d      	mov	r5, r1
 800aeba:	ec45 4b10 	vmov	d0, r4, r5
 800aebe:	4616      	mov	r6, r2
 800aec0:	f002 fc3c 	bl	800d73c <__ulp>
 800aec4:	ec51 0b10 	vmov	r0, r1, d0
 800aec8:	b17e      	cbz	r6, 800aeea <sulp+0x36>
 800aeca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aece:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd09      	ble.n	800aeea <sulp+0x36>
 800aed6:	051b      	lsls	r3, r3, #20
 800aed8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aedc:	2400      	movs	r4, #0
 800aede:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 fbbf 	bl	8000668 <__aeabi_dmul>
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	0000      	movs	r0, r0
	...

0800aef0 <_strtod_l>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	b09d      	sub	sp, #116	; 0x74
 800aefa:	461f      	mov	r7, r3
 800aefc:	2300      	movs	r3, #0
 800aefe:	9318      	str	r3, [sp, #96]	; 0x60
 800af00:	4ba2      	ldr	r3, [pc, #648]	; (800b18c <_strtod_l+0x29c>)
 800af02:	9213      	str	r2, [sp, #76]	; 0x4c
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	4604      	mov	r4, r0
 800af0a:	4618      	mov	r0, r3
 800af0c:	4688      	mov	r8, r1
 800af0e:	f7f5 f991 	bl	8000234 <strlen>
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	4605      	mov	r5, r0
 800af18:	f04f 0b00 	mov.w	fp, #0
 800af1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af22:	781a      	ldrb	r2, [r3, #0]
 800af24:	2a2b      	cmp	r2, #43	; 0x2b
 800af26:	d04e      	beq.n	800afc6 <_strtod_l+0xd6>
 800af28:	d83b      	bhi.n	800afa2 <_strtod_l+0xb2>
 800af2a:	2a0d      	cmp	r2, #13
 800af2c:	d834      	bhi.n	800af98 <_strtod_l+0xa8>
 800af2e:	2a08      	cmp	r2, #8
 800af30:	d834      	bhi.n	800af9c <_strtod_l+0xac>
 800af32:	2a00      	cmp	r2, #0
 800af34:	d03e      	beq.n	800afb4 <_strtod_l+0xc4>
 800af36:	2300      	movs	r3, #0
 800af38:	930a      	str	r3, [sp, #40]	; 0x28
 800af3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af3c:	7833      	ldrb	r3, [r6, #0]
 800af3e:	2b30      	cmp	r3, #48	; 0x30
 800af40:	f040 80b0 	bne.w	800b0a4 <_strtod_l+0x1b4>
 800af44:	7873      	ldrb	r3, [r6, #1]
 800af46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af4a:	2b58      	cmp	r3, #88	; 0x58
 800af4c:	d168      	bne.n	800b020 <_strtod_l+0x130>
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	ab18      	add	r3, sp, #96	; 0x60
 800af54:	9702      	str	r7, [sp, #8]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	4a8d      	ldr	r2, [pc, #564]	; (800b190 <_strtod_l+0x2a0>)
 800af5a:	ab19      	add	r3, sp, #100	; 0x64
 800af5c:	a917      	add	r1, sp, #92	; 0x5c
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 fd46 	bl	800c9f0 <__gethex>
 800af64:	f010 0707 	ands.w	r7, r0, #7
 800af68:	4605      	mov	r5, r0
 800af6a:	d005      	beq.n	800af78 <_strtod_l+0x88>
 800af6c:	2f06      	cmp	r7, #6
 800af6e:	d12c      	bne.n	800afca <_strtod_l+0xda>
 800af70:	3601      	adds	r6, #1
 800af72:	2300      	movs	r3, #0
 800af74:	9617      	str	r6, [sp, #92]	; 0x5c
 800af76:	930a      	str	r3, [sp, #40]	; 0x28
 800af78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8590 	bne.w	800baa0 <_strtod_l+0xbb0>
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	b1eb      	cbz	r3, 800afc0 <_strtod_l+0xd0>
 800af84:	4652      	mov	r2, sl
 800af86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af8a:	ec43 2b10 	vmov	d0, r2, r3
 800af8e:	b01d      	add	sp, #116	; 0x74
 800af90:	ecbd 8b02 	vpop	{d8}
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	2a20      	cmp	r2, #32
 800af9a:	d1cc      	bne.n	800af36 <_strtod_l+0x46>
 800af9c:	3301      	adds	r3, #1
 800af9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800afa0:	e7be      	b.n	800af20 <_strtod_l+0x30>
 800afa2:	2a2d      	cmp	r2, #45	; 0x2d
 800afa4:	d1c7      	bne.n	800af36 <_strtod_l+0x46>
 800afa6:	2201      	movs	r2, #1
 800afa8:	920a      	str	r2, [sp, #40]	; 0x28
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	9217      	str	r2, [sp, #92]	; 0x5c
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1c2      	bne.n	800af3a <_strtod_l+0x4a>
 800afb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 856e 	bne.w	800ba9c <_strtod_l+0xbac>
 800afc0:	4652      	mov	r2, sl
 800afc2:	465b      	mov	r3, fp
 800afc4:	e7e1      	b.n	800af8a <_strtod_l+0x9a>
 800afc6:	2200      	movs	r2, #0
 800afc8:	e7ee      	b.n	800afa8 <_strtod_l+0xb8>
 800afca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afcc:	b13a      	cbz	r2, 800afde <_strtod_l+0xee>
 800afce:	2135      	movs	r1, #53	; 0x35
 800afd0:	a81a      	add	r0, sp, #104	; 0x68
 800afd2:	f002 fcbe 	bl	800d952 <__copybits>
 800afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afd8:	4620      	mov	r0, r4
 800afda:	f002 f87d 	bl	800d0d8 <_Bfree>
 800afde:	3f01      	subs	r7, #1
 800afe0:	2f04      	cmp	r7, #4
 800afe2:	d806      	bhi.n	800aff2 <_strtod_l+0x102>
 800afe4:	e8df f007 	tbb	[pc, r7]
 800afe8:	1714030a 	.word	0x1714030a
 800afec:	0a          	.byte	0x0a
 800afed:	00          	.byte	0x00
 800afee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800aff2:	0728      	lsls	r0, r5, #28
 800aff4:	d5c0      	bpl.n	800af78 <_strtod_l+0x88>
 800aff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800affa:	e7bd      	b.n	800af78 <_strtod_l+0x88>
 800affc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b00a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b00e:	e7f0      	b.n	800aff2 <_strtod_l+0x102>
 800b010:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b194 <_strtod_l+0x2a4>
 800b014:	e7ed      	b.n	800aff2 <_strtod_l+0x102>
 800b016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b01a:	f04f 3aff 	mov.w	sl, #4294967295
 800b01e:	e7e8      	b.n	800aff2 <_strtod_l+0x102>
 800b020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	9217      	str	r2, [sp, #92]	; 0x5c
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b30      	cmp	r3, #48	; 0x30
 800b02a:	d0f9      	beq.n	800b020 <_strtod_l+0x130>
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d0a3      	beq.n	800af78 <_strtod_l+0x88>
 800b030:	2301      	movs	r3, #1
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b040:	464f      	mov	r7, r9
 800b042:	220a      	movs	r2, #10
 800b044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b046:	7806      	ldrb	r6, [r0, #0]
 800b048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b04c:	b2d9      	uxtb	r1, r3
 800b04e:	2909      	cmp	r1, #9
 800b050:	d92a      	bls.n	800b0a8 <_strtod_l+0x1b8>
 800b052:	9905      	ldr	r1, [sp, #20]
 800b054:	462a      	mov	r2, r5
 800b056:	f003 f887 	bl	800e168 <strncmp>
 800b05a:	b398      	cbz	r0, 800b0c4 <_strtod_l+0x1d4>
 800b05c:	2000      	movs	r0, #0
 800b05e:	4632      	mov	r2, r6
 800b060:	463d      	mov	r5, r7
 800b062:	9005      	str	r0, [sp, #20]
 800b064:	4603      	mov	r3, r0
 800b066:	2a65      	cmp	r2, #101	; 0x65
 800b068:	d001      	beq.n	800b06e <_strtod_l+0x17e>
 800b06a:	2a45      	cmp	r2, #69	; 0x45
 800b06c:	d118      	bne.n	800b0a0 <_strtod_l+0x1b0>
 800b06e:	b91d      	cbnz	r5, 800b078 <_strtod_l+0x188>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	4302      	orrs	r2, r0
 800b074:	d09e      	beq.n	800afb4 <_strtod_l+0xc4>
 800b076:	2500      	movs	r5, #0
 800b078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b07c:	f108 0201 	add.w	r2, r8, #1
 800b080:	9217      	str	r2, [sp, #92]	; 0x5c
 800b082:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b086:	2a2b      	cmp	r2, #43	; 0x2b
 800b088:	d075      	beq.n	800b176 <_strtod_l+0x286>
 800b08a:	2a2d      	cmp	r2, #45	; 0x2d
 800b08c:	d07b      	beq.n	800b186 <_strtod_l+0x296>
 800b08e:	f04f 0c00 	mov.w	ip, #0
 800b092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b096:	2909      	cmp	r1, #9
 800b098:	f240 8082 	bls.w	800b1a0 <_strtod_l+0x2b0>
 800b09c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0a0:	2600      	movs	r6, #0
 800b0a2:	e09d      	b.n	800b1e0 <_strtod_l+0x2f0>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e7c4      	b.n	800b032 <_strtod_l+0x142>
 800b0a8:	2f08      	cmp	r7, #8
 800b0aa:	bfd8      	it	le
 800b0ac:	9907      	ldrle	r1, [sp, #28]
 800b0ae:	f100 0001 	add.w	r0, r0, #1
 800b0b2:	bfda      	itte	le
 800b0b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0b8:	9307      	strle	r3, [sp, #28]
 800b0ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0be:	3701      	adds	r7, #1
 800b0c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b0c2:	e7bf      	b.n	800b044 <_strtod_l+0x154>
 800b0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c6:	195a      	adds	r2, r3, r5
 800b0c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0ca:	5d5a      	ldrb	r2, [r3, r5]
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	d037      	beq.n	800b140 <_strtod_l+0x250>
 800b0d0:	9005      	str	r0, [sp, #20]
 800b0d2:	463d      	mov	r5, r7
 800b0d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d912      	bls.n	800b102 <_strtod_l+0x212>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e7c2      	b.n	800b066 <_strtod_l+0x176>
 800b0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0e6:	785a      	ldrb	r2, [r3, #1]
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	2a30      	cmp	r2, #48	; 0x30
 800b0ec:	d0f8      	beq.n	800b0e0 <_strtod_l+0x1f0>
 800b0ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	f200 84d9 	bhi.w	800baaa <_strtod_l+0xbba>
 800b0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0fa:	9005      	str	r0, [sp, #20]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	9308      	str	r3, [sp, #32]
 800b100:	4605      	mov	r5, r0
 800b102:	3a30      	subs	r2, #48	; 0x30
 800b104:	f100 0301 	add.w	r3, r0, #1
 800b108:	d014      	beq.n	800b134 <_strtod_l+0x244>
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	4419      	add	r1, r3
 800b10e:	9105      	str	r1, [sp, #20]
 800b110:	462b      	mov	r3, r5
 800b112:	eb00 0e05 	add.w	lr, r0, r5
 800b116:	210a      	movs	r1, #10
 800b118:	4573      	cmp	r3, lr
 800b11a:	d113      	bne.n	800b144 <_strtod_l+0x254>
 800b11c:	182b      	adds	r3, r5, r0
 800b11e:	2b08      	cmp	r3, #8
 800b120:	f105 0501 	add.w	r5, r5, #1
 800b124:	4405      	add	r5, r0
 800b126:	dc1c      	bgt.n	800b162 <_strtod_l+0x272>
 800b128:	9907      	ldr	r1, [sp, #28]
 800b12a:	230a      	movs	r3, #10
 800b12c:	fb03 2301 	mla	r3, r3, r1, r2
 800b130:	9307      	str	r3, [sp, #28]
 800b132:	2300      	movs	r3, #0
 800b134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b136:	1c51      	adds	r1, r2, #1
 800b138:	9117      	str	r1, [sp, #92]	; 0x5c
 800b13a:	7852      	ldrb	r2, [r2, #1]
 800b13c:	4618      	mov	r0, r3
 800b13e:	e7c9      	b.n	800b0d4 <_strtod_l+0x1e4>
 800b140:	4638      	mov	r0, r7
 800b142:	e7d2      	b.n	800b0ea <_strtod_l+0x1fa>
 800b144:	2b08      	cmp	r3, #8
 800b146:	dc04      	bgt.n	800b152 <_strtod_l+0x262>
 800b148:	9e07      	ldr	r6, [sp, #28]
 800b14a:	434e      	muls	r6, r1
 800b14c:	9607      	str	r6, [sp, #28]
 800b14e:	3301      	adds	r3, #1
 800b150:	e7e2      	b.n	800b118 <_strtod_l+0x228>
 800b152:	f103 0c01 	add.w	ip, r3, #1
 800b156:	f1bc 0f10 	cmp.w	ip, #16
 800b15a:	bfd8      	it	le
 800b15c:	fb01 f909 	mulle.w	r9, r1, r9
 800b160:	e7f5      	b.n	800b14e <_strtod_l+0x25e>
 800b162:	2d10      	cmp	r5, #16
 800b164:	bfdc      	itt	le
 800b166:	230a      	movle	r3, #10
 800b168:	fb03 2909 	mlale	r9, r3, r9, r2
 800b16c:	e7e1      	b.n	800b132 <_strtod_l+0x242>
 800b16e:	2300      	movs	r3, #0
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	2301      	movs	r3, #1
 800b174:	e77c      	b.n	800b070 <_strtod_l+0x180>
 800b176:	f04f 0c00 	mov.w	ip, #0
 800b17a:	f108 0202 	add.w	r2, r8, #2
 800b17e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b180:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b184:	e785      	b.n	800b092 <_strtod_l+0x1a2>
 800b186:	f04f 0c01 	mov.w	ip, #1
 800b18a:	e7f6      	b.n	800b17a <_strtod_l+0x28a>
 800b18c:	0800ede0 	.word	0x0800ede0
 800b190:	0800ebfc 	.word	0x0800ebfc
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b19a:	1c51      	adds	r1, r2, #1
 800b19c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b19e:	7852      	ldrb	r2, [r2, #1]
 800b1a0:	2a30      	cmp	r2, #48	; 0x30
 800b1a2:	d0f9      	beq.n	800b198 <_strtod_l+0x2a8>
 800b1a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b1a8:	2908      	cmp	r1, #8
 800b1aa:	f63f af79 	bhi.w	800b0a0 <_strtod_l+0x1b0>
 800b1ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b1b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b4:	9206      	str	r2, [sp, #24]
 800b1b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1b8:	1c51      	adds	r1, r2, #1
 800b1ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1bc:	7852      	ldrb	r2, [r2, #1]
 800b1be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b1c2:	2e09      	cmp	r6, #9
 800b1c4:	d937      	bls.n	800b236 <_strtod_l+0x346>
 800b1c6:	9e06      	ldr	r6, [sp, #24]
 800b1c8:	1b89      	subs	r1, r1, r6
 800b1ca:	2908      	cmp	r1, #8
 800b1cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b1d0:	dc02      	bgt.n	800b1d8 <_strtod_l+0x2e8>
 800b1d2:	4576      	cmp	r6, lr
 800b1d4:	bfa8      	it	ge
 800b1d6:	4676      	movge	r6, lr
 800b1d8:	f1bc 0f00 	cmp.w	ip, #0
 800b1dc:	d000      	beq.n	800b1e0 <_strtod_l+0x2f0>
 800b1de:	4276      	negs	r6, r6
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	d14d      	bne.n	800b280 <_strtod_l+0x390>
 800b1e4:	9904      	ldr	r1, [sp, #16]
 800b1e6:	4301      	orrs	r1, r0
 800b1e8:	f47f aec6 	bne.w	800af78 <_strtod_l+0x88>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f47f aee1 	bne.w	800afb4 <_strtod_l+0xc4>
 800b1f2:	2a69      	cmp	r2, #105	; 0x69
 800b1f4:	d027      	beq.n	800b246 <_strtod_l+0x356>
 800b1f6:	dc24      	bgt.n	800b242 <_strtod_l+0x352>
 800b1f8:	2a49      	cmp	r2, #73	; 0x49
 800b1fa:	d024      	beq.n	800b246 <_strtod_l+0x356>
 800b1fc:	2a4e      	cmp	r2, #78	; 0x4e
 800b1fe:	f47f aed9 	bne.w	800afb4 <_strtod_l+0xc4>
 800b202:	499f      	ldr	r1, [pc, #636]	; (800b480 <_strtod_l+0x590>)
 800b204:	a817      	add	r0, sp, #92	; 0x5c
 800b206:	f001 fe4b 	bl	800cea0 <__match>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f43f aed2 	beq.w	800afb4 <_strtod_l+0xc4>
 800b210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b28      	cmp	r3, #40	; 0x28
 800b216:	d12d      	bne.n	800b274 <_strtod_l+0x384>
 800b218:	499a      	ldr	r1, [pc, #616]	; (800b484 <_strtod_l+0x594>)
 800b21a:	aa1a      	add	r2, sp, #104	; 0x68
 800b21c:	a817      	add	r0, sp, #92	; 0x5c
 800b21e:	f001 fe53 	bl	800cec8 <__hexnan>
 800b222:	2805      	cmp	r0, #5
 800b224:	d126      	bne.n	800b274 <_strtod_l+0x384>
 800b226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b22c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b234:	e6a0      	b.n	800af78 <_strtod_l+0x88>
 800b236:	210a      	movs	r1, #10
 800b238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b23c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b240:	e7b9      	b.n	800b1b6 <_strtod_l+0x2c6>
 800b242:	2a6e      	cmp	r2, #110	; 0x6e
 800b244:	e7db      	b.n	800b1fe <_strtod_l+0x30e>
 800b246:	4990      	ldr	r1, [pc, #576]	; (800b488 <_strtod_l+0x598>)
 800b248:	a817      	add	r0, sp, #92	; 0x5c
 800b24a:	f001 fe29 	bl	800cea0 <__match>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f aeb0 	beq.w	800afb4 <_strtod_l+0xc4>
 800b254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b256:	498d      	ldr	r1, [pc, #564]	; (800b48c <_strtod_l+0x59c>)
 800b258:	3b01      	subs	r3, #1
 800b25a:	a817      	add	r0, sp, #92	; 0x5c
 800b25c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b25e:	f001 fe1f 	bl	800cea0 <__match>
 800b262:	b910      	cbnz	r0, 800b26a <_strtod_l+0x37a>
 800b264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b266:	3301      	adds	r3, #1
 800b268:	9317      	str	r3, [sp, #92]	; 0x5c
 800b26a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b49c <_strtod_l+0x5ac>
 800b26e:	f04f 0a00 	mov.w	sl, #0
 800b272:	e681      	b.n	800af78 <_strtod_l+0x88>
 800b274:	4886      	ldr	r0, [pc, #536]	; (800b490 <_strtod_l+0x5a0>)
 800b276:	f002 ff5f 	bl	800e138 <nan>
 800b27a:	ec5b ab10 	vmov	sl, fp, d0
 800b27e:	e67b      	b.n	800af78 <_strtod_l+0x88>
 800b280:	9b05      	ldr	r3, [sp, #20]
 800b282:	9807      	ldr	r0, [sp, #28]
 800b284:	1af3      	subs	r3, r6, r3
 800b286:	2f00      	cmp	r7, #0
 800b288:	bf08      	it	eq
 800b28a:	462f      	moveq	r7, r5
 800b28c:	2d10      	cmp	r5, #16
 800b28e:	9306      	str	r3, [sp, #24]
 800b290:	46a8      	mov	r8, r5
 800b292:	bfa8      	it	ge
 800b294:	f04f 0810 	movge.w	r8, #16
 800b298:	f7f5 f96c 	bl	8000574 <__aeabi_ui2d>
 800b29c:	2d09      	cmp	r5, #9
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	dd13      	ble.n	800b2cc <_strtod_l+0x3dc>
 800b2a4:	4b7b      	ldr	r3, [pc, #492]	; (800b494 <_strtod_l+0x5a4>)
 800b2a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2ae:	f7f5 f9db 	bl	8000668 <__aeabi_dmul>
 800b2b2:	4682      	mov	sl, r0
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	468b      	mov	fp, r1
 800b2b8:	f7f5 f95c 	bl	8000574 <__aeabi_ui2d>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f5 f81a 	bl	80002fc <__adddf3>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	468b      	mov	fp, r1
 800b2cc:	2d0f      	cmp	r5, #15
 800b2ce:	dc38      	bgt.n	800b342 <_strtod_l+0x452>
 800b2d0:	9b06      	ldr	r3, [sp, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f43f ae50 	beq.w	800af78 <_strtod_l+0x88>
 800b2d8:	dd24      	ble.n	800b324 <_strtod_l+0x434>
 800b2da:	2b16      	cmp	r3, #22
 800b2dc:	dc0b      	bgt.n	800b2f6 <_strtod_l+0x406>
 800b2de:	496d      	ldr	r1, [pc, #436]	; (800b494 <_strtod_l+0x5a4>)
 800b2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	465b      	mov	r3, fp
 800b2ec:	f7f5 f9bc 	bl	8000668 <__aeabi_dmul>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	e640      	b.n	800af78 <_strtod_l+0x88>
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	db20      	blt.n	800b342 <_strtod_l+0x452>
 800b300:	4c64      	ldr	r4, [pc, #400]	; (800b494 <_strtod_l+0x5a4>)
 800b302:	f1c5 050f 	rsb	r5, r5, #15
 800b306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b30a:	4652      	mov	r2, sl
 800b30c:	465b      	mov	r3, fp
 800b30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b312:	f7f5 f9a9 	bl	8000668 <__aeabi_dmul>
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	1b5d      	subs	r5, r3, r5
 800b31a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b31e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b322:	e7e3      	b.n	800b2ec <_strtod_l+0x3fc>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	3316      	adds	r3, #22
 800b328:	db0b      	blt.n	800b342 <_strtod_l+0x452>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	1b9e      	subs	r6, r3, r6
 800b32e:	4b59      	ldr	r3, [pc, #356]	; (800b494 <_strtod_l+0x5a4>)
 800b330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b334:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	f7f5 fabe 	bl	80008bc <__aeabi_ddiv>
 800b340:	e7d6      	b.n	800b2f0 <_strtod_l+0x400>
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	eba5 0808 	sub.w	r8, r5, r8
 800b348:	4498      	add	r8, r3
 800b34a:	f1b8 0f00 	cmp.w	r8, #0
 800b34e:	dd74      	ble.n	800b43a <_strtod_l+0x54a>
 800b350:	f018 030f 	ands.w	r3, r8, #15
 800b354:	d00a      	beq.n	800b36c <_strtod_l+0x47c>
 800b356:	494f      	ldr	r1, [pc, #316]	; (800b494 <_strtod_l+0x5a4>)
 800b358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b35c:	4652      	mov	r2, sl
 800b35e:	465b      	mov	r3, fp
 800b360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b364:	f7f5 f980 	bl	8000668 <__aeabi_dmul>
 800b368:	4682      	mov	sl, r0
 800b36a:	468b      	mov	fp, r1
 800b36c:	f038 080f 	bics.w	r8, r8, #15
 800b370:	d04f      	beq.n	800b412 <_strtod_l+0x522>
 800b372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b376:	dd22      	ble.n	800b3be <_strtod_l+0x4ce>
 800b378:	2500      	movs	r5, #0
 800b37a:	462e      	mov	r6, r5
 800b37c:	9507      	str	r5, [sp, #28]
 800b37e:	9505      	str	r5, [sp, #20]
 800b380:	2322      	movs	r3, #34	; 0x22
 800b382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b49c <_strtod_l+0x5ac>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	f04f 0a00 	mov.w	sl, #0
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f43f adf2 	beq.w	800af78 <_strtod_l+0x88>
 800b394:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b396:	4620      	mov	r0, r4
 800b398:	f001 fe9e 	bl	800d0d8 <_Bfree>
 800b39c:	9905      	ldr	r1, [sp, #20]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f001 fe9a 	bl	800d0d8 <_Bfree>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f001 fe96 	bl	800d0d8 <_Bfree>
 800b3ac:	9907      	ldr	r1, [sp, #28]
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 fe92 	bl	800d0d8 <_Bfree>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fe8e 	bl	800d0d8 <_Bfree>
 800b3bc:	e5dc      	b.n	800af78 <_strtod_l+0x88>
 800b3be:	4b36      	ldr	r3, [pc, #216]	; (800b498 <_strtod_l+0x5a8>)
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	4699      	mov	r9, r3
 800b3ce:	f1b8 0f01 	cmp.w	r8, #1
 800b3d2:	dc21      	bgt.n	800b418 <_strtod_l+0x528>
 800b3d4:	b10b      	cbz	r3, 800b3da <_strtod_l+0x4ea>
 800b3d6:	4682      	mov	sl, r0
 800b3d8:	468b      	mov	fp, r1
 800b3da:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <_strtod_l+0x5a8>)
 800b3dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	465b      	mov	r3, fp
 800b3e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3ec:	f7f5 f93c 	bl	8000668 <__aeabi_dmul>
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	; (800b49c <_strtod_l+0x5ac>)
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	400b      	ands	r3, r1
 800b3f6:	492a      	ldr	r1, [pc, #168]	; (800b4a0 <_strtod_l+0x5b0>)
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	4682      	mov	sl, r0
 800b3fc:	d8bc      	bhi.n	800b378 <_strtod_l+0x488>
 800b3fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b402:	428b      	cmp	r3, r1
 800b404:	bf86      	itte	hi
 800b406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b4a4 <_strtod_l+0x5b4>
 800b40a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b40e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b412:	2300      	movs	r3, #0
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	e084      	b.n	800b522 <_strtod_l+0x632>
 800b418:	f018 0f01 	tst.w	r8, #1
 800b41c:	d005      	beq.n	800b42a <_strtod_l+0x53a>
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 f920 	bl	8000668 <__aeabi_dmul>
 800b428:	2301      	movs	r3, #1
 800b42a:	9a04      	ldr	r2, [sp, #16]
 800b42c:	3208      	adds	r2, #8
 800b42e:	f109 0901 	add.w	r9, r9, #1
 800b432:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b436:	9204      	str	r2, [sp, #16]
 800b438:	e7c9      	b.n	800b3ce <_strtod_l+0x4de>
 800b43a:	d0ea      	beq.n	800b412 <_strtod_l+0x522>
 800b43c:	f1c8 0800 	rsb	r8, r8, #0
 800b440:	f018 020f 	ands.w	r2, r8, #15
 800b444:	d00a      	beq.n	800b45c <_strtod_l+0x56c>
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <_strtod_l+0x5a4>)
 800b448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f5 fa32 	bl	80008bc <__aeabi_ddiv>
 800b458:	4682      	mov	sl, r0
 800b45a:	468b      	mov	fp, r1
 800b45c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b460:	d0d7      	beq.n	800b412 <_strtod_l+0x522>
 800b462:	f1b8 0f1f 	cmp.w	r8, #31
 800b466:	dd1f      	ble.n	800b4a8 <_strtod_l+0x5b8>
 800b468:	2500      	movs	r5, #0
 800b46a:	462e      	mov	r6, r5
 800b46c:	9507      	str	r5, [sp, #28]
 800b46e:	9505      	str	r5, [sp, #20]
 800b470:	2322      	movs	r3, #34	; 0x22
 800b472:	f04f 0a00 	mov.w	sl, #0
 800b476:	f04f 0b00 	mov.w	fp, #0
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	e786      	b.n	800b38c <_strtod_l+0x49c>
 800b47e:	bf00      	nop
 800b480:	0800ebd5 	.word	0x0800ebd5
 800b484:	0800ec10 	.word	0x0800ec10
 800b488:	0800ebcd 	.word	0x0800ebcd
 800b48c:	0800ed03 	.word	0x0800ed03
 800b490:	0800ecff 	.word	0x0800ecff
 800b494:	0800ee78 	.word	0x0800ee78
 800b498:	0800ee50 	.word	0x0800ee50
 800b49c:	7ff00000 	.word	0x7ff00000
 800b4a0:	7ca00000 	.word	0x7ca00000
 800b4a4:	7fefffff 	.word	0x7fefffff
 800b4a8:	f018 0310 	ands.w	r3, r8, #16
 800b4ac:	bf18      	it	ne
 800b4ae:	236a      	movne	r3, #106	; 0x6a
 800b4b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b860 <_strtod_l+0x970>
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f018 0f01 	tst.w	r8, #1
 800b4c0:	d004      	beq.n	800b4cc <_strtod_l+0x5dc>
 800b4c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4c6:	f7f5 f8cf 	bl	8000668 <__aeabi_dmul>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b4d0:	f109 0908 	add.w	r9, r9, #8
 800b4d4:	d1f2      	bne.n	800b4bc <_strtod_l+0x5cc>
 800b4d6:	b10b      	cbz	r3, 800b4dc <_strtod_l+0x5ec>
 800b4d8:	4682      	mov	sl, r0
 800b4da:	468b      	mov	fp, r1
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	b1c3      	cbz	r3, 800b512 <_strtod_l+0x622>
 800b4e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	dd11      	ble.n	800b512 <_strtod_l+0x622>
 800b4ee:	2b1f      	cmp	r3, #31
 800b4f0:	f340 8124 	ble.w	800b73c <_strtod_l+0x84c>
 800b4f4:	2b34      	cmp	r3, #52	; 0x34
 800b4f6:	bfde      	ittt	le
 800b4f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b4fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b500:	fa03 f202 	lslle.w	r2, r3, r2
 800b504:	f04f 0a00 	mov.w	sl, #0
 800b508:	bfcc      	ite	gt
 800b50a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b50e:	ea02 0b01 	andle.w	fp, r2, r1
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	f7f5 fb0d 	bl	8000b38 <__aeabi_dcmpeq>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1a2      	bne.n	800b468 <_strtod_l+0x578>
 800b522:	9b07      	ldr	r3, [sp, #28]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	9908      	ldr	r1, [sp, #32]
 800b528:	462b      	mov	r3, r5
 800b52a:	463a      	mov	r2, r7
 800b52c:	4620      	mov	r0, r4
 800b52e:	f001 fe3b 	bl	800d1a8 <__s2b>
 800b532:	9007      	str	r0, [sp, #28]
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f af1f 	beq.w	800b378 <_strtod_l+0x488>
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	1b9e      	subs	r6, r3, r6
 800b53e:	9b06      	ldr	r3, [sp, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfb4      	ite	lt
 800b544:	4633      	movlt	r3, r6
 800b546:	2300      	movge	r3, #0
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	9b06      	ldr	r3, [sp, #24]
 800b54c:	2500      	movs	r5, #0
 800b54e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b552:	9312      	str	r3, [sp, #72]	; 0x48
 800b554:	462e      	mov	r6, r5
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	4620      	mov	r0, r4
 800b55a:	6859      	ldr	r1, [r3, #4]
 800b55c:	f001 fd7c 	bl	800d058 <_Balloc>
 800b560:	9005      	str	r0, [sp, #20]
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f af0c 	beq.w	800b380 <_strtod_l+0x490>
 800b568:	9b07      	ldr	r3, [sp, #28]
 800b56a:	691a      	ldr	r2, [r3, #16]
 800b56c:	3202      	adds	r2, #2
 800b56e:	f103 010c 	add.w	r1, r3, #12
 800b572:	0092      	lsls	r2, r2, #2
 800b574:	300c      	adds	r0, #12
 800b576:	f001 fd61 	bl	800d03c <memcpy>
 800b57a:	ec4b ab10 	vmov	d0, sl, fp
 800b57e:	aa1a      	add	r2, sp, #104	; 0x68
 800b580:	a919      	add	r1, sp, #100	; 0x64
 800b582:	4620      	mov	r0, r4
 800b584:	f002 f956 	bl	800d834 <__d2b>
 800b588:	ec4b ab18 	vmov	d8, sl, fp
 800b58c:	9018      	str	r0, [sp, #96]	; 0x60
 800b58e:	2800      	cmp	r0, #0
 800b590:	f43f aef6 	beq.w	800b380 <_strtod_l+0x490>
 800b594:	2101      	movs	r1, #1
 800b596:	4620      	mov	r0, r4
 800b598:	f001 fea0 	bl	800d2dc <__i2b>
 800b59c:	4606      	mov	r6, r0
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f aeee 	beq.w	800b380 <_strtod_l+0x490>
 800b5a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5a6:	9904      	ldr	r1, [sp, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	bfab      	itete	ge
 800b5ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b5ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b5b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b5b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b5b6:	bfac      	ite	ge
 800b5b8:	eb03 0902 	addge.w	r9, r3, r2
 800b5bc:	1ad7      	sublt	r7, r2, r3
 800b5be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5c0:	eba3 0801 	sub.w	r8, r3, r1
 800b5c4:	4490      	add	r8, r2
 800b5c6:	4ba1      	ldr	r3, [pc, #644]	; (800b84c <_strtod_l+0x95c>)
 800b5c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5cc:	4598      	cmp	r8, r3
 800b5ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5d2:	f280 80c7 	bge.w	800b764 <_strtod_l+0x874>
 800b5d6:	eba3 0308 	sub.w	r3, r3, r8
 800b5da:	2b1f      	cmp	r3, #31
 800b5dc:	eba2 0203 	sub.w	r2, r2, r3
 800b5e0:	f04f 0101 	mov.w	r1, #1
 800b5e4:	f300 80b1 	bgt.w	800b74a <_strtod_l+0x85a>
 800b5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	eb09 0802 	add.w	r8, r9, r2
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	45c1      	cmp	r9, r8
 800b5fa:	4417      	add	r7, r2
 800b5fc:	441f      	add	r7, r3
 800b5fe:	464b      	mov	r3, r9
 800b600:	bfa8      	it	ge
 800b602:	4643      	movge	r3, r8
 800b604:	42bb      	cmp	r3, r7
 800b606:	bfa8      	it	ge
 800b608:	463b      	movge	r3, r7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfc2      	ittt	gt
 800b60e:	eba8 0803 	subgt.w	r8, r8, r3
 800b612:	1aff      	subgt	r7, r7, r3
 800b614:	eba9 0903 	subgt.w	r9, r9, r3
 800b618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd17      	ble.n	800b64e <_strtod_l+0x75e>
 800b61e:	4631      	mov	r1, r6
 800b620:	461a      	mov	r2, r3
 800b622:	4620      	mov	r0, r4
 800b624:	f001 ff1a 	bl	800d45c <__pow5mult>
 800b628:	4606      	mov	r6, r0
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f aea8 	beq.w	800b380 <_strtod_l+0x490>
 800b630:	4601      	mov	r1, r0
 800b632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b634:	4620      	mov	r0, r4
 800b636:	f001 fe67 	bl	800d308 <__multiply>
 800b63a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b63c:	2800      	cmp	r0, #0
 800b63e:	f43f ae9f 	beq.w	800b380 <_strtod_l+0x490>
 800b642:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b644:	4620      	mov	r0, r4
 800b646:	f001 fd47 	bl	800d0d8 <_Bfree>
 800b64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64c:	9318      	str	r3, [sp, #96]	; 0x60
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	f300 808c 	bgt.w	800b76e <_strtod_l+0x87e>
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dd08      	ble.n	800b66e <_strtod_l+0x77e>
 800b65c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b65e:	9905      	ldr	r1, [sp, #20]
 800b660:	4620      	mov	r0, r4
 800b662:	f001 fefb 	bl	800d45c <__pow5mult>
 800b666:	9005      	str	r0, [sp, #20]
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f ae89 	beq.w	800b380 <_strtod_l+0x490>
 800b66e:	2f00      	cmp	r7, #0
 800b670:	dd08      	ble.n	800b684 <_strtod_l+0x794>
 800b672:	9905      	ldr	r1, [sp, #20]
 800b674:	463a      	mov	r2, r7
 800b676:	4620      	mov	r0, r4
 800b678:	f001 ff4a 	bl	800d510 <__lshift>
 800b67c:	9005      	str	r0, [sp, #20]
 800b67e:	2800      	cmp	r0, #0
 800b680:	f43f ae7e 	beq.w	800b380 <_strtod_l+0x490>
 800b684:	f1b9 0f00 	cmp.w	r9, #0
 800b688:	dd08      	ble.n	800b69c <_strtod_l+0x7ac>
 800b68a:	4631      	mov	r1, r6
 800b68c:	464a      	mov	r2, r9
 800b68e:	4620      	mov	r0, r4
 800b690:	f001 ff3e 	bl	800d510 <__lshift>
 800b694:	4606      	mov	r6, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f ae72 	beq.w	800b380 <_strtod_l+0x490>
 800b69c:	9a05      	ldr	r2, [sp, #20]
 800b69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 ffc1 	bl	800d628 <__mdiff>
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	f43f ae69 	beq.w	800b380 <_strtod_l+0x490>
 800b6ae:	68c3      	ldr	r3, [r0, #12]
 800b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60c3      	str	r3, [r0, #12]
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	f001 ff9a 	bl	800d5f0 <__mcmp>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	da60      	bge.n	800b782 <_strtod_l+0x892>
 800b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6c6:	f040 8082 	bne.w	800b7ce <_strtod_l+0x8de>
 800b6ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d17d      	bne.n	800b7ce <_strtod_l+0x8de>
 800b6d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6d6:	0d1b      	lsrs	r3, r3, #20
 800b6d8:	051b      	lsls	r3, r3, #20
 800b6da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b6de:	d976      	bls.n	800b7ce <_strtod_l+0x8de>
 800b6e0:	696b      	ldr	r3, [r5, #20]
 800b6e2:	b913      	cbnz	r3, 800b6ea <_strtod_l+0x7fa>
 800b6e4:	692b      	ldr	r3, [r5, #16]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	dd71      	ble.n	800b7ce <_strtod_l+0x8de>
 800b6ea:	4629      	mov	r1, r5
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 ff0e 	bl	800d510 <__lshift>
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	f001 ff7a 	bl	800d5f0 <__mcmp>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dd66      	ble.n	800b7ce <_strtod_l+0x8de>
 800b700:	9904      	ldr	r1, [sp, #16]
 800b702:	4a53      	ldr	r2, [pc, #332]	; (800b850 <_strtod_l+0x960>)
 800b704:	465b      	mov	r3, fp
 800b706:	2900      	cmp	r1, #0
 800b708:	f000 8081 	beq.w	800b80e <_strtod_l+0x91e>
 800b70c:	ea02 010b 	and.w	r1, r2, fp
 800b710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b714:	dc7b      	bgt.n	800b80e <_strtod_l+0x91e>
 800b716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b71a:	f77f aea9 	ble.w	800b470 <_strtod_l+0x580>
 800b71e:	4b4d      	ldr	r3, [pc, #308]	; (800b854 <_strtod_l+0x964>)
 800b720:	4650      	mov	r0, sl
 800b722:	4659      	mov	r1, fp
 800b724:	2200      	movs	r2, #0
 800b726:	f7f4 ff9f 	bl	8000668 <__aeabi_dmul>
 800b72a:	460b      	mov	r3, r1
 800b72c:	4303      	orrs	r3, r0
 800b72e:	bf08      	it	eq
 800b730:	2322      	moveq	r3, #34	; 0x22
 800b732:	4682      	mov	sl, r0
 800b734:	468b      	mov	fp, r1
 800b736:	bf08      	it	eq
 800b738:	6023      	streq	r3, [r4, #0]
 800b73a:	e62b      	b.n	800b394 <_strtod_l+0x4a4>
 800b73c:	f04f 32ff 	mov.w	r2, #4294967295
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	ea03 0a0a 	and.w	sl, r3, sl
 800b748:	e6e3      	b.n	800b512 <_strtod_l+0x622>
 800b74a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b74e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b75a:	fa01 f308 	lsl.w	r3, r1, r8
 800b75e:	9308      	str	r3, [sp, #32]
 800b760:	910d      	str	r1, [sp, #52]	; 0x34
 800b762:	e746      	b.n	800b5f2 <_strtod_l+0x702>
 800b764:	2300      	movs	r3, #0
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	2301      	movs	r3, #1
 800b76a:	930d      	str	r3, [sp, #52]	; 0x34
 800b76c:	e741      	b.n	800b5f2 <_strtod_l+0x702>
 800b76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b770:	4642      	mov	r2, r8
 800b772:	4620      	mov	r0, r4
 800b774:	f001 fecc 	bl	800d510 <__lshift>
 800b778:	9018      	str	r0, [sp, #96]	; 0x60
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f47f af6b 	bne.w	800b656 <_strtod_l+0x766>
 800b780:	e5fe      	b.n	800b380 <_strtod_l+0x490>
 800b782:	465f      	mov	r7, fp
 800b784:	d16e      	bne.n	800b864 <_strtod_l+0x974>
 800b786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b78c:	b342      	cbz	r2, 800b7e0 <_strtod_l+0x8f0>
 800b78e:	4a32      	ldr	r2, [pc, #200]	; (800b858 <_strtod_l+0x968>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d128      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b794:	9b04      	ldr	r3, [sp, #16]
 800b796:	4651      	mov	r1, sl
 800b798:	b1eb      	cbz	r3, 800b7d6 <_strtod_l+0x8e6>
 800b79a:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <_strtod_l+0x960>)
 800b79c:	403b      	ands	r3, r7
 800b79e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7a6:	d819      	bhi.n	800b7dc <_strtod_l+0x8ec>
 800b7a8:	0d1b      	lsrs	r3, r3, #20
 800b7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	d117      	bne.n	800b7e6 <_strtod_l+0x8f6>
 800b7b6:	4b29      	ldr	r3, [pc, #164]	; (800b85c <_strtod_l+0x96c>)
 800b7b8:	429f      	cmp	r7, r3
 800b7ba:	d102      	bne.n	800b7c2 <_strtod_l+0x8d2>
 800b7bc:	3101      	adds	r1, #1
 800b7be:	f43f addf 	beq.w	800b380 <_strtod_l+0x490>
 800b7c2:	4b23      	ldr	r3, [pc, #140]	; (800b850 <_strtod_l+0x960>)
 800b7c4:	403b      	ands	r3, r7
 800b7c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b7ca:	f04f 0a00 	mov.w	sl, #0
 800b7ce:	9b04      	ldr	r3, [sp, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1a4      	bne.n	800b71e <_strtod_l+0x82e>
 800b7d4:	e5de      	b.n	800b394 <_strtod_l+0x4a4>
 800b7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7da:	e7ea      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7dc:	4613      	mov	r3, r2
 800b7de:	e7e8      	b.n	800b7b2 <_strtod_l+0x8c2>
 800b7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b7e4:	d08c      	beq.n	800b700 <_strtod_l+0x810>
 800b7e6:	9b08      	ldr	r3, [sp, #32]
 800b7e8:	b1db      	cbz	r3, 800b822 <_strtod_l+0x932>
 800b7ea:	423b      	tst	r3, r7
 800b7ec:	d0ef      	beq.n	800b7ce <_strtod_l+0x8de>
 800b7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f0:	9a04      	ldr	r2, [sp, #16]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	b1c3      	cbz	r3, 800b82a <_strtod_l+0x93a>
 800b7f8:	f7ff fb5c 	bl	800aeb4 <sulp>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	ec51 0b18 	vmov	r0, r1, d8
 800b804:	f7f4 fd7a 	bl	80002fc <__adddf3>
 800b808:	4682      	mov	sl, r0
 800b80a:	468b      	mov	fp, r1
 800b80c:	e7df      	b.n	800b7ce <_strtod_l+0x8de>
 800b80e:	4013      	ands	r3, r2
 800b810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b81c:	f04f 3aff 	mov.w	sl, #4294967295
 800b820:	e7d5      	b.n	800b7ce <_strtod_l+0x8de>
 800b822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b824:	ea13 0f0a 	tst.w	r3, sl
 800b828:	e7e0      	b.n	800b7ec <_strtod_l+0x8fc>
 800b82a:	f7ff fb43 	bl	800aeb4 <sulp>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	ec51 0b18 	vmov	r0, r1, d8
 800b836:	f7f4 fd5f 	bl	80002f8 <__aeabi_dsub>
 800b83a:	2200      	movs	r2, #0
 800b83c:	2300      	movs	r3, #0
 800b83e:	4682      	mov	sl, r0
 800b840:	468b      	mov	fp, r1
 800b842:	f7f5 f979 	bl	8000b38 <__aeabi_dcmpeq>
 800b846:	2800      	cmp	r0, #0
 800b848:	d0c1      	beq.n	800b7ce <_strtod_l+0x8de>
 800b84a:	e611      	b.n	800b470 <_strtod_l+0x580>
 800b84c:	fffffc02 	.word	0xfffffc02
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	39500000 	.word	0x39500000
 800b858:	000fffff 	.word	0x000fffff
 800b85c:	7fefffff 	.word	0x7fefffff
 800b860:	0800ec28 	.word	0x0800ec28
 800b864:	4631      	mov	r1, r6
 800b866:	4628      	mov	r0, r5
 800b868:	f002 f840 	bl	800d8ec <__ratio>
 800b86c:	ec59 8b10 	vmov	r8, r9, d0
 800b870:	ee10 0a10 	vmov	r0, s0
 800b874:	2200      	movs	r2, #0
 800b876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f5 f970 	bl	8000b60 <__aeabi_dcmple>
 800b880:	2800      	cmp	r0, #0
 800b882:	d07a      	beq.n	800b97a <_strtod_l+0xa8a>
 800b884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b886:	2b00      	cmp	r3, #0
 800b888:	d04a      	beq.n	800b920 <_strtod_l+0xa30>
 800b88a:	4b95      	ldr	r3, [pc, #596]	; (800bae0 <_strtod_l+0xbf0>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bae0 <_strtod_l+0xbf0>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <_strtod_l+0xbf4>)
 800b89c:	403b      	ands	r3, r7
 800b89e:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8a2:	4b91      	ldr	r3, [pc, #580]	; (800bae8 <_strtod_l+0xbf8>)
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	f040 80b0 	bne.w	800ba0a <_strtod_l+0xb1a>
 800b8aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b8b2:	ec4b ab10 	vmov	d0, sl, fp
 800b8b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8ba:	f001 ff3f 	bl	800d73c <__ulp>
 800b8be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8c2:	ec53 2b10 	vmov	r2, r3, d0
 800b8c6:	f7f4 fecf 	bl	8000668 <__aeabi_dmul>
 800b8ca:	4652      	mov	r2, sl
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	f7f4 fd15 	bl	80002fc <__adddf3>
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4983      	ldr	r1, [pc, #524]	; (800bae4 <_strtod_l+0xbf4>)
 800b8d6:	4a85      	ldr	r2, [pc, #532]	; (800baec <_strtod_l+0xbfc>)
 800b8d8:	4019      	ands	r1, r3
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	4682      	mov	sl, r0
 800b8de:	d960      	bls.n	800b9a2 <_strtod_l+0xab2>
 800b8e0:	ee18 3a90 	vmov	r3, s17
 800b8e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d104      	bne.n	800b8f6 <_strtod_l+0xa06>
 800b8ec:	ee18 3a10 	vmov	r3, s16
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	f43f ad45 	beq.w	800b380 <_strtod_l+0x490>
 800b8f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800baf8 <_strtod_l+0xc08>
 800b8fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b900:	4620      	mov	r0, r4
 800b902:	f001 fbe9 	bl	800d0d8 <_Bfree>
 800b906:	9905      	ldr	r1, [sp, #20]
 800b908:	4620      	mov	r0, r4
 800b90a:	f001 fbe5 	bl	800d0d8 <_Bfree>
 800b90e:	4631      	mov	r1, r6
 800b910:	4620      	mov	r0, r4
 800b912:	f001 fbe1 	bl	800d0d8 <_Bfree>
 800b916:	4629      	mov	r1, r5
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 fbdd 	bl	800d0d8 <_Bfree>
 800b91e:	e61a      	b.n	800b556 <_strtod_l+0x666>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d11b      	bne.n	800b95e <_strtod_l+0xa6e>
 800b926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b92a:	b9f3      	cbnz	r3, 800b96a <_strtod_l+0xa7a>
 800b92c:	4b6c      	ldr	r3, [pc, #432]	; (800bae0 <_strtod_l+0xbf0>)
 800b92e:	2200      	movs	r2, #0
 800b930:	4640      	mov	r0, r8
 800b932:	4649      	mov	r1, r9
 800b934:	f7f5 f90a 	bl	8000b4c <__aeabi_dcmplt>
 800b938:	b9d0      	cbnz	r0, 800b970 <_strtod_l+0xa80>
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	4b6c      	ldr	r3, [pc, #432]	; (800baf0 <_strtod_l+0xc00>)
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe91 	bl	8000668 <__aeabi_dmul>
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b94e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b952:	9315      	str	r3, [sp, #84]	; 0x54
 800b954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b95c:	e79d      	b.n	800b89a <_strtod_l+0x9aa>
 800b95e:	f1ba 0f01 	cmp.w	sl, #1
 800b962:	d102      	bne.n	800b96a <_strtod_l+0xa7a>
 800b964:	2f00      	cmp	r7, #0
 800b966:	f43f ad83 	beq.w	800b470 <_strtod_l+0x580>
 800b96a:	4b62      	ldr	r3, [pc, #392]	; (800baf4 <_strtod_l+0xc04>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	e78e      	b.n	800b88e <_strtod_l+0x99e>
 800b970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800baf0 <_strtod_l+0xc00>
 800b974:	f04f 0800 	mov.w	r8, #0
 800b978:	e7e7      	b.n	800b94a <_strtod_l+0xa5a>
 800b97a:	4b5d      	ldr	r3, [pc, #372]	; (800baf0 <_strtod_l+0xc00>)
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	2200      	movs	r2, #0
 800b982:	f7f4 fe71 	bl	8000668 <__aeabi_dmul>
 800b986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b988:	4680      	mov	r8, r0
 800b98a:	4689      	mov	r9, r1
 800b98c:	b933      	cbnz	r3, 800b99c <_strtod_l+0xaac>
 800b98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b992:	900e      	str	r0, [sp, #56]	; 0x38
 800b994:	930f      	str	r3, [sp, #60]	; 0x3c
 800b996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b99a:	e7dd      	b.n	800b958 <_strtod_l+0xa68>
 800b99c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b9a0:	e7f9      	b.n	800b996 <_strtod_l+0xaa6>
 800b9a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1a8      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9b2:	0d1b      	lsrs	r3, r3, #20
 800b9b4:	051b      	lsls	r3, r3, #20
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d1a1      	bne.n	800b8fe <_strtod_l+0xa0e>
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f5 f9b3 	bl	8000d28 <__aeabi_d2lz>
 800b9c2:	f7f4 fe23 	bl	800060c <__aeabi_l2d>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fc93 	bl	80002f8 <__aeabi_dsub>
 800b9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9d8:	ea43 030a 	orr.w	r3, r3, sl
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	4680      	mov	r8, r0
 800b9e0:	4689      	mov	r9, r1
 800b9e2:	d055      	beq.n	800ba90 <_strtod_l+0xba0>
 800b9e4:	a336      	add	r3, pc, #216	; (adr r3, 800bac0 <_strtod_l+0xbd0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f5 f8af 	bl	8000b4c <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f47f acd0 	bne.w	800b394 <_strtod_l+0x4a4>
 800b9f4:	a334      	add	r3, pc, #208	; (adr r3, 800bac8 <_strtod_l+0xbd8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f5 f8c3 	bl	8000b88 <__aeabi_dcmpgt>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	f43f af7b 	beq.w	800b8fe <_strtod_l+0xa0e>
 800ba08:	e4c4      	b.n	800b394 <_strtod_l+0x4a4>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	b333      	cbz	r3, 800ba5c <_strtod_l+0xb6c>
 800ba0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba14:	d822      	bhi.n	800ba5c <_strtod_l+0xb6c>
 800ba16:	a32e      	add	r3, pc, #184	; (adr r3, 800bad0 <_strtod_l+0xbe0>)
 800ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f5 f89e 	bl	8000b60 <__aeabi_dcmple>
 800ba24:	b1a0      	cbz	r0, 800ba50 <_strtod_l+0xb60>
 800ba26:	4649      	mov	r1, r9
 800ba28:	4640      	mov	r0, r8
 800ba2a:	f7f5 f8f5 	bl	8000c18 <__aeabi_d2uiz>
 800ba2e:	2801      	cmp	r0, #1
 800ba30:	bf38      	it	cc
 800ba32:	2001      	movcc	r0, #1
 800ba34:	f7f4 fd9e 	bl	8000574 <__aeabi_ui2d>
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	bb23      	cbnz	r3, 800ba8a <_strtod_l+0xb9a>
 800ba40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba44:	9010      	str	r0, [sp, #64]	; 0x40
 800ba46:	9311      	str	r3, [sp, #68]	; 0x44
 800ba48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba58:	1a9b      	subs	r3, r3, r2
 800ba5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba60:	eeb0 0a48 	vmov.f32	s0, s16
 800ba64:	eef0 0a68 	vmov.f32	s1, s17
 800ba68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba6c:	f001 fe66 	bl	800d73c <__ulp>
 800ba70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba74:	ec53 2b10 	vmov	r2, r3, d0
 800ba78:	f7f4 fdf6 	bl	8000668 <__aeabi_dmul>
 800ba7c:	ec53 2b18 	vmov	r2, r3, d8
 800ba80:	f7f4 fc3c 	bl	80002fc <__adddf3>
 800ba84:	4682      	mov	sl, r0
 800ba86:	468b      	mov	fp, r1
 800ba88:	e78d      	b.n	800b9a6 <_strtod_l+0xab6>
 800ba8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba8e:	e7db      	b.n	800ba48 <_strtod_l+0xb58>
 800ba90:	a311      	add	r3, pc, #68	; (adr r3, 800bad8 <_strtod_l+0xbe8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f5 f859 	bl	8000b4c <__aeabi_dcmplt>
 800ba9a:	e7b2      	b.n	800ba02 <_strtod_l+0xb12>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	930a      	str	r3, [sp, #40]	; 0x28
 800baa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	f7ff ba6b 	b.w	800af80 <_strtod_l+0x90>
 800baaa:	2a65      	cmp	r2, #101	; 0x65
 800baac:	f43f ab5f 	beq.w	800b16e <_strtod_l+0x27e>
 800bab0:	2a45      	cmp	r2, #69	; 0x45
 800bab2:	f43f ab5c 	beq.w	800b16e <_strtod_l+0x27e>
 800bab6:	2301      	movs	r3, #1
 800bab8:	f7ff bb94 	b.w	800b1e4 <_strtod_l+0x2f4>
 800babc:	f3af 8000 	nop.w
 800bac0:	94a03595 	.word	0x94a03595
 800bac4:	3fdfffff 	.word	0x3fdfffff
 800bac8:	35afe535 	.word	0x35afe535
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	ffc00000 	.word	0xffc00000
 800bad4:	41dfffff 	.word	0x41dfffff
 800bad8:	94a03595 	.word	0x94a03595
 800badc:	3fcfffff 	.word	0x3fcfffff
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	7ff00000 	.word	0x7ff00000
 800bae8:	7fe00000 	.word	0x7fe00000
 800baec:	7c9fffff 	.word	0x7c9fffff
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	bff00000 	.word	0xbff00000
 800baf8:	7fefffff 	.word	0x7fefffff

0800bafc <strtod>:
 800bafc:	460a      	mov	r2, r1
 800bafe:	4601      	mov	r1, r0
 800bb00:	4802      	ldr	r0, [pc, #8]	; (800bb0c <strtod+0x10>)
 800bb02:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <strtod+0x14>)
 800bb04:	6800      	ldr	r0, [r0, #0]
 800bb06:	f7ff b9f3 	b.w	800aef0 <_strtod_l>
 800bb0a:	bf00      	nop
 800bb0c:	20000010 	.word	0x20000010
 800bb10:	20000078 	.word	0x20000078

0800bb14 <strtok>:
 800bb14:	4b16      	ldr	r3, [pc, #88]	; (800bb70 <strtok+0x5c>)
 800bb16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb18:	681e      	ldr	r6, [r3, #0]
 800bb1a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b9fc      	cbnz	r4, 800bb60 <strtok+0x4c>
 800bb20:	2050      	movs	r0, #80	; 0x50
 800bb22:	9101      	str	r1, [sp, #4]
 800bb24:	f001 fa70 	bl	800d008 <malloc>
 800bb28:	9901      	ldr	r1, [sp, #4]
 800bb2a:	65b0      	str	r0, [r6, #88]	; 0x58
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	b920      	cbnz	r0, 800bb3a <strtok+0x26>
 800bb30:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <strtok+0x60>)
 800bb32:	4811      	ldr	r0, [pc, #68]	; (800bb78 <strtok+0x64>)
 800bb34:	2157      	movs	r1, #87	; 0x57
 800bb36:	f000 f849 	bl	800bbcc <__assert_func>
 800bb3a:	e9c0 4400 	strd	r4, r4, [r0]
 800bb3e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bb42:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bb46:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bb4a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bb4e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bb52:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bb56:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bb5a:	6184      	str	r4, [r0, #24]
 800bb5c:	7704      	strb	r4, [r0, #28]
 800bb5e:	6244      	str	r4, [r0, #36]	; 0x24
 800bb60:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800bb62:	2301      	movs	r3, #1
 800bb64:	4628      	mov	r0, r5
 800bb66:	b002      	add	sp, #8
 800bb68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb6c:	f000 b806 	b.w	800bb7c <__strtok_r>
 800bb70:	20000010 	.word	0x20000010
 800bb74:	0800ec50 	.word	0x0800ec50
 800bb78:	0800ec67 	.word	0x0800ec67

0800bb7c <__strtok_r>:
 800bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7e:	b908      	cbnz	r0, 800bb84 <__strtok_r+0x8>
 800bb80:	6810      	ldr	r0, [r2, #0]
 800bb82:	b188      	cbz	r0, 800bba8 <__strtok_r+0x2c>
 800bb84:	4604      	mov	r4, r0
 800bb86:	4620      	mov	r0, r4
 800bb88:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb8c:	460f      	mov	r7, r1
 800bb8e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb92:	b91e      	cbnz	r6, 800bb9c <__strtok_r+0x20>
 800bb94:	b965      	cbnz	r5, 800bbb0 <__strtok_r+0x34>
 800bb96:	6015      	str	r5, [r2, #0]
 800bb98:	4628      	mov	r0, r5
 800bb9a:	e005      	b.n	800bba8 <__strtok_r+0x2c>
 800bb9c:	42b5      	cmp	r5, r6
 800bb9e:	d1f6      	bne.n	800bb8e <__strtok_r+0x12>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1f0      	bne.n	800bb86 <__strtok_r+0xa>
 800bba4:	6014      	str	r4, [r2, #0]
 800bba6:	7003      	strb	r3, [r0, #0]
 800bba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbaa:	461c      	mov	r4, r3
 800bbac:	e00c      	b.n	800bbc8 <__strtok_r+0x4c>
 800bbae:	b915      	cbnz	r5, 800bbb6 <__strtok_r+0x3a>
 800bbb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bbba:	42ab      	cmp	r3, r5
 800bbbc:	d1f7      	bne.n	800bbae <__strtok_r+0x32>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0f3      	beq.n	800bbaa <__strtok_r+0x2e>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bbc8:	6014      	str	r4, [r2, #0]
 800bbca:	e7ed      	b.n	800bba8 <__strtok_r+0x2c>

0800bbcc <__assert_func>:
 800bbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbce:	4614      	mov	r4, r2
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	4b09      	ldr	r3, [pc, #36]	; (800bbf8 <__assert_func+0x2c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	68d8      	ldr	r0, [r3, #12]
 800bbda:	b14c      	cbz	r4, 800bbf0 <__assert_func+0x24>
 800bbdc:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <__assert_func+0x30>)
 800bbde:	9100      	str	r1, [sp, #0]
 800bbe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbe4:	4906      	ldr	r1, [pc, #24]	; (800bc00 <__assert_func+0x34>)
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	f000 fe88 	bl	800c8fc <fiprintf>
 800bbec:	f002 fb9e 	bl	800e32c <abort>
 800bbf0:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <__assert_func+0x38>)
 800bbf2:	461c      	mov	r4, r3
 800bbf4:	e7f3      	b.n	800bbde <__assert_func+0x12>
 800bbf6:	bf00      	nop
 800bbf8:	20000010 	.word	0x20000010
 800bbfc:	0800ecc4 	.word	0x0800ecc4
 800bc00:	0800ecd1 	.word	0x0800ecd1
 800bc04:	0800ecff 	.word	0x0800ecff

0800bc08 <quorem>:
 800bc08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	6903      	ldr	r3, [r0, #16]
 800bc0e:	690c      	ldr	r4, [r1, #16]
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	4607      	mov	r7, r0
 800bc14:	f2c0 8081 	blt.w	800bd1a <quorem+0x112>
 800bc18:	3c01      	subs	r4, #1
 800bc1a:	f101 0814 	add.w	r8, r1, #20
 800bc1e:	f100 0514 	add.w	r5, r0, #20
 800bc22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc30:	3301      	adds	r3, #1
 800bc32:	429a      	cmp	r2, r3
 800bc34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc40:	d331      	bcc.n	800bca6 <quorem+0x9e>
 800bc42:	f04f 0e00 	mov.w	lr, #0
 800bc46:	4640      	mov	r0, r8
 800bc48:	46ac      	mov	ip, r5
 800bc4a:	46f2      	mov	sl, lr
 800bc4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc50:	b293      	uxth	r3, r2
 800bc52:	fb06 e303 	mla	r3, r6, r3, lr
 800bc56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc60:	f8dc a000 	ldr.w	sl, [ip]
 800bc64:	0c12      	lsrs	r2, r2, #16
 800bc66:	fa13 f38a 	uxtah	r3, r3, sl
 800bc6a:	fb06 e202 	mla	r2, r6, r2, lr
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc76:	b292      	uxth	r2, r2
 800bc78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc80:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc84:	4581      	cmp	r9, r0
 800bc86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc8a:	f84c 3b04 	str.w	r3, [ip], #4
 800bc8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc92:	d2db      	bcs.n	800bc4c <quorem+0x44>
 800bc94:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc98:	b92b      	cbnz	r3, 800bca6 <quorem+0x9e>
 800bc9a:	9b01      	ldr	r3, [sp, #4]
 800bc9c:	3b04      	subs	r3, #4
 800bc9e:	429d      	cmp	r5, r3
 800bca0:	461a      	mov	r2, r3
 800bca2:	d32e      	bcc.n	800bd02 <quorem+0xfa>
 800bca4:	613c      	str	r4, [r7, #16]
 800bca6:	4638      	mov	r0, r7
 800bca8:	f001 fca2 	bl	800d5f0 <__mcmp>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	db24      	blt.n	800bcfa <quorem+0xf2>
 800bcb0:	3601      	adds	r6, #1
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f04f 0c00 	mov.w	ip, #0
 800bcb8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcbc:	f8d0 e000 	ldr.w	lr, [r0]
 800bcc0:	b293      	uxth	r3, r2
 800bcc2:	ebac 0303 	sub.w	r3, ip, r3
 800bcc6:	0c12      	lsrs	r2, r2, #16
 800bcc8:	fa13 f38e 	uxtah	r3, r3, lr
 800bccc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcda:	45c1      	cmp	r9, r8
 800bcdc:	f840 3b04 	str.w	r3, [r0], #4
 800bce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bce4:	d2e8      	bcs.n	800bcb8 <quorem+0xb0>
 800bce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcee:	b922      	cbnz	r2, 800bcfa <quorem+0xf2>
 800bcf0:	3b04      	subs	r3, #4
 800bcf2:	429d      	cmp	r5, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	d30a      	bcc.n	800bd0e <quorem+0x106>
 800bcf8:	613c      	str	r4, [r7, #16]
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	b003      	add	sp, #12
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	3b04      	subs	r3, #4
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	d1cc      	bne.n	800bca4 <quorem+0x9c>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	e7c7      	b.n	800bc9e <quorem+0x96>
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	3b04      	subs	r3, #4
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	d1f0      	bne.n	800bcf8 <quorem+0xf0>
 800bd16:	3c01      	subs	r4, #1
 800bd18:	e7eb      	b.n	800bcf2 <quorem+0xea>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7ee      	b.n	800bcfc <quorem+0xf4>
	...

0800bd20 <_dtoa_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ed2d 8b04 	vpush	{d8-d9}
 800bd28:	ec57 6b10 	vmov	r6, r7, d0
 800bd2c:	b093      	sub	sp, #76	; 0x4c
 800bd2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd34:	9106      	str	r1, [sp, #24]
 800bd36:	ee10 aa10 	vmov	sl, s0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd40:	46bb      	mov	fp, r7
 800bd42:	b975      	cbnz	r5, 800bd62 <_dtoa_r+0x42>
 800bd44:	2010      	movs	r0, #16
 800bd46:	f001 f95f 	bl	800d008 <malloc>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd4e:	b920      	cbnz	r0, 800bd5a <_dtoa_r+0x3a>
 800bd50:	4ba7      	ldr	r3, [pc, #668]	; (800bff0 <_dtoa_r+0x2d0>)
 800bd52:	21ea      	movs	r1, #234	; 0xea
 800bd54:	48a7      	ldr	r0, [pc, #668]	; (800bff4 <_dtoa_r+0x2d4>)
 800bd56:	f7ff ff39 	bl	800bbcc <__assert_func>
 800bd5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd5e:	6005      	str	r5, [r0, #0]
 800bd60:	60c5      	str	r5, [r0, #12]
 800bd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd64:	6819      	ldr	r1, [r3, #0]
 800bd66:	b151      	cbz	r1, 800bd7e <_dtoa_r+0x5e>
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	604a      	str	r2, [r1, #4]
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	4093      	lsls	r3, r2
 800bd70:	608b      	str	r3, [r1, #8]
 800bd72:	4620      	mov	r0, r4
 800bd74:	f001 f9b0 	bl	800d0d8 <_Bfree>
 800bd78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	1e3b      	subs	r3, r7, #0
 800bd80:	bfaa      	itet	ge
 800bd82:	2300      	movge	r3, #0
 800bd84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd88:	f8c8 3000 	strge.w	r3, [r8]
 800bd8c:	4b9a      	ldr	r3, [pc, #616]	; (800bff8 <_dtoa_r+0x2d8>)
 800bd8e:	bfbc      	itt	lt
 800bd90:	2201      	movlt	r2, #1
 800bd92:	f8c8 2000 	strlt.w	r2, [r8]
 800bd96:	ea33 030b 	bics.w	r3, r3, fp
 800bd9a:	d11b      	bne.n	800bdd4 <_dtoa_r+0xb4>
 800bd9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bda8:	4333      	orrs	r3, r6
 800bdaa:	f000 8592 	beq.w	800c8d2 <_dtoa_r+0xbb2>
 800bdae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb0:	b963      	cbnz	r3, 800bdcc <_dtoa_r+0xac>
 800bdb2:	4b92      	ldr	r3, [pc, #584]	; (800bffc <_dtoa_r+0x2dc>)
 800bdb4:	e022      	b.n	800bdfc <_dtoa_r+0xdc>
 800bdb6:	4b92      	ldr	r3, [pc, #584]	; (800c000 <_dtoa_r+0x2e0>)
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	3308      	adds	r3, #8
 800bdbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	9801      	ldr	r0, [sp, #4]
 800bdc2:	b013      	add	sp, #76	; 0x4c
 800bdc4:	ecbd 8b04 	vpop	{d8-d9}
 800bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdcc:	4b8b      	ldr	r3, [pc, #556]	; (800bffc <_dtoa_r+0x2dc>)
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	3303      	adds	r3, #3
 800bdd2:	e7f3      	b.n	800bdbc <_dtoa_r+0x9c>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4650      	mov	r0, sl
 800bdda:	4659      	mov	r1, fp
 800bddc:	f7f4 feac 	bl	8000b38 <__aeabi_dcmpeq>
 800bde0:	ec4b ab19 	vmov	d9, sl, fp
 800bde4:	4680      	mov	r8, r0
 800bde6:	b158      	cbz	r0, 800be00 <_dtoa_r+0xe0>
 800bde8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdea:	2301      	movs	r3, #1
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 856b 	beq.w	800c8cc <_dtoa_r+0xbac>
 800bdf6:	4883      	ldr	r0, [pc, #524]	; (800c004 <_dtoa_r+0x2e4>)
 800bdf8:	6018      	str	r0, [r3, #0]
 800bdfa:	1e43      	subs	r3, r0, #1
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	e7df      	b.n	800bdc0 <_dtoa_r+0xa0>
 800be00:	ec4b ab10 	vmov	d0, sl, fp
 800be04:	aa10      	add	r2, sp, #64	; 0x40
 800be06:	a911      	add	r1, sp, #68	; 0x44
 800be08:	4620      	mov	r0, r4
 800be0a:	f001 fd13 	bl	800d834 <__d2b>
 800be0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be12:	ee08 0a10 	vmov	s16, r0
 800be16:	2d00      	cmp	r5, #0
 800be18:	f000 8084 	beq.w	800bf24 <_dtoa_r+0x204>
 800be1c:	ee19 3a90 	vmov	r3, s19
 800be20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be28:	4656      	mov	r6, sl
 800be2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be36:	4b74      	ldr	r3, [pc, #464]	; (800c008 <_dtoa_r+0x2e8>)
 800be38:	2200      	movs	r2, #0
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fa5b 	bl	80002f8 <__aeabi_dsub>
 800be42:	a365      	add	r3, pc, #404	; (adr r3, 800bfd8 <_dtoa_r+0x2b8>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 fc0e 	bl	8000668 <__aeabi_dmul>
 800be4c:	a364      	add	r3, pc, #400	; (adr r3, 800bfe0 <_dtoa_r+0x2c0>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fa53 	bl	80002fc <__adddf3>
 800be56:	4606      	mov	r6, r0
 800be58:	4628      	mov	r0, r5
 800be5a:	460f      	mov	r7, r1
 800be5c:	f7f4 fb9a 	bl	8000594 <__aeabi_i2d>
 800be60:	a361      	add	r3, pc, #388	; (adr r3, 800bfe8 <_dtoa_r+0x2c8>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 fbff 	bl	8000668 <__aeabi_dmul>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fa43 	bl	80002fc <__adddf3>
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	f7f4 fea5 	bl	8000bc8 <__aeabi_d2iz>
 800be7e:	2200      	movs	r2, #0
 800be80:	9000      	str	r0, [sp, #0]
 800be82:	2300      	movs	r3, #0
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fe60 	bl	8000b4c <__aeabi_dcmplt>
 800be8c:	b150      	cbz	r0, 800bea4 <_dtoa_r+0x184>
 800be8e:	9800      	ldr	r0, [sp, #0]
 800be90:	f7f4 fb80 	bl	8000594 <__aeabi_i2d>
 800be94:	4632      	mov	r2, r6
 800be96:	463b      	mov	r3, r7
 800be98:	f7f4 fe4e 	bl	8000b38 <__aeabi_dcmpeq>
 800be9c:	b910      	cbnz	r0, 800bea4 <_dtoa_r+0x184>
 800be9e:	9b00      	ldr	r3, [sp, #0]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	9b00      	ldr	r3, [sp, #0]
 800bea6:	2b16      	cmp	r3, #22
 800bea8:	d85a      	bhi.n	800bf60 <_dtoa_r+0x240>
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	4b57      	ldr	r3, [pc, #348]	; (800c00c <_dtoa_r+0x2ec>)
 800beae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	ec51 0b19 	vmov	r0, r1, d9
 800beba:	f7f4 fe47 	bl	8000b4c <__aeabi_dcmplt>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d050      	beq.n	800bf64 <_dtoa_r+0x244>
 800bec2:	9b00      	ldr	r3, [sp, #0]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	2300      	movs	r3, #0
 800beca:	930b      	str	r3, [sp, #44]	; 0x2c
 800becc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bece:	1b5d      	subs	r5, r3, r5
 800bed0:	1e6b      	subs	r3, r5, #1
 800bed2:	9305      	str	r3, [sp, #20]
 800bed4:	bf45      	ittet	mi
 800bed6:	f1c5 0301 	rsbmi	r3, r5, #1
 800beda:	9304      	strmi	r3, [sp, #16]
 800bedc:	2300      	movpl	r3, #0
 800bede:	2300      	movmi	r3, #0
 800bee0:	bf4c      	ite	mi
 800bee2:	9305      	strmi	r3, [sp, #20]
 800bee4:	9304      	strpl	r3, [sp, #16]
 800bee6:	9b00      	ldr	r3, [sp, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	db3d      	blt.n	800bf68 <_dtoa_r+0x248>
 800beec:	9b05      	ldr	r3, [sp, #20]
 800beee:	9a00      	ldr	r2, [sp, #0]
 800bef0:	920a      	str	r2, [sp, #40]	; 0x28
 800bef2:	4413      	add	r3, r2
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	2300      	movs	r3, #0
 800bef8:	9307      	str	r3, [sp, #28]
 800befa:	9b06      	ldr	r3, [sp, #24]
 800befc:	2b09      	cmp	r3, #9
 800befe:	f200 8089 	bhi.w	800c014 <_dtoa_r+0x2f4>
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	bfc4      	itt	gt
 800bf06:	3b04      	subgt	r3, #4
 800bf08:	9306      	strgt	r3, [sp, #24]
 800bf0a:	9b06      	ldr	r3, [sp, #24]
 800bf0c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf10:	bfcc      	ite	gt
 800bf12:	2500      	movgt	r5, #0
 800bf14:	2501      	movle	r5, #1
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	f200 8087 	bhi.w	800c02a <_dtoa_r+0x30a>
 800bf1c:	e8df f003 	tbb	[pc, r3]
 800bf20:	59383a2d 	.word	0x59383a2d
 800bf24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf28:	441d      	add	r5, r3
 800bf2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf2e:	2b20      	cmp	r3, #32
 800bf30:	bfc1      	itttt	gt
 800bf32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf42:	bfda      	itte	le
 800bf44:	f1c3 0320 	rsble	r3, r3, #32
 800bf48:	fa06 f003 	lslle.w	r0, r6, r3
 800bf4c:	4318      	orrgt	r0, r3
 800bf4e:	f7f4 fb11 	bl	8000574 <__aeabi_ui2d>
 800bf52:	2301      	movs	r3, #1
 800bf54:	4606      	mov	r6, r0
 800bf56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf5a:	3d01      	subs	r5, #1
 800bf5c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf5e:	e76a      	b.n	800be36 <_dtoa_r+0x116>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e7b2      	b.n	800beca <_dtoa_r+0x1aa>
 800bf64:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf66:	e7b1      	b.n	800becc <_dtoa_r+0x1ac>
 800bf68:	9b04      	ldr	r3, [sp, #16]
 800bf6a:	9a00      	ldr	r2, [sp, #0]
 800bf6c:	1a9b      	subs	r3, r3, r2
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	4253      	negs	r3, r2
 800bf72:	9307      	str	r3, [sp, #28]
 800bf74:	2300      	movs	r3, #0
 800bf76:	930a      	str	r3, [sp, #40]	; 0x28
 800bf78:	e7bf      	b.n	800befa <_dtoa_r+0x1da>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	9308      	str	r3, [sp, #32]
 800bf7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dc55      	bgt.n	800c030 <_dtoa_r+0x310>
 800bf84:	2301      	movs	r3, #1
 800bf86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf8e:	e00c      	b.n	800bfaa <_dtoa_r+0x28a>
 800bf90:	2301      	movs	r3, #1
 800bf92:	e7f3      	b.n	800bf7c <_dtoa_r+0x25c>
 800bf94:	2300      	movs	r3, #0
 800bf96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf98:	9308      	str	r3, [sp, #32]
 800bf9a:	9b00      	ldr	r3, [sp, #0]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	9303      	str	r3, [sp, #12]
 800bfa6:	bfb8      	it	lt
 800bfa8:	2301      	movlt	r3, #1
 800bfaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfac:	2200      	movs	r2, #0
 800bfae:	6042      	str	r2, [r0, #4]
 800bfb0:	2204      	movs	r2, #4
 800bfb2:	f102 0614 	add.w	r6, r2, #20
 800bfb6:	429e      	cmp	r6, r3
 800bfb8:	6841      	ldr	r1, [r0, #4]
 800bfba:	d93d      	bls.n	800c038 <_dtoa_r+0x318>
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f001 f84b 	bl	800d058 <_Balloc>
 800bfc2:	9001      	str	r0, [sp, #4]
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d13b      	bne.n	800c040 <_dtoa_r+0x320>
 800bfc8:	4b11      	ldr	r3, [pc, #68]	; (800c010 <_dtoa_r+0x2f0>)
 800bfca:	4602      	mov	r2, r0
 800bfcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfd0:	e6c0      	b.n	800bd54 <_dtoa_r+0x34>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e7df      	b.n	800bf96 <_dtoa_r+0x276>
 800bfd6:	bf00      	nop
 800bfd8:	636f4361 	.word	0x636f4361
 800bfdc:	3fd287a7 	.word	0x3fd287a7
 800bfe0:	8b60c8b3 	.word	0x8b60c8b3
 800bfe4:	3fc68a28 	.word	0x3fc68a28
 800bfe8:	509f79fb 	.word	0x509f79fb
 800bfec:	3fd34413 	.word	0x3fd34413
 800bff0:	0800ec50 	.word	0x0800ec50
 800bff4:	0800ed0d 	.word	0x0800ed0d
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	0800ed09 	.word	0x0800ed09
 800c000:	0800ed00 	.word	0x0800ed00
 800c004:	0800ebd9 	.word	0x0800ebd9
 800c008:	3ff80000 	.word	0x3ff80000
 800c00c:	0800ee78 	.word	0x0800ee78
 800c010:	0800ed68 	.word	0x0800ed68
 800c014:	2501      	movs	r5, #1
 800c016:	2300      	movs	r3, #0
 800c018:	9306      	str	r3, [sp, #24]
 800c01a:	9508      	str	r5, [sp, #32]
 800c01c:	f04f 33ff 	mov.w	r3, #4294967295
 800c020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c024:	2200      	movs	r2, #0
 800c026:	2312      	movs	r3, #18
 800c028:	e7b0      	b.n	800bf8c <_dtoa_r+0x26c>
 800c02a:	2301      	movs	r3, #1
 800c02c:	9308      	str	r3, [sp, #32]
 800c02e:	e7f5      	b.n	800c01c <_dtoa_r+0x2fc>
 800c030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c032:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c036:	e7b8      	b.n	800bfaa <_dtoa_r+0x28a>
 800c038:	3101      	adds	r1, #1
 800c03a:	6041      	str	r1, [r0, #4]
 800c03c:	0052      	lsls	r2, r2, #1
 800c03e:	e7b8      	b.n	800bfb2 <_dtoa_r+0x292>
 800c040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c042:	9a01      	ldr	r2, [sp, #4]
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	2b0e      	cmp	r3, #14
 800c04a:	f200 809d 	bhi.w	800c188 <_dtoa_r+0x468>
 800c04e:	2d00      	cmp	r5, #0
 800c050:	f000 809a 	beq.w	800c188 <_dtoa_r+0x468>
 800c054:	9b00      	ldr	r3, [sp, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd32      	ble.n	800c0c0 <_dtoa_r+0x3a0>
 800c05a:	4ab7      	ldr	r2, [pc, #732]	; (800c338 <_dtoa_r+0x618>)
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c064:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c068:	9b00      	ldr	r3, [sp, #0]
 800c06a:	05d8      	lsls	r0, r3, #23
 800c06c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c070:	d516      	bpl.n	800c0a0 <_dtoa_r+0x380>
 800c072:	4bb2      	ldr	r3, [pc, #712]	; (800c33c <_dtoa_r+0x61c>)
 800c074:	ec51 0b19 	vmov	r0, r1, d9
 800c078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c07c:	f7f4 fc1e 	bl	80008bc <__aeabi_ddiv>
 800c080:	f007 070f 	and.w	r7, r7, #15
 800c084:	4682      	mov	sl, r0
 800c086:	468b      	mov	fp, r1
 800c088:	2503      	movs	r5, #3
 800c08a:	4eac      	ldr	r6, [pc, #688]	; (800c33c <_dtoa_r+0x61c>)
 800c08c:	b957      	cbnz	r7, 800c0a4 <_dtoa_r+0x384>
 800c08e:	4642      	mov	r2, r8
 800c090:	464b      	mov	r3, r9
 800c092:	4650      	mov	r0, sl
 800c094:	4659      	mov	r1, fp
 800c096:	f7f4 fc11 	bl	80008bc <__aeabi_ddiv>
 800c09a:	4682      	mov	sl, r0
 800c09c:	468b      	mov	fp, r1
 800c09e:	e028      	b.n	800c0f2 <_dtoa_r+0x3d2>
 800c0a0:	2502      	movs	r5, #2
 800c0a2:	e7f2      	b.n	800c08a <_dtoa_r+0x36a>
 800c0a4:	07f9      	lsls	r1, r7, #31
 800c0a6:	d508      	bpl.n	800c0ba <_dtoa_r+0x39a>
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0b0:	f7f4 fada 	bl	8000668 <__aeabi_dmul>
 800c0b4:	3501      	adds	r5, #1
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	4689      	mov	r9, r1
 800c0ba:	107f      	asrs	r7, r7, #1
 800c0bc:	3608      	adds	r6, #8
 800c0be:	e7e5      	b.n	800c08c <_dtoa_r+0x36c>
 800c0c0:	f000 809b 	beq.w	800c1fa <_dtoa_r+0x4da>
 800c0c4:	9b00      	ldr	r3, [sp, #0]
 800c0c6:	4f9d      	ldr	r7, [pc, #628]	; (800c33c <_dtoa_r+0x61c>)
 800c0c8:	425e      	negs	r6, r3
 800c0ca:	4b9b      	ldr	r3, [pc, #620]	; (800c338 <_dtoa_r+0x618>)
 800c0cc:	f006 020f 	and.w	r2, r6, #15
 800c0d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	ec51 0b19 	vmov	r0, r1, d9
 800c0dc:	f7f4 fac4 	bl	8000668 <__aeabi_dmul>
 800c0e0:	1136      	asrs	r6, r6, #4
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	468b      	mov	fp, r1
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	2502      	movs	r5, #2
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	d17a      	bne.n	800c1e4 <_dtoa_r+0x4c4>
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1d3      	bne.n	800c09a <_dtoa_r+0x37a>
 800c0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f000 8082 	beq.w	800c1fe <_dtoa_r+0x4de>
 800c0fa:	4b91      	ldr	r3, [pc, #580]	; (800c340 <_dtoa_r+0x620>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	4650      	mov	r0, sl
 800c100:	4659      	mov	r1, fp
 800c102:	f7f4 fd23 	bl	8000b4c <__aeabi_dcmplt>
 800c106:	2800      	cmp	r0, #0
 800c108:	d079      	beq.n	800c1fe <_dtoa_r+0x4de>
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d076      	beq.n	800c1fe <_dtoa_r+0x4de>
 800c110:	9b02      	ldr	r3, [sp, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	dd36      	ble.n	800c184 <_dtoa_r+0x464>
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	4650      	mov	r0, sl
 800c11a:	4659      	mov	r1, fp
 800c11c:	1e5f      	subs	r7, r3, #1
 800c11e:	2200      	movs	r2, #0
 800c120:	4b88      	ldr	r3, [pc, #544]	; (800c344 <_dtoa_r+0x624>)
 800c122:	f7f4 faa1 	bl	8000668 <__aeabi_dmul>
 800c126:	9e02      	ldr	r6, [sp, #8]
 800c128:	4682      	mov	sl, r0
 800c12a:	468b      	mov	fp, r1
 800c12c:	3501      	adds	r5, #1
 800c12e:	4628      	mov	r0, r5
 800c130:	f7f4 fa30 	bl	8000594 <__aeabi_i2d>
 800c134:	4652      	mov	r2, sl
 800c136:	465b      	mov	r3, fp
 800c138:	f7f4 fa96 	bl	8000668 <__aeabi_dmul>
 800c13c:	4b82      	ldr	r3, [pc, #520]	; (800c348 <_dtoa_r+0x628>)
 800c13e:	2200      	movs	r2, #0
 800c140:	f7f4 f8dc 	bl	80002fc <__adddf3>
 800c144:	46d0      	mov	r8, sl
 800c146:	46d9      	mov	r9, fp
 800c148:	4682      	mov	sl, r0
 800c14a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c14e:	2e00      	cmp	r6, #0
 800c150:	d158      	bne.n	800c204 <_dtoa_r+0x4e4>
 800c152:	4b7e      	ldr	r3, [pc, #504]	; (800c34c <_dtoa_r+0x62c>)
 800c154:	2200      	movs	r2, #0
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 f8cd 	bl	80002f8 <__aeabi_dsub>
 800c15e:	4652      	mov	r2, sl
 800c160:	465b      	mov	r3, fp
 800c162:	4680      	mov	r8, r0
 800c164:	4689      	mov	r9, r1
 800c166:	f7f4 fd0f 	bl	8000b88 <__aeabi_dcmpgt>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	f040 8295 	bne.w	800c69a <_dtoa_r+0x97a>
 800c170:	4652      	mov	r2, sl
 800c172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c176:	4640      	mov	r0, r8
 800c178:	4649      	mov	r1, r9
 800c17a:	f7f4 fce7 	bl	8000b4c <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f040 8289 	bne.w	800c696 <_dtoa_r+0x976>
 800c184:	ec5b ab19 	vmov	sl, fp, d9
 800c188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f2c0 8148 	blt.w	800c420 <_dtoa_r+0x700>
 800c190:	9a00      	ldr	r2, [sp, #0]
 800c192:	2a0e      	cmp	r2, #14
 800c194:	f300 8144 	bgt.w	800c420 <_dtoa_r+0x700>
 800c198:	4b67      	ldr	r3, [pc, #412]	; (800c338 <_dtoa_r+0x618>)
 800c19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c19e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f280 80d5 	bge.w	800c354 <_dtoa_r+0x634>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f300 80d1 	bgt.w	800c354 <_dtoa_r+0x634>
 800c1b2:	f040 826f 	bne.w	800c694 <_dtoa_r+0x974>
 800c1b6:	4b65      	ldr	r3, [pc, #404]	; (800c34c <_dtoa_r+0x62c>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	4649      	mov	r1, r9
 800c1be:	f7f4 fa53 	bl	8000668 <__aeabi_dmul>
 800c1c2:	4652      	mov	r2, sl
 800c1c4:	465b      	mov	r3, fp
 800c1c6:	f7f4 fcd5 	bl	8000b74 <__aeabi_dcmpge>
 800c1ca:	9e03      	ldr	r6, [sp, #12]
 800c1cc:	4637      	mov	r7, r6
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f040 8245 	bne.w	800c65e <_dtoa_r+0x93e>
 800c1d4:	9d01      	ldr	r5, [sp, #4]
 800c1d6:	2331      	movs	r3, #49	; 0x31
 800c1d8:	f805 3b01 	strb.w	r3, [r5], #1
 800c1dc:	9b00      	ldr	r3, [sp, #0]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	e240      	b.n	800c666 <_dtoa_r+0x946>
 800c1e4:	07f2      	lsls	r2, r6, #31
 800c1e6:	d505      	bpl.n	800c1f4 <_dtoa_r+0x4d4>
 800c1e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ec:	f7f4 fa3c 	bl	8000668 <__aeabi_dmul>
 800c1f0:	3501      	adds	r5, #1
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	1076      	asrs	r6, r6, #1
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	e777      	b.n	800c0ea <_dtoa_r+0x3ca>
 800c1fa:	2502      	movs	r5, #2
 800c1fc:	e779      	b.n	800c0f2 <_dtoa_r+0x3d2>
 800c1fe:	9f00      	ldr	r7, [sp, #0]
 800c200:	9e03      	ldr	r6, [sp, #12]
 800c202:	e794      	b.n	800c12e <_dtoa_r+0x40e>
 800c204:	9901      	ldr	r1, [sp, #4]
 800c206:	4b4c      	ldr	r3, [pc, #304]	; (800c338 <_dtoa_r+0x618>)
 800c208:	4431      	add	r1, r6
 800c20a:	910d      	str	r1, [sp, #52]	; 0x34
 800c20c:	9908      	ldr	r1, [sp, #32]
 800c20e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c216:	2900      	cmp	r1, #0
 800c218:	d043      	beq.n	800c2a2 <_dtoa_r+0x582>
 800c21a:	494d      	ldr	r1, [pc, #308]	; (800c350 <_dtoa_r+0x630>)
 800c21c:	2000      	movs	r0, #0
 800c21e:	f7f4 fb4d 	bl	80008bc <__aeabi_ddiv>
 800c222:	4652      	mov	r2, sl
 800c224:	465b      	mov	r3, fp
 800c226:	f7f4 f867 	bl	80002f8 <__aeabi_dsub>
 800c22a:	9d01      	ldr	r5, [sp, #4]
 800c22c:	4682      	mov	sl, r0
 800c22e:	468b      	mov	fp, r1
 800c230:	4649      	mov	r1, r9
 800c232:	4640      	mov	r0, r8
 800c234:	f7f4 fcc8 	bl	8000bc8 <__aeabi_d2iz>
 800c238:	4606      	mov	r6, r0
 800c23a:	f7f4 f9ab 	bl	8000594 <__aeabi_i2d>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f857 	bl	80002f8 <__aeabi_dsub>
 800c24a:	3630      	adds	r6, #48	; 0x30
 800c24c:	f805 6b01 	strb.w	r6, [r5], #1
 800c250:	4652      	mov	r2, sl
 800c252:	465b      	mov	r3, fp
 800c254:	4680      	mov	r8, r0
 800c256:	4689      	mov	r9, r1
 800c258:	f7f4 fc78 	bl	8000b4c <__aeabi_dcmplt>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d163      	bne.n	800c328 <_dtoa_r+0x608>
 800c260:	4642      	mov	r2, r8
 800c262:	464b      	mov	r3, r9
 800c264:	4936      	ldr	r1, [pc, #216]	; (800c340 <_dtoa_r+0x620>)
 800c266:	2000      	movs	r0, #0
 800c268:	f7f4 f846 	bl	80002f8 <__aeabi_dsub>
 800c26c:	4652      	mov	r2, sl
 800c26e:	465b      	mov	r3, fp
 800c270:	f7f4 fc6c 	bl	8000b4c <__aeabi_dcmplt>
 800c274:	2800      	cmp	r0, #0
 800c276:	f040 80b5 	bne.w	800c3e4 <_dtoa_r+0x6c4>
 800c27a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c27c:	429d      	cmp	r5, r3
 800c27e:	d081      	beq.n	800c184 <_dtoa_r+0x464>
 800c280:	4b30      	ldr	r3, [pc, #192]	; (800c344 <_dtoa_r+0x624>)
 800c282:	2200      	movs	r2, #0
 800c284:	4650      	mov	r0, sl
 800c286:	4659      	mov	r1, fp
 800c288:	f7f4 f9ee 	bl	8000668 <__aeabi_dmul>
 800c28c:	4b2d      	ldr	r3, [pc, #180]	; (800c344 <_dtoa_r+0x624>)
 800c28e:	4682      	mov	sl, r0
 800c290:	468b      	mov	fp, r1
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	2200      	movs	r2, #0
 800c298:	f7f4 f9e6 	bl	8000668 <__aeabi_dmul>
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	e7c6      	b.n	800c230 <_dtoa_r+0x510>
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	4659      	mov	r1, fp
 800c2a6:	f7f4 f9df 	bl	8000668 <__aeabi_dmul>
 800c2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2ac:	9d01      	ldr	r5, [sp, #4]
 800c2ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	468b      	mov	fp, r1
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	f7f4 fc86 	bl	8000bc8 <__aeabi_d2iz>
 800c2bc:	4606      	mov	r6, r0
 800c2be:	f7f4 f969 	bl	8000594 <__aeabi_i2d>
 800c2c2:	3630      	adds	r6, #48	; 0x30
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4640      	mov	r0, r8
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	f7f4 f814 	bl	80002f8 <__aeabi_dsub>
 800c2d0:	f805 6b01 	strb.w	r6, [r5], #1
 800c2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	4680      	mov	r8, r0
 800c2da:	4689      	mov	r9, r1
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	d124      	bne.n	800c32c <_dtoa_r+0x60c>
 800c2e2:	4b1b      	ldr	r3, [pc, #108]	; (800c350 <_dtoa_r+0x630>)
 800c2e4:	4650      	mov	r0, sl
 800c2e6:	4659      	mov	r1, fp
 800c2e8:	f7f4 f808 	bl	80002fc <__adddf3>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f4 fc48 	bl	8000b88 <__aeabi_dcmpgt>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d173      	bne.n	800c3e4 <_dtoa_r+0x6c4>
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	465b      	mov	r3, fp
 800c300:	4913      	ldr	r1, [pc, #76]	; (800c350 <_dtoa_r+0x630>)
 800c302:	2000      	movs	r0, #0
 800c304:	f7f3 fff8 	bl	80002f8 <__aeabi_dsub>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4640      	mov	r0, r8
 800c30e:	4649      	mov	r1, r9
 800c310:	f7f4 fc1c 	bl	8000b4c <__aeabi_dcmplt>
 800c314:	2800      	cmp	r0, #0
 800c316:	f43f af35 	beq.w	800c184 <_dtoa_r+0x464>
 800c31a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c31c:	1e6b      	subs	r3, r5, #1
 800c31e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c324:	2b30      	cmp	r3, #48	; 0x30
 800c326:	d0f8      	beq.n	800c31a <_dtoa_r+0x5fa>
 800c328:	9700      	str	r7, [sp, #0]
 800c32a:	e049      	b.n	800c3c0 <_dtoa_r+0x6a0>
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <_dtoa_r+0x624>)
 800c32e:	f7f4 f99b 	bl	8000668 <__aeabi_dmul>
 800c332:	4680      	mov	r8, r0
 800c334:	4689      	mov	r9, r1
 800c336:	e7bd      	b.n	800c2b4 <_dtoa_r+0x594>
 800c338:	0800ee78 	.word	0x0800ee78
 800c33c:	0800ee50 	.word	0x0800ee50
 800c340:	3ff00000 	.word	0x3ff00000
 800c344:	40240000 	.word	0x40240000
 800c348:	401c0000 	.word	0x401c0000
 800c34c:	40140000 	.word	0x40140000
 800c350:	3fe00000 	.word	0x3fe00000
 800c354:	9d01      	ldr	r5, [sp, #4]
 800c356:	4656      	mov	r6, sl
 800c358:	465f      	mov	r7, fp
 800c35a:	4642      	mov	r2, r8
 800c35c:	464b      	mov	r3, r9
 800c35e:	4630      	mov	r0, r6
 800c360:	4639      	mov	r1, r7
 800c362:	f7f4 faab 	bl	80008bc <__aeabi_ddiv>
 800c366:	f7f4 fc2f 	bl	8000bc8 <__aeabi_d2iz>
 800c36a:	4682      	mov	sl, r0
 800c36c:	f7f4 f912 	bl	8000594 <__aeabi_i2d>
 800c370:	4642      	mov	r2, r8
 800c372:	464b      	mov	r3, r9
 800c374:	f7f4 f978 	bl	8000668 <__aeabi_dmul>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4630      	mov	r0, r6
 800c37e:	4639      	mov	r1, r7
 800c380:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c384:	f7f3 ffb8 	bl	80002f8 <__aeabi_dsub>
 800c388:	f805 6b01 	strb.w	r6, [r5], #1
 800c38c:	9e01      	ldr	r6, [sp, #4]
 800c38e:	9f03      	ldr	r7, [sp, #12]
 800c390:	1bae      	subs	r6, r5, r6
 800c392:	42b7      	cmp	r7, r6
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	d135      	bne.n	800c406 <_dtoa_r+0x6e6>
 800c39a:	f7f3 ffaf 	bl	80002fc <__adddf3>
 800c39e:	4642      	mov	r2, r8
 800c3a0:	464b      	mov	r3, r9
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	f7f4 fbef 	bl	8000b88 <__aeabi_dcmpgt>
 800c3aa:	b9d0      	cbnz	r0, 800c3e2 <_dtoa_r+0x6c2>
 800c3ac:	4642      	mov	r2, r8
 800c3ae:	464b      	mov	r3, r9
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	f7f4 fbc0 	bl	8000b38 <__aeabi_dcmpeq>
 800c3b8:	b110      	cbz	r0, 800c3c0 <_dtoa_r+0x6a0>
 800c3ba:	f01a 0f01 	tst.w	sl, #1
 800c3be:	d110      	bne.n	800c3e2 <_dtoa_r+0x6c2>
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	ee18 1a10 	vmov	r1, s16
 800c3c6:	f000 fe87 	bl	800d0d8 <_Bfree>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9800      	ldr	r0, [sp, #0]
 800c3ce:	702b      	strb	r3, [r5, #0]
 800c3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	6018      	str	r0, [r3, #0]
 800c3d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f43f acf1 	beq.w	800bdc0 <_dtoa_r+0xa0>
 800c3de:	601d      	str	r5, [r3, #0]
 800c3e0:	e4ee      	b.n	800bdc0 <_dtoa_r+0xa0>
 800c3e2:	9f00      	ldr	r7, [sp, #0]
 800c3e4:	462b      	mov	r3, r5
 800c3e6:	461d      	mov	r5, r3
 800c3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3ec:	2a39      	cmp	r2, #57	; 0x39
 800c3ee:	d106      	bne.n	800c3fe <_dtoa_r+0x6de>
 800c3f0:	9a01      	ldr	r2, [sp, #4]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d1f7      	bne.n	800c3e6 <_dtoa_r+0x6c6>
 800c3f6:	9901      	ldr	r1, [sp, #4]
 800c3f8:	2230      	movs	r2, #48	; 0x30
 800c3fa:	3701      	adds	r7, #1
 800c3fc:	700a      	strb	r2, [r1, #0]
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	3201      	adds	r2, #1
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	e790      	b.n	800c328 <_dtoa_r+0x608>
 800c406:	4ba6      	ldr	r3, [pc, #664]	; (800c6a0 <_dtoa_r+0x980>)
 800c408:	2200      	movs	r2, #0
 800c40a:	f7f4 f92d 	bl	8000668 <__aeabi_dmul>
 800c40e:	2200      	movs	r2, #0
 800c410:	2300      	movs	r3, #0
 800c412:	4606      	mov	r6, r0
 800c414:	460f      	mov	r7, r1
 800c416:	f7f4 fb8f 	bl	8000b38 <__aeabi_dcmpeq>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d09d      	beq.n	800c35a <_dtoa_r+0x63a>
 800c41e:	e7cf      	b.n	800c3c0 <_dtoa_r+0x6a0>
 800c420:	9a08      	ldr	r2, [sp, #32]
 800c422:	2a00      	cmp	r2, #0
 800c424:	f000 80d7 	beq.w	800c5d6 <_dtoa_r+0x8b6>
 800c428:	9a06      	ldr	r2, [sp, #24]
 800c42a:	2a01      	cmp	r2, #1
 800c42c:	f300 80ba 	bgt.w	800c5a4 <_dtoa_r+0x884>
 800c430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c432:	2a00      	cmp	r2, #0
 800c434:	f000 80b2 	beq.w	800c59c <_dtoa_r+0x87c>
 800c438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c43c:	9e07      	ldr	r6, [sp, #28]
 800c43e:	9d04      	ldr	r5, [sp, #16]
 800c440:	9a04      	ldr	r2, [sp, #16]
 800c442:	441a      	add	r2, r3
 800c444:	9204      	str	r2, [sp, #16]
 800c446:	9a05      	ldr	r2, [sp, #20]
 800c448:	2101      	movs	r1, #1
 800c44a:	441a      	add	r2, r3
 800c44c:	4620      	mov	r0, r4
 800c44e:	9205      	str	r2, [sp, #20]
 800c450:	f000 ff44 	bl	800d2dc <__i2b>
 800c454:	4607      	mov	r7, r0
 800c456:	2d00      	cmp	r5, #0
 800c458:	dd0c      	ble.n	800c474 <_dtoa_r+0x754>
 800c45a:	9b05      	ldr	r3, [sp, #20]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd09      	ble.n	800c474 <_dtoa_r+0x754>
 800c460:	42ab      	cmp	r3, r5
 800c462:	9a04      	ldr	r2, [sp, #16]
 800c464:	bfa8      	it	ge
 800c466:	462b      	movge	r3, r5
 800c468:	1ad2      	subs	r2, r2, r3
 800c46a:	9204      	str	r2, [sp, #16]
 800c46c:	9a05      	ldr	r2, [sp, #20]
 800c46e:	1aed      	subs	r5, r5, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	9305      	str	r3, [sp, #20]
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	b31b      	cbz	r3, 800c4c0 <_dtoa_r+0x7a0>
 800c478:	9b08      	ldr	r3, [sp, #32]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 80af 	beq.w	800c5de <_dtoa_r+0x8be>
 800c480:	2e00      	cmp	r6, #0
 800c482:	dd13      	ble.n	800c4ac <_dtoa_r+0x78c>
 800c484:	4639      	mov	r1, r7
 800c486:	4632      	mov	r2, r6
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 ffe7 	bl	800d45c <__pow5mult>
 800c48e:	ee18 2a10 	vmov	r2, s16
 800c492:	4601      	mov	r1, r0
 800c494:	4607      	mov	r7, r0
 800c496:	4620      	mov	r0, r4
 800c498:	f000 ff36 	bl	800d308 <__multiply>
 800c49c:	ee18 1a10 	vmov	r1, s16
 800c4a0:	4680      	mov	r8, r0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 fe18 	bl	800d0d8 <_Bfree>
 800c4a8:	ee08 8a10 	vmov	s16, r8
 800c4ac:	9b07      	ldr	r3, [sp, #28]
 800c4ae:	1b9a      	subs	r2, r3, r6
 800c4b0:	d006      	beq.n	800c4c0 <_dtoa_r+0x7a0>
 800c4b2:	ee18 1a10 	vmov	r1, s16
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 ffd0 	bl	800d45c <__pow5mult>
 800c4bc:	ee08 0a10 	vmov	s16, r0
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 ff0a 	bl	800d2dc <__i2b>
 800c4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	f340 8088 	ble.w	800c5e2 <_dtoa_r+0x8c2>
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 ffc0 	bl	800d45c <__pow5mult>
 800c4dc:	9b06      	ldr	r3, [sp, #24]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	f340 8081 	ble.w	800c5e8 <_dtoa_r+0x8c8>
 800c4e6:	f04f 0800 	mov.w	r8, #0
 800c4ea:	6933      	ldr	r3, [r6, #16]
 800c4ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4f0:	6918      	ldr	r0, [r3, #16]
 800c4f2:	f000 fea3 	bl	800d23c <__hi0bits>
 800c4f6:	f1c0 0020 	rsb	r0, r0, #32
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	4418      	add	r0, r3
 800c4fe:	f010 001f 	ands.w	r0, r0, #31
 800c502:	f000 8092 	beq.w	800c62a <_dtoa_r+0x90a>
 800c506:	f1c0 0320 	rsb	r3, r0, #32
 800c50a:	2b04      	cmp	r3, #4
 800c50c:	f340 808a 	ble.w	800c624 <_dtoa_r+0x904>
 800c510:	f1c0 001c 	rsb	r0, r0, #28
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	4403      	add	r3, r0
 800c518:	9304      	str	r3, [sp, #16]
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	4403      	add	r3, r0
 800c51e:	4405      	add	r5, r0
 800c520:	9305      	str	r3, [sp, #20]
 800c522:	9b04      	ldr	r3, [sp, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	dd07      	ble.n	800c538 <_dtoa_r+0x818>
 800c528:	ee18 1a10 	vmov	r1, s16
 800c52c:	461a      	mov	r2, r3
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 ffee 	bl	800d510 <__lshift>
 800c534:	ee08 0a10 	vmov	s16, r0
 800c538:	9b05      	ldr	r3, [sp, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dd05      	ble.n	800c54a <_dtoa_r+0x82a>
 800c53e:	4631      	mov	r1, r6
 800c540:	461a      	mov	r2, r3
 800c542:	4620      	mov	r0, r4
 800c544:	f000 ffe4 	bl	800d510 <__lshift>
 800c548:	4606      	mov	r6, r0
 800c54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d06e      	beq.n	800c62e <_dtoa_r+0x90e>
 800c550:	ee18 0a10 	vmov	r0, s16
 800c554:	4631      	mov	r1, r6
 800c556:	f001 f84b 	bl	800d5f0 <__mcmp>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	da67      	bge.n	800c62e <_dtoa_r+0x90e>
 800c55e:	9b00      	ldr	r3, [sp, #0]
 800c560:	3b01      	subs	r3, #1
 800c562:	ee18 1a10 	vmov	r1, s16
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	220a      	movs	r2, #10
 800c56a:	2300      	movs	r3, #0
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 fdd5 	bl	800d11c <__multadd>
 800c572:	9b08      	ldr	r3, [sp, #32]
 800c574:	ee08 0a10 	vmov	s16, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 81b1 	beq.w	800c8e0 <_dtoa_r+0xbc0>
 800c57e:	2300      	movs	r3, #0
 800c580:	4639      	mov	r1, r7
 800c582:	220a      	movs	r2, #10
 800c584:	4620      	mov	r0, r4
 800c586:	f000 fdc9 	bl	800d11c <__multadd>
 800c58a:	9b02      	ldr	r3, [sp, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	4607      	mov	r7, r0
 800c590:	f300 808e 	bgt.w	800c6b0 <_dtoa_r+0x990>
 800c594:	9b06      	ldr	r3, [sp, #24]
 800c596:	2b02      	cmp	r3, #2
 800c598:	dc51      	bgt.n	800c63e <_dtoa_r+0x91e>
 800c59a:	e089      	b.n	800c6b0 <_dtoa_r+0x990>
 800c59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c59e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5a2:	e74b      	b.n	800c43c <_dtoa_r+0x71c>
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	1e5e      	subs	r6, r3, #1
 800c5a8:	9b07      	ldr	r3, [sp, #28]
 800c5aa:	42b3      	cmp	r3, r6
 800c5ac:	bfbf      	itttt	lt
 800c5ae:	9b07      	ldrlt	r3, [sp, #28]
 800c5b0:	9607      	strlt	r6, [sp, #28]
 800c5b2:	1af2      	sublt	r2, r6, r3
 800c5b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5b6:	bfb6      	itet	lt
 800c5b8:	189b      	addlt	r3, r3, r2
 800c5ba:	1b9e      	subge	r6, r3, r6
 800c5bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	bfb8      	it	lt
 800c5c2:	2600      	movlt	r6, #0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfb7      	itett	lt
 800c5c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5d0:	1a9d      	sublt	r5, r3, r2
 800c5d2:	2300      	movlt	r3, #0
 800c5d4:	e734      	b.n	800c440 <_dtoa_r+0x720>
 800c5d6:	9e07      	ldr	r6, [sp, #28]
 800c5d8:	9d04      	ldr	r5, [sp, #16]
 800c5da:	9f08      	ldr	r7, [sp, #32]
 800c5dc:	e73b      	b.n	800c456 <_dtoa_r+0x736>
 800c5de:	9a07      	ldr	r2, [sp, #28]
 800c5e0:	e767      	b.n	800c4b2 <_dtoa_r+0x792>
 800c5e2:	9b06      	ldr	r3, [sp, #24]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	dc18      	bgt.n	800c61a <_dtoa_r+0x8fa>
 800c5e8:	f1ba 0f00 	cmp.w	sl, #0
 800c5ec:	d115      	bne.n	800c61a <_dtoa_r+0x8fa>
 800c5ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5f2:	b993      	cbnz	r3, 800c61a <_dtoa_r+0x8fa>
 800c5f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5f8:	0d1b      	lsrs	r3, r3, #20
 800c5fa:	051b      	lsls	r3, r3, #20
 800c5fc:	b183      	cbz	r3, 800c620 <_dtoa_r+0x900>
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	3301      	adds	r3, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	9b05      	ldr	r3, [sp, #20]
 800c606:	3301      	adds	r3, #1
 800c608:	9305      	str	r3, [sp, #20]
 800c60a:	f04f 0801 	mov.w	r8, #1
 800c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c610:	2b00      	cmp	r3, #0
 800c612:	f47f af6a 	bne.w	800c4ea <_dtoa_r+0x7ca>
 800c616:	2001      	movs	r0, #1
 800c618:	e76f      	b.n	800c4fa <_dtoa_r+0x7da>
 800c61a:	f04f 0800 	mov.w	r8, #0
 800c61e:	e7f6      	b.n	800c60e <_dtoa_r+0x8ee>
 800c620:	4698      	mov	r8, r3
 800c622:	e7f4      	b.n	800c60e <_dtoa_r+0x8ee>
 800c624:	f43f af7d 	beq.w	800c522 <_dtoa_r+0x802>
 800c628:	4618      	mov	r0, r3
 800c62a:	301c      	adds	r0, #28
 800c62c:	e772      	b.n	800c514 <_dtoa_r+0x7f4>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	dc37      	bgt.n	800c6a4 <_dtoa_r+0x984>
 800c634:	9b06      	ldr	r3, [sp, #24]
 800c636:	2b02      	cmp	r3, #2
 800c638:	dd34      	ble.n	800c6a4 <_dtoa_r+0x984>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	9b02      	ldr	r3, [sp, #8]
 800c640:	b96b      	cbnz	r3, 800c65e <_dtoa_r+0x93e>
 800c642:	4631      	mov	r1, r6
 800c644:	2205      	movs	r2, #5
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fd68 	bl	800d11c <__multadd>
 800c64c:	4601      	mov	r1, r0
 800c64e:	4606      	mov	r6, r0
 800c650:	ee18 0a10 	vmov	r0, s16
 800c654:	f000 ffcc 	bl	800d5f0 <__mcmp>
 800c658:	2800      	cmp	r0, #0
 800c65a:	f73f adbb 	bgt.w	800c1d4 <_dtoa_r+0x4b4>
 800c65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c660:	9d01      	ldr	r5, [sp, #4]
 800c662:	43db      	mvns	r3, r3
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	f04f 0800 	mov.w	r8, #0
 800c66a:	4631      	mov	r1, r6
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 fd33 	bl	800d0d8 <_Bfree>
 800c672:	2f00      	cmp	r7, #0
 800c674:	f43f aea4 	beq.w	800c3c0 <_dtoa_r+0x6a0>
 800c678:	f1b8 0f00 	cmp.w	r8, #0
 800c67c:	d005      	beq.n	800c68a <_dtoa_r+0x96a>
 800c67e:	45b8      	cmp	r8, r7
 800c680:	d003      	beq.n	800c68a <_dtoa_r+0x96a>
 800c682:	4641      	mov	r1, r8
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fd27 	bl	800d0d8 <_Bfree>
 800c68a:	4639      	mov	r1, r7
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fd23 	bl	800d0d8 <_Bfree>
 800c692:	e695      	b.n	800c3c0 <_dtoa_r+0x6a0>
 800c694:	2600      	movs	r6, #0
 800c696:	4637      	mov	r7, r6
 800c698:	e7e1      	b.n	800c65e <_dtoa_r+0x93e>
 800c69a:	9700      	str	r7, [sp, #0]
 800c69c:	4637      	mov	r7, r6
 800c69e:	e599      	b.n	800c1d4 <_dtoa_r+0x4b4>
 800c6a0:	40240000 	.word	0x40240000
 800c6a4:	9b08      	ldr	r3, [sp, #32]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80ca 	beq.w	800c840 <_dtoa_r+0xb20>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	9302      	str	r3, [sp, #8]
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	dd05      	ble.n	800c6c0 <_dtoa_r+0x9a0>
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 ff29 	bl	800d510 <__lshift>
 800c6be:	4607      	mov	r7, r0
 800c6c0:	f1b8 0f00 	cmp.w	r8, #0
 800c6c4:	d05b      	beq.n	800c77e <_dtoa_r+0xa5e>
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fcc5 	bl	800d058 <_Balloc>
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	b928      	cbnz	r0, 800c6de <_dtoa_r+0x9be>
 800c6d2:	4b87      	ldr	r3, [pc, #540]	; (800c8f0 <_dtoa_r+0xbd0>)
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6da:	f7ff bb3b 	b.w	800bd54 <_dtoa_r+0x34>
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	3202      	adds	r2, #2
 800c6e2:	0092      	lsls	r2, r2, #2
 800c6e4:	f107 010c 	add.w	r1, r7, #12
 800c6e8:	300c      	adds	r0, #12
 800c6ea:	f000 fca7 	bl	800d03c <memcpy>
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 ff0c 	bl	800d510 <__lshift>
 800c6f8:	9b01      	ldr	r3, [sp, #4]
 800c6fa:	f103 0901 	add.w	r9, r3, #1
 800c6fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c702:	4413      	add	r3, r2
 800c704:	9305      	str	r3, [sp, #20]
 800c706:	f00a 0301 	and.w	r3, sl, #1
 800c70a:	46b8      	mov	r8, r7
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	4607      	mov	r7, r0
 800c710:	4631      	mov	r1, r6
 800c712:	ee18 0a10 	vmov	r0, s16
 800c716:	f7ff fa77 	bl	800bc08 <quorem>
 800c71a:	4641      	mov	r1, r8
 800c71c:	9002      	str	r0, [sp, #8]
 800c71e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c722:	ee18 0a10 	vmov	r0, s16
 800c726:	f000 ff63 	bl	800d5f0 <__mcmp>
 800c72a:	463a      	mov	r2, r7
 800c72c:	9003      	str	r0, [sp, #12]
 800c72e:	4631      	mov	r1, r6
 800c730:	4620      	mov	r0, r4
 800c732:	f000 ff79 	bl	800d628 <__mdiff>
 800c736:	68c2      	ldr	r2, [r0, #12]
 800c738:	f109 3bff 	add.w	fp, r9, #4294967295
 800c73c:	4605      	mov	r5, r0
 800c73e:	bb02      	cbnz	r2, 800c782 <_dtoa_r+0xa62>
 800c740:	4601      	mov	r1, r0
 800c742:	ee18 0a10 	vmov	r0, s16
 800c746:	f000 ff53 	bl	800d5f0 <__mcmp>
 800c74a:	4602      	mov	r2, r0
 800c74c:	4629      	mov	r1, r5
 800c74e:	4620      	mov	r0, r4
 800c750:	9207      	str	r2, [sp, #28]
 800c752:	f000 fcc1 	bl	800d0d8 <_Bfree>
 800c756:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c75a:	ea43 0102 	orr.w	r1, r3, r2
 800c75e:	9b04      	ldr	r3, [sp, #16]
 800c760:	430b      	orrs	r3, r1
 800c762:	464d      	mov	r5, r9
 800c764:	d10f      	bne.n	800c786 <_dtoa_r+0xa66>
 800c766:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c76a:	d02a      	beq.n	800c7c2 <_dtoa_r+0xaa2>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	dd02      	ble.n	800c778 <_dtoa_r+0xa58>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c778:	f88b a000 	strb.w	sl, [fp]
 800c77c:	e775      	b.n	800c66a <_dtoa_r+0x94a>
 800c77e:	4638      	mov	r0, r7
 800c780:	e7ba      	b.n	800c6f8 <_dtoa_r+0x9d8>
 800c782:	2201      	movs	r2, #1
 800c784:	e7e2      	b.n	800c74c <_dtoa_r+0xa2c>
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	db04      	blt.n	800c796 <_dtoa_r+0xa76>
 800c78c:	9906      	ldr	r1, [sp, #24]
 800c78e:	430b      	orrs	r3, r1
 800c790:	9904      	ldr	r1, [sp, #16]
 800c792:	430b      	orrs	r3, r1
 800c794:	d122      	bne.n	800c7dc <_dtoa_r+0xabc>
 800c796:	2a00      	cmp	r2, #0
 800c798:	ddee      	ble.n	800c778 <_dtoa_r+0xa58>
 800c79a:	ee18 1a10 	vmov	r1, s16
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f000 feb5 	bl	800d510 <__lshift>
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	ee08 0a10 	vmov	s16, r0
 800c7ac:	f000 ff20 	bl	800d5f0 <__mcmp>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	dc03      	bgt.n	800c7bc <_dtoa_r+0xa9c>
 800c7b4:	d1e0      	bne.n	800c778 <_dtoa_r+0xa58>
 800c7b6:	f01a 0f01 	tst.w	sl, #1
 800c7ba:	d0dd      	beq.n	800c778 <_dtoa_r+0xa58>
 800c7bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7c0:	d1d7      	bne.n	800c772 <_dtoa_r+0xa52>
 800c7c2:	2339      	movs	r3, #57	; 0x39
 800c7c4:	f88b 3000 	strb.w	r3, [fp]
 800c7c8:	462b      	mov	r3, r5
 800c7ca:	461d      	mov	r5, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7d2:	2a39      	cmp	r2, #57	; 0x39
 800c7d4:	d071      	beq.n	800c8ba <_dtoa_r+0xb9a>
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	e746      	b.n	800c66a <_dtoa_r+0x94a>
 800c7dc:	2a00      	cmp	r2, #0
 800c7de:	dd07      	ble.n	800c7f0 <_dtoa_r+0xad0>
 800c7e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7e4:	d0ed      	beq.n	800c7c2 <_dtoa_r+0xaa2>
 800c7e6:	f10a 0301 	add.w	r3, sl, #1
 800c7ea:	f88b 3000 	strb.w	r3, [fp]
 800c7ee:	e73c      	b.n	800c66a <_dtoa_r+0x94a>
 800c7f0:	9b05      	ldr	r3, [sp, #20]
 800c7f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7f6:	4599      	cmp	r9, r3
 800c7f8:	d047      	beq.n	800c88a <_dtoa_r+0xb6a>
 800c7fa:	ee18 1a10 	vmov	r1, s16
 800c7fe:	2300      	movs	r3, #0
 800c800:	220a      	movs	r2, #10
 800c802:	4620      	mov	r0, r4
 800c804:	f000 fc8a 	bl	800d11c <__multadd>
 800c808:	45b8      	cmp	r8, r7
 800c80a:	ee08 0a10 	vmov	s16, r0
 800c80e:	f04f 0300 	mov.w	r3, #0
 800c812:	f04f 020a 	mov.w	r2, #10
 800c816:	4641      	mov	r1, r8
 800c818:	4620      	mov	r0, r4
 800c81a:	d106      	bne.n	800c82a <_dtoa_r+0xb0a>
 800c81c:	f000 fc7e 	bl	800d11c <__multadd>
 800c820:	4680      	mov	r8, r0
 800c822:	4607      	mov	r7, r0
 800c824:	f109 0901 	add.w	r9, r9, #1
 800c828:	e772      	b.n	800c710 <_dtoa_r+0x9f0>
 800c82a:	f000 fc77 	bl	800d11c <__multadd>
 800c82e:	4639      	mov	r1, r7
 800c830:	4680      	mov	r8, r0
 800c832:	2300      	movs	r3, #0
 800c834:	220a      	movs	r2, #10
 800c836:	4620      	mov	r0, r4
 800c838:	f000 fc70 	bl	800d11c <__multadd>
 800c83c:	4607      	mov	r7, r0
 800c83e:	e7f1      	b.n	800c824 <_dtoa_r+0xb04>
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	9302      	str	r3, [sp, #8]
 800c844:	9d01      	ldr	r5, [sp, #4]
 800c846:	ee18 0a10 	vmov	r0, s16
 800c84a:	4631      	mov	r1, r6
 800c84c:	f7ff f9dc 	bl	800bc08 <quorem>
 800c850:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	f805 ab01 	strb.w	sl, [r5], #1
 800c85a:	1aea      	subs	r2, r5, r3
 800c85c:	9b02      	ldr	r3, [sp, #8]
 800c85e:	4293      	cmp	r3, r2
 800c860:	dd09      	ble.n	800c876 <_dtoa_r+0xb56>
 800c862:	ee18 1a10 	vmov	r1, s16
 800c866:	2300      	movs	r3, #0
 800c868:	220a      	movs	r2, #10
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fc56 	bl	800d11c <__multadd>
 800c870:	ee08 0a10 	vmov	s16, r0
 800c874:	e7e7      	b.n	800c846 <_dtoa_r+0xb26>
 800c876:	9b02      	ldr	r3, [sp, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	bfc8      	it	gt
 800c87c:	461d      	movgt	r5, r3
 800c87e:	9b01      	ldr	r3, [sp, #4]
 800c880:	bfd8      	it	le
 800c882:	2501      	movle	r5, #1
 800c884:	441d      	add	r5, r3
 800c886:	f04f 0800 	mov.w	r8, #0
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	2201      	movs	r2, #1
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fe3d 	bl	800d510 <__lshift>
 800c896:	4631      	mov	r1, r6
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	f000 fea8 	bl	800d5f0 <__mcmp>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	dc91      	bgt.n	800c7c8 <_dtoa_r+0xaa8>
 800c8a4:	d102      	bne.n	800c8ac <_dtoa_r+0xb8c>
 800c8a6:	f01a 0f01 	tst.w	sl, #1
 800c8aa:	d18d      	bne.n	800c7c8 <_dtoa_r+0xaa8>
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	461d      	mov	r5, r3
 800c8b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8b4:	2a30      	cmp	r2, #48	; 0x30
 800c8b6:	d0fa      	beq.n	800c8ae <_dtoa_r+0xb8e>
 800c8b8:	e6d7      	b.n	800c66a <_dtoa_r+0x94a>
 800c8ba:	9a01      	ldr	r2, [sp, #4]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d184      	bne.n	800c7ca <_dtoa_r+0xaaa>
 800c8c0:	9b00      	ldr	r3, [sp, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	2331      	movs	r3, #49	; 0x31
 800c8c8:	7013      	strb	r3, [r2, #0]
 800c8ca:	e6ce      	b.n	800c66a <_dtoa_r+0x94a>
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <_dtoa_r+0xbd4>)
 800c8ce:	f7ff ba95 	b.w	800bdfc <_dtoa_r+0xdc>
 800c8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f47f aa6e 	bne.w	800bdb6 <_dtoa_r+0x96>
 800c8da:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <_dtoa_r+0xbd8>)
 800c8dc:	f7ff ba8e 	b.w	800bdfc <_dtoa_r+0xdc>
 800c8e0:	9b02      	ldr	r3, [sp, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	dcae      	bgt.n	800c844 <_dtoa_r+0xb24>
 800c8e6:	9b06      	ldr	r3, [sp, #24]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	f73f aea8 	bgt.w	800c63e <_dtoa_r+0x91e>
 800c8ee:	e7a9      	b.n	800c844 <_dtoa_r+0xb24>
 800c8f0:	0800ed68 	.word	0x0800ed68
 800c8f4:	0800ebd8 	.word	0x0800ebd8
 800c8f8:	0800ed00 	.word	0x0800ed00

0800c8fc <fiprintf>:
 800c8fc:	b40e      	push	{r1, r2, r3}
 800c8fe:	b503      	push	{r0, r1, lr}
 800c900:	4601      	mov	r1, r0
 800c902:	ab03      	add	r3, sp, #12
 800c904:	4805      	ldr	r0, [pc, #20]	; (800c91c <fiprintf+0x20>)
 800c906:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	f001 fae1 	bl	800ded4 <_vfiprintf_r>
 800c912:	b002      	add	sp, #8
 800c914:	f85d eb04 	ldr.w	lr, [sp], #4
 800c918:	b003      	add	sp, #12
 800c91a:	4770      	bx	lr
 800c91c:	20000010 	.word	0x20000010

0800c920 <rshift>:
 800c920:	6903      	ldr	r3, [r0, #16]
 800c922:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c92a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c92e:	f100 0414 	add.w	r4, r0, #20
 800c932:	dd45      	ble.n	800c9c0 <rshift+0xa0>
 800c934:	f011 011f 	ands.w	r1, r1, #31
 800c938:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c93c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c940:	d10c      	bne.n	800c95c <rshift+0x3c>
 800c942:	f100 0710 	add.w	r7, r0, #16
 800c946:	4629      	mov	r1, r5
 800c948:	42b1      	cmp	r1, r6
 800c94a:	d334      	bcc.n	800c9b6 <rshift+0x96>
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	1eea      	subs	r2, r5, #3
 800c952:	4296      	cmp	r6, r2
 800c954:	bf38      	it	cc
 800c956:	2300      	movcc	r3, #0
 800c958:	4423      	add	r3, r4
 800c95a:	e015      	b.n	800c988 <rshift+0x68>
 800c95c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c960:	f1c1 0820 	rsb	r8, r1, #32
 800c964:	40cf      	lsrs	r7, r1
 800c966:	f105 0e04 	add.w	lr, r5, #4
 800c96a:	46a1      	mov	r9, r4
 800c96c:	4576      	cmp	r6, lr
 800c96e:	46f4      	mov	ip, lr
 800c970:	d815      	bhi.n	800c99e <rshift+0x7e>
 800c972:	1a9a      	subs	r2, r3, r2
 800c974:	0092      	lsls	r2, r2, #2
 800c976:	3a04      	subs	r2, #4
 800c978:	3501      	adds	r5, #1
 800c97a:	42ae      	cmp	r6, r5
 800c97c:	bf38      	it	cc
 800c97e:	2200      	movcc	r2, #0
 800c980:	18a3      	adds	r3, r4, r2
 800c982:	50a7      	str	r7, [r4, r2]
 800c984:	b107      	cbz	r7, 800c988 <rshift+0x68>
 800c986:	3304      	adds	r3, #4
 800c988:	1b1a      	subs	r2, r3, r4
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c990:	bf08      	it	eq
 800c992:	2300      	moveq	r3, #0
 800c994:	6102      	str	r2, [r0, #16]
 800c996:	bf08      	it	eq
 800c998:	6143      	streq	r3, [r0, #20]
 800c99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c99e:	f8dc c000 	ldr.w	ip, [ip]
 800c9a2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c9a6:	ea4c 0707 	orr.w	r7, ip, r7
 800c9aa:	f849 7b04 	str.w	r7, [r9], #4
 800c9ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9b2:	40cf      	lsrs	r7, r1
 800c9b4:	e7da      	b.n	800c96c <rshift+0x4c>
 800c9b6:	f851 cb04 	ldr.w	ip, [r1], #4
 800c9ba:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9be:	e7c3      	b.n	800c948 <rshift+0x28>
 800c9c0:	4623      	mov	r3, r4
 800c9c2:	e7e1      	b.n	800c988 <rshift+0x68>

0800c9c4 <__hexdig_fun>:
 800c9c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9c8:	2b09      	cmp	r3, #9
 800c9ca:	d802      	bhi.n	800c9d2 <__hexdig_fun+0xe>
 800c9cc:	3820      	subs	r0, #32
 800c9ce:	b2c0      	uxtb	r0, r0
 800c9d0:	4770      	bx	lr
 800c9d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d801      	bhi.n	800c9de <__hexdig_fun+0x1a>
 800c9da:	3847      	subs	r0, #71	; 0x47
 800c9dc:	e7f7      	b.n	800c9ce <__hexdig_fun+0xa>
 800c9de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d801      	bhi.n	800c9ea <__hexdig_fun+0x26>
 800c9e6:	3827      	subs	r0, #39	; 0x27
 800c9e8:	e7f1      	b.n	800c9ce <__hexdig_fun+0xa>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <__gethex>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	ed2d 8b02 	vpush	{d8}
 800c9f8:	b089      	sub	sp, #36	; 0x24
 800c9fa:	ee08 0a10 	vmov	s16, r0
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	4bb4      	ldr	r3, [pc, #720]	; (800ccd4 <__gethex+0x2e4>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	468b      	mov	fp, r1
 800ca0a:	4690      	mov	r8, r2
 800ca0c:	f7f3 fc12 	bl	8000234 <strlen>
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	f8db 2000 	ldr.w	r2, [fp]
 800ca16:	4403      	add	r3, r0
 800ca18:	4682      	mov	sl, r0
 800ca1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ca1e:	9305      	str	r3, [sp, #20]
 800ca20:	1c93      	adds	r3, r2, #2
 800ca22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ca26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca2a:	32fe      	adds	r2, #254	; 0xfe
 800ca2c:	18d1      	adds	r1, r2, r3
 800ca2e:	461f      	mov	r7, r3
 800ca30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca34:	9100      	str	r1, [sp, #0]
 800ca36:	2830      	cmp	r0, #48	; 0x30
 800ca38:	d0f8      	beq.n	800ca2c <__gethex+0x3c>
 800ca3a:	f7ff ffc3 	bl	800c9c4 <__hexdig_fun>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d13a      	bne.n	800caba <__gethex+0xca>
 800ca44:	9901      	ldr	r1, [sp, #4]
 800ca46:	4652      	mov	r2, sl
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f001 fb8d 	bl	800e168 <strncmp>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d168      	bne.n	800cb26 <__gethex+0x136>
 800ca54:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca58:	eb07 060a 	add.w	r6, r7, sl
 800ca5c:	f7ff ffb2 	bl	800c9c4 <__hexdig_fun>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d062      	beq.n	800cb2a <__gethex+0x13a>
 800ca64:	4633      	mov	r3, r6
 800ca66:	7818      	ldrb	r0, [r3, #0]
 800ca68:	2830      	cmp	r0, #48	; 0x30
 800ca6a:	461f      	mov	r7, r3
 800ca6c:	f103 0301 	add.w	r3, r3, #1
 800ca70:	d0f9      	beq.n	800ca66 <__gethex+0x76>
 800ca72:	f7ff ffa7 	bl	800c9c4 <__hexdig_fun>
 800ca76:	2301      	movs	r3, #1
 800ca78:	fab0 f480 	clz	r4, r0
 800ca7c:	0964      	lsrs	r4, r4, #5
 800ca7e:	4635      	mov	r5, r6
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	463a      	mov	r2, r7
 800ca84:	4616      	mov	r6, r2
 800ca86:	3201      	adds	r2, #1
 800ca88:	7830      	ldrb	r0, [r6, #0]
 800ca8a:	f7ff ff9b 	bl	800c9c4 <__hexdig_fun>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	d1f8      	bne.n	800ca84 <__gethex+0x94>
 800ca92:	9901      	ldr	r1, [sp, #4]
 800ca94:	4652      	mov	r2, sl
 800ca96:	4630      	mov	r0, r6
 800ca98:	f001 fb66 	bl	800e168 <strncmp>
 800ca9c:	b980      	cbnz	r0, 800cac0 <__gethex+0xd0>
 800ca9e:	b94d      	cbnz	r5, 800cab4 <__gethex+0xc4>
 800caa0:	eb06 050a 	add.w	r5, r6, sl
 800caa4:	462a      	mov	r2, r5
 800caa6:	4616      	mov	r6, r2
 800caa8:	3201      	adds	r2, #1
 800caaa:	7830      	ldrb	r0, [r6, #0]
 800caac:	f7ff ff8a 	bl	800c9c4 <__hexdig_fun>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1f8      	bne.n	800caa6 <__gethex+0xb6>
 800cab4:	1bad      	subs	r5, r5, r6
 800cab6:	00ad      	lsls	r5, r5, #2
 800cab8:	e004      	b.n	800cac4 <__gethex+0xd4>
 800caba:	2400      	movs	r4, #0
 800cabc:	4625      	mov	r5, r4
 800cabe:	e7e0      	b.n	800ca82 <__gethex+0x92>
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	d1f7      	bne.n	800cab4 <__gethex+0xc4>
 800cac4:	7833      	ldrb	r3, [r6, #0]
 800cac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caca:	2b50      	cmp	r3, #80	; 0x50
 800cacc:	d13b      	bne.n	800cb46 <__gethex+0x156>
 800cace:	7873      	ldrb	r3, [r6, #1]
 800cad0:	2b2b      	cmp	r3, #43	; 0x2b
 800cad2:	d02c      	beq.n	800cb2e <__gethex+0x13e>
 800cad4:	2b2d      	cmp	r3, #45	; 0x2d
 800cad6:	d02e      	beq.n	800cb36 <__gethex+0x146>
 800cad8:	1c71      	adds	r1, r6, #1
 800cada:	f04f 0900 	mov.w	r9, #0
 800cade:	7808      	ldrb	r0, [r1, #0]
 800cae0:	f7ff ff70 	bl	800c9c4 <__hexdig_fun>
 800cae4:	1e43      	subs	r3, r0, #1
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b18      	cmp	r3, #24
 800caea:	d82c      	bhi.n	800cb46 <__gethex+0x156>
 800caec:	f1a0 0210 	sub.w	r2, r0, #16
 800caf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800caf4:	f7ff ff66 	bl	800c9c4 <__hexdig_fun>
 800caf8:	1e43      	subs	r3, r0, #1
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b18      	cmp	r3, #24
 800cafe:	d91d      	bls.n	800cb3c <__gethex+0x14c>
 800cb00:	f1b9 0f00 	cmp.w	r9, #0
 800cb04:	d000      	beq.n	800cb08 <__gethex+0x118>
 800cb06:	4252      	negs	r2, r2
 800cb08:	4415      	add	r5, r2
 800cb0a:	f8cb 1000 	str.w	r1, [fp]
 800cb0e:	b1e4      	cbz	r4, 800cb4a <__gethex+0x15a>
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	bf14      	ite	ne
 800cb16:	2700      	movne	r7, #0
 800cb18:	2706      	moveq	r7, #6
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	b009      	add	sp, #36	; 0x24
 800cb1e:	ecbd 8b02 	vpop	{d8}
 800cb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb26:	463e      	mov	r6, r7
 800cb28:	4625      	mov	r5, r4
 800cb2a:	2401      	movs	r4, #1
 800cb2c:	e7ca      	b.n	800cac4 <__gethex+0xd4>
 800cb2e:	f04f 0900 	mov.w	r9, #0
 800cb32:	1cb1      	adds	r1, r6, #2
 800cb34:	e7d3      	b.n	800cade <__gethex+0xee>
 800cb36:	f04f 0901 	mov.w	r9, #1
 800cb3a:	e7fa      	b.n	800cb32 <__gethex+0x142>
 800cb3c:	230a      	movs	r3, #10
 800cb3e:	fb03 0202 	mla	r2, r3, r2, r0
 800cb42:	3a10      	subs	r2, #16
 800cb44:	e7d4      	b.n	800caf0 <__gethex+0x100>
 800cb46:	4631      	mov	r1, r6
 800cb48:	e7df      	b.n	800cb0a <__gethex+0x11a>
 800cb4a:	1bf3      	subs	r3, r6, r7
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	4621      	mov	r1, r4
 800cb50:	2b07      	cmp	r3, #7
 800cb52:	dc0b      	bgt.n	800cb6c <__gethex+0x17c>
 800cb54:	ee18 0a10 	vmov	r0, s16
 800cb58:	f000 fa7e 	bl	800d058 <_Balloc>
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	b940      	cbnz	r0, 800cb72 <__gethex+0x182>
 800cb60:	4b5d      	ldr	r3, [pc, #372]	; (800ccd8 <__gethex+0x2e8>)
 800cb62:	4602      	mov	r2, r0
 800cb64:	21de      	movs	r1, #222	; 0xde
 800cb66:	485d      	ldr	r0, [pc, #372]	; (800ccdc <__gethex+0x2ec>)
 800cb68:	f7ff f830 	bl	800bbcc <__assert_func>
 800cb6c:	3101      	adds	r1, #1
 800cb6e:	105b      	asrs	r3, r3, #1
 800cb70:	e7ee      	b.n	800cb50 <__gethex+0x160>
 800cb72:	f100 0914 	add.w	r9, r0, #20
 800cb76:	f04f 0b00 	mov.w	fp, #0
 800cb7a:	f1ca 0301 	rsb	r3, sl, #1
 800cb7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb82:	f8cd b000 	str.w	fp, [sp]
 800cb86:	9306      	str	r3, [sp, #24]
 800cb88:	42b7      	cmp	r7, r6
 800cb8a:	d340      	bcc.n	800cc0e <__gethex+0x21e>
 800cb8c:	9802      	ldr	r0, [sp, #8]
 800cb8e:	9b00      	ldr	r3, [sp, #0]
 800cb90:	f840 3b04 	str.w	r3, [r0], #4
 800cb94:	eba0 0009 	sub.w	r0, r0, r9
 800cb98:	1080      	asrs	r0, r0, #2
 800cb9a:	0146      	lsls	r6, r0, #5
 800cb9c:	6120      	str	r0, [r4, #16]
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f000 fb4c 	bl	800d23c <__hi0bits>
 800cba4:	1a30      	subs	r0, r6, r0
 800cba6:	f8d8 6000 	ldr.w	r6, [r8]
 800cbaa:	42b0      	cmp	r0, r6
 800cbac:	dd63      	ble.n	800cc76 <__gethex+0x286>
 800cbae:	1b87      	subs	r7, r0, r6
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 fef0 	bl	800d998 <__any_on>
 800cbb8:	4682      	mov	sl, r0
 800cbba:	b1a8      	cbz	r0, 800cbe8 <__gethex+0x1f8>
 800cbbc:	1e7b      	subs	r3, r7, #1
 800cbbe:	1159      	asrs	r1, r3, #5
 800cbc0:	f003 021f 	and.w	r2, r3, #31
 800cbc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cbc8:	f04f 0a01 	mov.w	sl, #1
 800cbcc:	fa0a f202 	lsl.w	r2, sl, r2
 800cbd0:	420a      	tst	r2, r1
 800cbd2:	d009      	beq.n	800cbe8 <__gethex+0x1f8>
 800cbd4:	4553      	cmp	r3, sl
 800cbd6:	dd05      	ble.n	800cbe4 <__gethex+0x1f4>
 800cbd8:	1eb9      	subs	r1, r7, #2
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f000 fedc 	bl	800d998 <__any_on>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d145      	bne.n	800cc70 <__gethex+0x280>
 800cbe4:	f04f 0a02 	mov.w	sl, #2
 800cbe8:	4639      	mov	r1, r7
 800cbea:	4620      	mov	r0, r4
 800cbec:	f7ff fe98 	bl	800c920 <rshift>
 800cbf0:	443d      	add	r5, r7
 800cbf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbf6:	42ab      	cmp	r3, r5
 800cbf8:	da4c      	bge.n	800cc94 <__gethex+0x2a4>
 800cbfa:	ee18 0a10 	vmov	r0, s16
 800cbfe:	4621      	mov	r1, r4
 800cc00:	f000 fa6a 	bl	800d0d8 <_Bfree>
 800cc04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc06:	2300      	movs	r3, #0
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	27a3      	movs	r7, #163	; 0xa3
 800cc0c:	e785      	b.n	800cb1a <__gethex+0x12a>
 800cc0e:	1e73      	subs	r3, r6, #1
 800cc10:	9a05      	ldr	r2, [sp, #20]
 800cc12:	9303      	str	r3, [sp, #12]
 800cc14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d019      	beq.n	800cc50 <__gethex+0x260>
 800cc1c:	f1bb 0f20 	cmp.w	fp, #32
 800cc20:	d107      	bne.n	800cc32 <__gethex+0x242>
 800cc22:	9b02      	ldr	r3, [sp, #8]
 800cc24:	9a00      	ldr	r2, [sp, #0]
 800cc26:	f843 2b04 	str.w	r2, [r3], #4
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	469b      	mov	fp, r3
 800cc32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cc36:	f7ff fec5 	bl	800c9c4 <__hexdig_fun>
 800cc3a:	9b00      	ldr	r3, [sp, #0]
 800cc3c:	f000 000f 	and.w	r0, r0, #15
 800cc40:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc44:	4303      	orrs	r3, r0
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	f10b 0b04 	add.w	fp, fp, #4
 800cc4c:	9b03      	ldr	r3, [sp, #12]
 800cc4e:	e00d      	b.n	800cc6c <__gethex+0x27c>
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	9a06      	ldr	r2, [sp, #24]
 800cc54:	4413      	add	r3, r2
 800cc56:	42bb      	cmp	r3, r7
 800cc58:	d3e0      	bcc.n	800cc1c <__gethex+0x22c>
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	9901      	ldr	r1, [sp, #4]
 800cc5e:	9307      	str	r3, [sp, #28]
 800cc60:	4652      	mov	r2, sl
 800cc62:	f001 fa81 	bl	800e168 <strncmp>
 800cc66:	9b07      	ldr	r3, [sp, #28]
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1d7      	bne.n	800cc1c <__gethex+0x22c>
 800cc6c:	461e      	mov	r6, r3
 800cc6e:	e78b      	b.n	800cb88 <__gethex+0x198>
 800cc70:	f04f 0a03 	mov.w	sl, #3
 800cc74:	e7b8      	b.n	800cbe8 <__gethex+0x1f8>
 800cc76:	da0a      	bge.n	800cc8e <__gethex+0x29e>
 800cc78:	1a37      	subs	r7, r6, r0
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	ee18 0a10 	vmov	r0, s16
 800cc80:	463a      	mov	r2, r7
 800cc82:	f000 fc45 	bl	800d510 <__lshift>
 800cc86:	1bed      	subs	r5, r5, r7
 800cc88:	4604      	mov	r4, r0
 800cc8a:	f100 0914 	add.w	r9, r0, #20
 800cc8e:	f04f 0a00 	mov.w	sl, #0
 800cc92:	e7ae      	b.n	800cbf2 <__gethex+0x202>
 800cc94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc98:	42a8      	cmp	r0, r5
 800cc9a:	dd72      	ble.n	800cd82 <__gethex+0x392>
 800cc9c:	1b45      	subs	r5, r0, r5
 800cc9e:	42ae      	cmp	r6, r5
 800cca0:	dc36      	bgt.n	800cd10 <__gethex+0x320>
 800cca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d02a      	beq.n	800cd00 <__gethex+0x310>
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d02c      	beq.n	800cd08 <__gethex+0x318>
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d11c      	bne.n	800ccec <__gethex+0x2fc>
 800ccb2:	42ae      	cmp	r6, r5
 800ccb4:	d11a      	bne.n	800ccec <__gethex+0x2fc>
 800ccb6:	2e01      	cmp	r6, #1
 800ccb8:	d112      	bne.n	800cce0 <__gethex+0x2f0>
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ccc0:	6013      	str	r3, [r2, #0]
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	f8c9 3000 	str.w	r3, [r9]
 800ccca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cccc:	2762      	movs	r7, #98	; 0x62
 800ccce:	601c      	str	r4, [r3, #0]
 800ccd0:	e723      	b.n	800cb1a <__gethex+0x12a>
 800ccd2:	bf00      	nop
 800ccd4:	0800ede0 	.word	0x0800ede0
 800ccd8:	0800ed68 	.word	0x0800ed68
 800ccdc:	0800ed79 	.word	0x0800ed79
 800cce0:	1e71      	subs	r1, r6, #1
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fe58 	bl	800d998 <__any_on>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d1e6      	bne.n	800ccba <__gethex+0x2ca>
 800ccec:	ee18 0a10 	vmov	r0, s16
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	f000 f9f1 	bl	800d0d8 <_Bfree>
 800ccf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	2750      	movs	r7, #80	; 0x50
 800ccfe:	e70c      	b.n	800cb1a <__gethex+0x12a>
 800cd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1f2      	bne.n	800ccec <__gethex+0x2fc>
 800cd06:	e7d8      	b.n	800ccba <__gethex+0x2ca>
 800cd08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1d5      	bne.n	800ccba <__gethex+0x2ca>
 800cd0e:	e7ed      	b.n	800ccec <__gethex+0x2fc>
 800cd10:	1e6f      	subs	r7, r5, #1
 800cd12:	f1ba 0f00 	cmp.w	sl, #0
 800cd16:	d131      	bne.n	800cd7c <__gethex+0x38c>
 800cd18:	b127      	cbz	r7, 800cd24 <__gethex+0x334>
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 fe3b 	bl	800d998 <__any_on>
 800cd22:	4682      	mov	sl, r0
 800cd24:	117b      	asrs	r3, r7, #5
 800cd26:	2101      	movs	r1, #1
 800cd28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cd2c:	f007 071f 	and.w	r7, r7, #31
 800cd30:	fa01 f707 	lsl.w	r7, r1, r7
 800cd34:	421f      	tst	r7, r3
 800cd36:	4629      	mov	r1, r5
 800cd38:	4620      	mov	r0, r4
 800cd3a:	bf18      	it	ne
 800cd3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800cd40:	1b76      	subs	r6, r6, r5
 800cd42:	f7ff fded 	bl	800c920 <rshift>
 800cd46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd4a:	2702      	movs	r7, #2
 800cd4c:	f1ba 0f00 	cmp.w	sl, #0
 800cd50:	d048      	beq.n	800cde4 <__gethex+0x3f4>
 800cd52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d015      	beq.n	800cd86 <__gethex+0x396>
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d017      	beq.n	800cd8e <__gethex+0x39e>
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d109      	bne.n	800cd76 <__gethex+0x386>
 800cd62:	f01a 0f02 	tst.w	sl, #2
 800cd66:	d006      	beq.n	800cd76 <__gethex+0x386>
 800cd68:	f8d9 0000 	ldr.w	r0, [r9]
 800cd6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd70:	f01a 0f01 	tst.w	sl, #1
 800cd74:	d10e      	bne.n	800cd94 <__gethex+0x3a4>
 800cd76:	f047 0710 	orr.w	r7, r7, #16
 800cd7a:	e033      	b.n	800cde4 <__gethex+0x3f4>
 800cd7c:	f04f 0a01 	mov.w	sl, #1
 800cd80:	e7d0      	b.n	800cd24 <__gethex+0x334>
 800cd82:	2701      	movs	r7, #1
 800cd84:	e7e2      	b.n	800cd4c <__gethex+0x35c>
 800cd86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd88:	f1c3 0301 	rsb	r3, r3, #1
 800cd8c:	9315      	str	r3, [sp, #84]	; 0x54
 800cd8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d0f0      	beq.n	800cd76 <__gethex+0x386>
 800cd94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd98:	f104 0314 	add.w	r3, r4, #20
 800cd9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cda0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cda4:	f04f 0c00 	mov.w	ip, #0
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdb2:	d01c      	beq.n	800cdee <__gethex+0x3fe>
 800cdb4:	3201      	adds	r2, #1
 800cdb6:	6002      	str	r2, [r0, #0]
 800cdb8:	2f02      	cmp	r7, #2
 800cdba:	f104 0314 	add.w	r3, r4, #20
 800cdbe:	d13f      	bne.n	800ce40 <__gethex+0x450>
 800cdc0:	f8d8 2000 	ldr.w	r2, [r8]
 800cdc4:	3a01      	subs	r2, #1
 800cdc6:	42b2      	cmp	r2, r6
 800cdc8:	d10a      	bne.n	800cde0 <__gethex+0x3f0>
 800cdca:	1171      	asrs	r1, r6, #5
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdd2:	f006 061f 	and.w	r6, r6, #31
 800cdd6:	fa02 f606 	lsl.w	r6, r2, r6
 800cdda:	421e      	tst	r6, r3
 800cddc:	bf18      	it	ne
 800cdde:	4617      	movne	r7, r2
 800cde0:	f047 0720 	orr.w	r7, r7, #32
 800cde4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cde6:	601c      	str	r4, [r3, #0]
 800cde8:	9b04      	ldr	r3, [sp, #16]
 800cdea:	601d      	str	r5, [r3, #0]
 800cdec:	e695      	b.n	800cb1a <__gethex+0x12a>
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	f843 cc04 	str.w	ip, [r3, #-4]
 800cdf4:	d8d8      	bhi.n	800cda8 <__gethex+0x3b8>
 800cdf6:	68a3      	ldr	r3, [r4, #8]
 800cdf8:	459b      	cmp	fp, r3
 800cdfa:	db19      	blt.n	800ce30 <__gethex+0x440>
 800cdfc:	6861      	ldr	r1, [r4, #4]
 800cdfe:	ee18 0a10 	vmov	r0, s16
 800ce02:	3101      	adds	r1, #1
 800ce04:	f000 f928 	bl	800d058 <_Balloc>
 800ce08:	4681      	mov	r9, r0
 800ce0a:	b918      	cbnz	r0, 800ce14 <__gethex+0x424>
 800ce0c:	4b1a      	ldr	r3, [pc, #104]	; (800ce78 <__gethex+0x488>)
 800ce0e:	4602      	mov	r2, r0
 800ce10:	2184      	movs	r1, #132	; 0x84
 800ce12:	e6a8      	b.n	800cb66 <__gethex+0x176>
 800ce14:	6922      	ldr	r2, [r4, #16]
 800ce16:	3202      	adds	r2, #2
 800ce18:	f104 010c 	add.w	r1, r4, #12
 800ce1c:	0092      	lsls	r2, r2, #2
 800ce1e:	300c      	adds	r0, #12
 800ce20:	f000 f90c 	bl	800d03c <memcpy>
 800ce24:	4621      	mov	r1, r4
 800ce26:	ee18 0a10 	vmov	r0, s16
 800ce2a:	f000 f955 	bl	800d0d8 <_Bfree>
 800ce2e:	464c      	mov	r4, r9
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce38:	6122      	str	r2, [r4, #16]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	615a      	str	r2, [r3, #20]
 800ce3e:	e7bb      	b.n	800cdb8 <__gethex+0x3c8>
 800ce40:	6922      	ldr	r2, [r4, #16]
 800ce42:	455a      	cmp	r2, fp
 800ce44:	dd0b      	ble.n	800ce5e <__gethex+0x46e>
 800ce46:	2101      	movs	r1, #1
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f7ff fd69 	bl	800c920 <rshift>
 800ce4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce52:	3501      	adds	r5, #1
 800ce54:	42ab      	cmp	r3, r5
 800ce56:	f6ff aed0 	blt.w	800cbfa <__gethex+0x20a>
 800ce5a:	2701      	movs	r7, #1
 800ce5c:	e7c0      	b.n	800cde0 <__gethex+0x3f0>
 800ce5e:	f016 061f 	ands.w	r6, r6, #31
 800ce62:	d0fa      	beq.n	800ce5a <__gethex+0x46a>
 800ce64:	4453      	add	r3, sl
 800ce66:	f1c6 0620 	rsb	r6, r6, #32
 800ce6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce6e:	f000 f9e5 	bl	800d23c <__hi0bits>
 800ce72:	42b0      	cmp	r0, r6
 800ce74:	dbe7      	blt.n	800ce46 <__gethex+0x456>
 800ce76:	e7f0      	b.n	800ce5a <__gethex+0x46a>
 800ce78:	0800ed68 	.word	0x0800ed68

0800ce7c <L_shift>:
 800ce7c:	f1c2 0208 	rsb	r2, r2, #8
 800ce80:	0092      	lsls	r2, r2, #2
 800ce82:	b570      	push	{r4, r5, r6, lr}
 800ce84:	f1c2 0620 	rsb	r6, r2, #32
 800ce88:	6843      	ldr	r3, [r0, #4]
 800ce8a:	6804      	ldr	r4, [r0, #0]
 800ce8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ce90:	432c      	orrs	r4, r5
 800ce92:	40d3      	lsrs	r3, r2
 800ce94:	6004      	str	r4, [r0, #0]
 800ce96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce9a:	4288      	cmp	r0, r1
 800ce9c:	d3f4      	bcc.n	800ce88 <L_shift+0xc>
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}

0800cea0 <__match>:
 800cea0:	b530      	push	{r4, r5, lr}
 800cea2:	6803      	ldr	r3, [r0, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceaa:	b914      	cbnz	r4, 800ceb2 <__match+0x12>
 800ceac:	6003      	str	r3, [r0, #0]
 800ceae:	2001      	movs	r0, #1
 800ceb0:	bd30      	pop	{r4, r5, pc}
 800ceb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ceba:	2d19      	cmp	r5, #25
 800cebc:	bf98      	it	ls
 800cebe:	3220      	addls	r2, #32
 800cec0:	42a2      	cmp	r2, r4
 800cec2:	d0f0      	beq.n	800cea6 <__match+0x6>
 800cec4:	2000      	movs	r0, #0
 800cec6:	e7f3      	b.n	800ceb0 <__match+0x10>

0800cec8 <__hexnan>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	680b      	ldr	r3, [r1, #0]
 800cece:	115e      	asrs	r6, r3, #5
 800ced0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ced4:	f013 031f 	ands.w	r3, r3, #31
 800ced8:	b087      	sub	sp, #28
 800ceda:	bf18      	it	ne
 800cedc:	3604      	addne	r6, #4
 800cede:	2500      	movs	r5, #0
 800cee0:	1f37      	subs	r7, r6, #4
 800cee2:	4690      	mov	r8, r2
 800cee4:	6802      	ldr	r2, [r0, #0]
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	4682      	mov	sl, r0
 800ceea:	f846 5c04 	str.w	r5, [r6, #-4]
 800ceee:	46b9      	mov	r9, r7
 800cef0:	463c      	mov	r4, r7
 800cef2:	9502      	str	r5, [sp, #8]
 800cef4:	46ab      	mov	fp, r5
 800cef6:	7851      	ldrb	r1, [r2, #1]
 800cef8:	1c53      	adds	r3, r2, #1
 800cefa:	9303      	str	r3, [sp, #12]
 800cefc:	b341      	cbz	r1, 800cf50 <__hexnan+0x88>
 800cefe:	4608      	mov	r0, r1
 800cf00:	9205      	str	r2, [sp, #20]
 800cf02:	9104      	str	r1, [sp, #16]
 800cf04:	f7ff fd5e 	bl	800c9c4 <__hexdig_fun>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d14f      	bne.n	800cfac <__hexnan+0xe4>
 800cf0c:	9904      	ldr	r1, [sp, #16]
 800cf0e:	9a05      	ldr	r2, [sp, #20]
 800cf10:	2920      	cmp	r1, #32
 800cf12:	d818      	bhi.n	800cf46 <__hexnan+0x7e>
 800cf14:	9b02      	ldr	r3, [sp, #8]
 800cf16:	459b      	cmp	fp, r3
 800cf18:	dd13      	ble.n	800cf42 <__hexnan+0x7a>
 800cf1a:	454c      	cmp	r4, r9
 800cf1c:	d206      	bcs.n	800cf2c <__hexnan+0x64>
 800cf1e:	2d07      	cmp	r5, #7
 800cf20:	dc04      	bgt.n	800cf2c <__hexnan+0x64>
 800cf22:	462a      	mov	r2, r5
 800cf24:	4649      	mov	r1, r9
 800cf26:	4620      	mov	r0, r4
 800cf28:	f7ff ffa8 	bl	800ce7c <L_shift>
 800cf2c:	4544      	cmp	r4, r8
 800cf2e:	d950      	bls.n	800cfd2 <__hexnan+0x10a>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f1a4 0904 	sub.w	r9, r4, #4
 800cf36:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf3a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf3e:	464c      	mov	r4, r9
 800cf40:	461d      	mov	r5, r3
 800cf42:	9a03      	ldr	r2, [sp, #12]
 800cf44:	e7d7      	b.n	800cef6 <__hexnan+0x2e>
 800cf46:	2929      	cmp	r1, #41	; 0x29
 800cf48:	d156      	bne.n	800cff8 <__hexnan+0x130>
 800cf4a:	3202      	adds	r2, #2
 800cf4c:	f8ca 2000 	str.w	r2, [sl]
 800cf50:	f1bb 0f00 	cmp.w	fp, #0
 800cf54:	d050      	beq.n	800cff8 <__hexnan+0x130>
 800cf56:	454c      	cmp	r4, r9
 800cf58:	d206      	bcs.n	800cf68 <__hexnan+0xa0>
 800cf5a:	2d07      	cmp	r5, #7
 800cf5c:	dc04      	bgt.n	800cf68 <__hexnan+0xa0>
 800cf5e:	462a      	mov	r2, r5
 800cf60:	4649      	mov	r1, r9
 800cf62:	4620      	mov	r0, r4
 800cf64:	f7ff ff8a 	bl	800ce7c <L_shift>
 800cf68:	4544      	cmp	r4, r8
 800cf6a:	d934      	bls.n	800cfd6 <__hexnan+0x10e>
 800cf6c:	f1a8 0204 	sub.w	r2, r8, #4
 800cf70:	4623      	mov	r3, r4
 800cf72:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf76:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf7a:	429f      	cmp	r7, r3
 800cf7c:	d2f9      	bcs.n	800cf72 <__hexnan+0xaa>
 800cf7e:	1b3b      	subs	r3, r7, r4
 800cf80:	f023 0303 	bic.w	r3, r3, #3
 800cf84:	3304      	adds	r3, #4
 800cf86:	3401      	adds	r4, #1
 800cf88:	3e03      	subs	r6, #3
 800cf8a:	42b4      	cmp	r4, r6
 800cf8c:	bf88      	it	hi
 800cf8e:	2304      	movhi	r3, #4
 800cf90:	4443      	add	r3, r8
 800cf92:	2200      	movs	r2, #0
 800cf94:	f843 2b04 	str.w	r2, [r3], #4
 800cf98:	429f      	cmp	r7, r3
 800cf9a:	d2fb      	bcs.n	800cf94 <__hexnan+0xcc>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	b91b      	cbnz	r3, 800cfa8 <__hexnan+0xe0>
 800cfa0:	4547      	cmp	r7, r8
 800cfa2:	d127      	bne.n	800cff4 <__hexnan+0x12c>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	603b      	str	r3, [r7, #0]
 800cfa8:	2005      	movs	r0, #5
 800cfaa:	e026      	b.n	800cffa <__hexnan+0x132>
 800cfac:	3501      	adds	r5, #1
 800cfae:	2d08      	cmp	r5, #8
 800cfb0:	f10b 0b01 	add.w	fp, fp, #1
 800cfb4:	dd06      	ble.n	800cfc4 <__hexnan+0xfc>
 800cfb6:	4544      	cmp	r4, r8
 800cfb8:	d9c3      	bls.n	800cf42 <__hexnan+0x7a>
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfc0:	2501      	movs	r5, #1
 800cfc2:	3c04      	subs	r4, #4
 800cfc4:	6822      	ldr	r2, [r4, #0]
 800cfc6:	f000 000f 	and.w	r0, r0, #15
 800cfca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cfce:	6022      	str	r2, [r4, #0]
 800cfd0:	e7b7      	b.n	800cf42 <__hexnan+0x7a>
 800cfd2:	2508      	movs	r5, #8
 800cfd4:	e7b5      	b.n	800cf42 <__hexnan+0x7a>
 800cfd6:	9b01      	ldr	r3, [sp, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0df      	beq.n	800cf9c <__hexnan+0xd4>
 800cfdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe0:	f1c3 0320 	rsb	r3, r3, #32
 800cfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cfec:	401a      	ands	r2, r3
 800cfee:	f846 2c04 	str.w	r2, [r6, #-4]
 800cff2:	e7d3      	b.n	800cf9c <__hexnan+0xd4>
 800cff4:	3f04      	subs	r7, #4
 800cff6:	e7d1      	b.n	800cf9c <__hexnan+0xd4>
 800cff8:	2004      	movs	r0, #4
 800cffa:	b007      	add	sp, #28
 800cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d000 <_localeconv_r>:
 800d000:	4800      	ldr	r0, [pc, #0]	; (800d004 <_localeconv_r+0x4>)
 800d002:	4770      	bx	lr
 800d004:	20000168 	.word	0x20000168

0800d008 <malloc>:
 800d008:	4b02      	ldr	r3, [pc, #8]	; (800d014 <malloc+0xc>)
 800d00a:	4601      	mov	r1, r0
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	f000 bd67 	b.w	800dae0 <_malloc_r>
 800d012:	bf00      	nop
 800d014:	20000010 	.word	0x20000010

0800d018 <__ascii_mbtowc>:
 800d018:	b082      	sub	sp, #8
 800d01a:	b901      	cbnz	r1, 800d01e <__ascii_mbtowc+0x6>
 800d01c:	a901      	add	r1, sp, #4
 800d01e:	b142      	cbz	r2, 800d032 <__ascii_mbtowc+0x1a>
 800d020:	b14b      	cbz	r3, 800d036 <__ascii_mbtowc+0x1e>
 800d022:	7813      	ldrb	r3, [r2, #0]
 800d024:	600b      	str	r3, [r1, #0]
 800d026:	7812      	ldrb	r2, [r2, #0]
 800d028:	1e10      	subs	r0, r2, #0
 800d02a:	bf18      	it	ne
 800d02c:	2001      	movne	r0, #1
 800d02e:	b002      	add	sp, #8
 800d030:	4770      	bx	lr
 800d032:	4610      	mov	r0, r2
 800d034:	e7fb      	b.n	800d02e <__ascii_mbtowc+0x16>
 800d036:	f06f 0001 	mvn.w	r0, #1
 800d03a:	e7f8      	b.n	800d02e <__ascii_mbtowc+0x16>

0800d03c <memcpy>:
 800d03c:	440a      	add	r2, r1
 800d03e:	4291      	cmp	r1, r2
 800d040:	f100 33ff 	add.w	r3, r0, #4294967295
 800d044:	d100      	bne.n	800d048 <memcpy+0xc>
 800d046:	4770      	bx	lr
 800d048:	b510      	push	{r4, lr}
 800d04a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d04e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d052:	4291      	cmp	r1, r2
 800d054:	d1f9      	bne.n	800d04a <memcpy+0xe>
 800d056:	bd10      	pop	{r4, pc}

0800d058 <_Balloc>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d05c:	4604      	mov	r4, r0
 800d05e:	460d      	mov	r5, r1
 800d060:	b976      	cbnz	r6, 800d080 <_Balloc+0x28>
 800d062:	2010      	movs	r0, #16
 800d064:	f7ff ffd0 	bl	800d008 <malloc>
 800d068:	4602      	mov	r2, r0
 800d06a:	6260      	str	r0, [r4, #36]	; 0x24
 800d06c:	b920      	cbnz	r0, 800d078 <_Balloc+0x20>
 800d06e:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <_Balloc+0x78>)
 800d070:	4818      	ldr	r0, [pc, #96]	; (800d0d4 <_Balloc+0x7c>)
 800d072:	2166      	movs	r1, #102	; 0x66
 800d074:	f7fe fdaa 	bl	800bbcc <__assert_func>
 800d078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d07c:	6006      	str	r6, [r0, #0]
 800d07e:	60c6      	str	r6, [r0, #12]
 800d080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d082:	68f3      	ldr	r3, [r6, #12]
 800d084:	b183      	cbz	r3, 800d0a8 <_Balloc+0x50>
 800d086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d08e:	b9b8      	cbnz	r0, 800d0c0 <_Balloc+0x68>
 800d090:	2101      	movs	r1, #1
 800d092:	fa01 f605 	lsl.w	r6, r1, r5
 800d096:	1d72      	adds	r2, r6, #5
 800d098:	0092      	lsls	r2, r2, #2
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 fc9d 	bl	800d9da <_calloc_r>
 800d0a0:	b160      	cbz	r0, 800d0bc <_Balloc+0x64>
 800d0a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0a6:	e00e      	b.n	800d0c6 <_Balloc+0x6e>
 800d0a8:	2221      	movs	r2, #33	; 0x21
 800d0aa:	2104      	movs	r1, #4
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f000 fc94 	bl	800d9da <_calloc_r>
 800d0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0b4:	60f0      	str	r0, [r6, #12]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1e4      	bne.n	800d086 <_Balloc+0x2e>
 800d0bc:	2000      	movs	r0, #0
 800d0be:	bd70      	pop	{r4, r5, r6, pc}
 800d0c0:	6802      	ldr	r2, [r0, #0]
 800d0c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0cc:	e7f7      	b.n	800d0be <_Balloc+0x66>
 800d0ce:	bf00      	nop
 800d0d0:	0800ec50 	.word	0x0800ec50
 800d0d4:	0800edf4 	.word	0x0800edf4

0800d0d8 <_Bfree>:
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0dc:	4605      	mov	r5, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	b976      	cbnz	r6, 800d100 <_Bfree+0x28>
 800d0e2:	2010      	movs	r0, #16
 800d0e4:	f7ff ff90 	bl	800d008 <malloc>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	6268      	str	r0, [r5, #36]	; 0x24
 800d0ec:	b920      	cbnz	r0, 800d0f8 <_Bfree+0x20>
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <_Bfree+0x3c>)
 800d0f0:	4809      	ldr	r0, [pc, #36]	; (800d118 <_Bfree+0x40>)
 800d0f2:	218a      	movs	r1, #138	; 0x8a
 800d0f4:	f7fe fd6a 	bl	800bbcc <__assert_func>
 800d0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0fc:	6006      	str	r6, [r0, #0]
 800d0fe:	60c6      	str	r6, [r0, #12]
 800d100:	b13c      	cbz	r4, 800d112 <_Bfree+0x3a>
 800d102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d104:	6862      	ldr	r2, [r4, #4]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d10c:	6021      	str	r1, [r4, #0]
 800d10e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	0800ec50 	.word	0x0800ec50
 800d118:	0800edf4 	.word	0x0800edf4

0800d11c <__multadd>:
 800d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d120:	690d      	ldr	r5, [r1, #16]
 800d122:	4607      	mov	r7, r0
 800d124:	460c      	mov	r4, r1
 800d126:	461e      	mov	r6, r3
 800d128:	f101 0c14 	add.w	ip, r1, #20
 800d12c:	2000      	movs	r0, #0
 800d12e:	f8dc 3000 	ldr.w	r3, [ip]
 800d132:	b299      	uxth	r1, r3
 800d134:	fb02 6101 	mla	r1, r2, r1, r6
 800d138:	0c1e      	lsrs	r6, r3, #16
 800d13a:	0c0b      	lsrs	r3, r1, #16
 800d13c:	fb02 3306 	mla	r3, r2, r6, r3
 800d140:	b289      	uxth	r1, r1
 800d142:	3001      	adds	r0, #1
 800d144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d148:	4285      	cmp	r5, r0
 800d14a:	f84c 1b04 	str.w	r1, [ip], #4
 800d14e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d152:	dcec      	bgt.n	800d12e <__multadd+0x12>
 800d154:	b30e      	cbz	r6, 800d19a <__multadd+0x7e>
 800d156:	68a3      	ldr	r3, [r4, #8]
 800d158:	42ab      	cmp	r3, r5
 800d15a:	dc19      	bgt.n	800d190 <__multadd+0x74>
 800d15c:	6861      	ldr	r1, [r4, #4]
 800d15e:	4638      	mov	r0, r7
 800d160:	3101      	adds	r1, #1
 800d162:	f7ff ff79 	bl	800d058 <_Balloc>
 800d166:	4680      	mov	r8, r0
 800d168:	b928      	cbnz	r0, 800d176 <__multadd+0x5a>
 800d16a:	4602      	mov	r2, r0
 800d16c:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <__multadd+0x84>)
 800d16e:	480d      	ldr	r0, [pc, #52]	; (800d1a4 <__multadd+0x88>)
 800d170:	21b5      	movs	r1, #181	; 0xb5
 800d172:	f7fe fd2b 	bl	800bbcc <__assert_func>
 800d176:	6922      	ldr	r2, [r4, #16]
 800d178:	3202      	adds	r2, #2
 800d17a:	f104 010c 	add.w	r1, r4, #12
 800d17e:	0092      	lsls	r2, r2, #2
 800d180:	300c      	adds	r0, #12
 800d182:	f7ff ff5b 	bl	800d03c <memcpy>
 800d186:	4621      	mov	r1, r4
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff ffa5 	bl	800d0d8 <_Bfree>
 800d18e:	4644      	mov	r4, r8
 800d190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d194:	3501      	adds	r5, #1
 800d196:	615e      	str	r6, [r3, #20]
 800d198:	6125      	str	r5, [r4, #16]
 800d19a:	4620      	mov	r0, r4
 800d19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a0:	0800ed68 	.word	0x0800ed68
 800d1a4:	0800edf4 	.word	0x0800edf4

0800d1a8 <__s2b>:
 800d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	4615      	mov	r5, r2
 800d1b0:	461f      	mov	r7, r3
 800d1b2:	2209      	movs	r2, #9
 800d1b4:	3308      	adds	r3, #8
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1bc:	2100      	movs	r1, #0
 800d1be:	2201      	movs	r2, #1
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	db09      	blt.n	800d1d8 <__s2b+0x30>
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f7ff ff47 	bl	800d058 <_Balloc>
 800d1ca:	b940      	cbnz	r0, 800d1de <__s2b+0x36>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	4b19      	ldr	r3, [pc, #100]	; (800d234 <__s2b+0x8c>)
 800d1d0:	4819      	ldr	r0, [pc, #100]	; (800d238 <__s2b+0x90>)
 800d1d2:	21ce      	movs	r1, #206	; 0xce
 800d1d4:	f7fe fcfa 	bl	800bbcc <__assert_func>
 800d1d8:	0052      	lsls	r2, r2, #1
 800d1da:	3101      	adds	r1, #1
 800d1dc:	e7f0      	b.n	800d1c0 <__s2b+0x18>
 800d1de:	9b08      	ldr	r3, [sp, #32]
 800d1e0:	6143      	str	r3, [r0, #20]
 800d1e2:	2d09      	cmp	r5, #9
 800d1e4:	f04f 0301 	mov.w	r3, #1
 800d1e8:	6103      	str	r3, [r0, #16]
 800d1ea:	dd16      	ble.n	800d21a <__s2b+0x72>
 800d1ec:	f104 0909 	add.w	r9, r4, #9
 800d1f0:	46c8      	mov	r8, r9
 800d1f2:	442c      	add	r4, r5
 800d1f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	3b30      	subs	r3, #48	; 0x30
 800d1fc:	220a      	movs	r2, #10
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ff8c 	bl	800d11c <__multadd>
 800d204:	45a0      	cmp	r8, r4
 800d206:	d1f5      	bne.n	800d1f4 <__s2b+0x4c>
 800d208:	f1a5 0408 	sub.w	r4, r5, #8
 800d20c:	444c      	add	r4, r9
 800d20e:	1b2d      	subs	r5, r5, r4
 800d210:	1963      	adds	r3, r4, r5
 800d212:	42bb      	cmp	r3, r7
 800d214:	db04      	blt.n	800d220 <__s2b+0x78>
 800d216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d21a:	340a      	adds	r4, #10
 800d21c:	2509      	movs	r5, #9
 800d21e:	e7f6      	b.n	800d20e <__s2b+0x66>
 800d220:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d224:	4601      	mov	r1, r0
 800d226:	3b30      	subs	r3, #48	; 0x30
 800d228:	220a      	movs	r2, #10
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7ff ff76 	bl	800d11c <__multadd>
 800d230:	e7ee      	b.n	800d210 <__s2b+0x68>
 800d232:	bf00      	nop
 800d234:	0800ed68 	.word	0x0800ed68
 800d238:	0800edf4 	.word	0x0800edf4

0800d23c <__hi0bits>:
 800d23c:	0c03      	lsrs	r3, r0, #16
 800d23e:	041b      	lsls	r3, r3, #16
 800d240:	b9d3      	cbnz	r3, 800d278 <__hi0bits+0x3c>
 800d242:	0400      	lsls	r0, r0, #16
 800d244:	2310      	movs	r3, #16
 800d246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d24a:	bf04      	itt	eq
 800d24c:	0200      	lsleq	r0, r0, #8
 800d24e:	3308      	addeq	r3, #8
 800d250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d254:	bf04      	itt	eq
 800d256:	0100      	lsleq	r0, r0, #4
 800d258:	3304      	addeq	r3, #4
 800d25a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d25e:	bf04      	itt	eq
 800d260:	0080      	lsleq	r0, r0, #2
 800d262:	3302      	addeq	r3, #2
 800d264:	2800      	cmp	r0, #0
 800d266:	db05      	blt.n	800d274 <__hi0bits+0x38>
 800d268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d26c:	f103 0301 	add.w	r3, r3, #1
 800d270:	bf08      	it	eq
 800d272:	2320      	moveq	r3, #32
 800d274:	4618      	mov	r0, r3
 800d276:	4770      	bx	lr
 800d278:	2300      	movs	r3, #0
 800d27a:	e7e4      	b.n	800d246 <__hi0bits+0xa>

0800d27c <__lo0bits>:
 800d27c:	6803      	ldr	r3, [r0, #0]
 800d27e:	f013 0207 	ands.w	r2, r3, #7
 800d282:	4601      	mov	r1, r0
 800d284:	d00b      	beq.n	800d29e <__lo0bits+0x22>
 800d286:	07da      	lsls	r2, r3, #31
 800d288:	d423      	bmi.n	800d2d2 <__lo0bits+0x56>
 800d28a:	0798      	lsls	r0, r3, #30
 800d28c:	bf49      	itett	mi
 800d28e:	085b      	lsrmi	r3, r3, #1
 800d290:	089b      	lsrpl	r3, r3, #2
 800d292:	2001      	movmi	r0, #1
 800d294:	600b      	strmi	r3, [r1, #0]
 800d296:	bf5c      	itt	pl
 800d298:	600b      	strpl	r3, [r1, #0]
 800d29a:	2002      	movpl	r0, #2
 800d29c:	4770      	bx	lr
 800d29e:	b298      	uxth	r0, r3
 800d2a0:	b9a8      	cbnz	r0, 800d2ce <__lo0bits+0x52>
 800d2a2:	0c1b      	lsrs	r3, r3, #16
 800d2a4:	2010      	movs	r0, #16
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	b90a      	cbnz	r2, 800d2ae <__lo0bits+0x32>
 800d2aa:	3008      	adds	r0, #8
 800d2ac:	0a1b      	lsrs	r3, r3, #8
 800d2ae:	071a      	lsls	r2, r3, #28
 800d2b0:	bf04      	itt	eq
 800d2b2:	091b      	lsreq	r3, r3, #4
 800d2b4:	3004      	addeq	r0, #4
 800d2b6:	079a      	lsls	r2, r3, #30
 800d2b8:	bf04      	itt	eq
 800d2ba:	089b      	lsreq	r3, r3, #2
 800d2bc:	3002      	addeq	r0, #2
 800d2be:	07da      	lsls	r2, r3, #31
 800d2c0:	d403      	bmi.n	800d2ca <__lo0bits+0x4e>
 800d2c2:	085b      	lsrs	r3, r3, #1
 800d2c4:	f100 0001 	add.w	r0, r0, #1
 800d2c8:	d005      	beq.n	800d2d6 <__lo0bits+0x5a>
 800d2ca:	600b      	str	r3, [r1, #0]
 800d2cc:	4770      	bx	lr
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	e7e9      	b.n	800d2a6 <__lo0bits+0x2a>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	4770      	bx	lr
 800d2d6:	2020      	movs	r0, #32
 800d2d8:	4770      	bx	lr
	...

0800d2dc <__i2b>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	460c      	mov	r4, r1
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	f7ff feb9 	bl	800d058 <_Balloc>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	b928      	cbnz	r0, 800d2f6 <__i2b+0x1a>
 800d2ea:	4b05      	ldr	r3, [pc, #20]	; (800d300 <__i2b+0x24>)
 800d2ec:	4805      	ldr	r0, [pc, #20]	; (800d304 <__i2b+0x28>)
 800d2ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d2f2:	f7fe fc6b 	bl	800bbcc <__assert_func>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	6144      	str	r4, [r0, #20]
 800d2fa:	6103      	str	r3, [r0, #16]
 800d2fc:	bd10      	pop	{r4, pc}
 800d2fe:	bf00      	nop
 800d300:	0800ed68 	.word	0x0800ed68
 800d304:	0800edf4 	.word	0x0800edf4

0800d308 <__multiply>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	4691      	mov	r9, r2
 800d30e:	690a      	ldr	r2, [r1, #16]
 800d310:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d314:	429a      	cmp	r2, r3
 800d316:	bfb8      	it	lt
 800d318:	460b      	movlt	r3, r1
 800d31a:	460c      	mov	r4, r1
 800d31c:	bfbc      	itt	lt
 800d31e:	464c      	movlt	r4, r9
 800d320:	4699      	movlt	r9, r3
 800d322:	6927      	ldr	r7, [r4, #16]
 800d324:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d328:	68a3      	ldr	r3, [r4, #8]
 800d32a:	6861      	ldr	r1, [r4, #4]
 800d32c:	eb07 060a 	add.w	r6, r7, sl
 800d330:	42b3      	cmp	r3, r6
 800d332:	b085      	sub	sp, #20
 800d334:	bfb8      	it	lt
 800d336:	3101      	addlt	r1, #1
 800d338:	f7ff fe8e 	bl	800d058 <_Balloc>
 800d33c:	b930      	cbnz	r0, 800d34c <__multiply+0x44>
 800d33e:	4602      	mov	r2, r0
 800d340:	4b44      	ldr	r3, [pc, #272]	; (800d454 <__multiply+0x14c>)
 800d342:	4845      	ldr	r0, [pc, #276]	; (800d458 <__multiply+0x150>)
 800d344:	f240 115d 	movw	r1, #349	; 0x15d
 800d348:	f7fe fc40 	bl	800bbcc <__assert_func>
 800d34c:	f100 0514 	add.w	r5, r0, #20
 800d350:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d354:	462b      	mov	r3, r5
 800d356:	2200      	movs	r2, #0
 800d358:	4543      	cmp	r3, r8
 800d35a:	d321      	bcc.n	800d3a0 <__multiply+0x98>
 800d35c:	f104 0314 	add.w	r3, r4, #20
 800d360:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d364:	f109 0314 	add.w	r3, r9, #20
 800d368:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d36c:	9202      	str	r2, [sp, #8]
 800d36e:	1b3a      	subs	r2, r7, r4
 800d370:	3a15      	subs	r2, #21
 800d372:	f022 0203 	bic.w	r2, r2, #3
 800d376:	3204      	adds	r2, #4
 800d378:	f104 0115 	add.w	r1, r4, #21
 800d37c:	428f      	cmp	r7, r1
 800d37e:	bf38      	it	cc
 800d380:	2204      	movcc	r2, #4
 800d382:	9201      	str	r2, [sp, #4]
 800d384:	9a02      	ldr	r2, [sp, #8]
 800d386:	9303      	str	r3, [sp, #12]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d80c      	bhi.n	800d3a6 <__multiply+0x9e>
 800d38c:	2e00      	cmp	r6, #0
 800d38e:	dd03      	ble.n	800d398 <__multiply+0x90>
 800d390:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05a      	beq.n	800d44e <__multiply+0x146>
 800d398:	6106      	str	r6, [r0, #16]
 800d39a:	b005      	add	sp, #20
 800d39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a0:	f843 2b04 	str.w	r2, [r3], #4
 800d3a4:	e7d8      	b.n	800d358 <__multiply+0x50>
 800d3a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3aa:	f1ba 0f00 	cmp.w	sl, #0
 800d3ae:	d024      	beq.n	800d3fa <__multiply+0xf2>
 800d3b0:	f104 0e14 	add.w	lr, r4, #20
 800d3b4:	46a9      	mov	r9, r5
 800d3b6:	f04f 0c00 	mov.w	ip, #0
 800d3ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d3be:	f8d9 1000 	ldr.w	r1, [r9]
 800d3c2:	fa1f fb82 	uxth.w	fp, r2
 800d3c6:	b289      	uxth	r1, r1
 800d3c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d3cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d3d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d3d4:	4461      	add	r1, ip
 800d3d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3da:	fb0a c20b 	mla	r2, sl, fp, ip
 800d3de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3e2:	b289      	uxth	r1, r1
 800d3e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3e8:	4577      	cmp	r7, lr
 800d3ea:	f849 1b04 	str.w	r1, [r9], #4
 800d3ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3f2:	d8e2      	bhi.n	800d3ba <__multiply+0xb2>
 800d3f4:	9a01      	ldr	r2, [sp, #4]
 800d3f6:	f845 c002 	str.w	ip, [r5, r2]
 800d3fa:	9a03      	ldr	r2, [sp, #12]
 800d3fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d400:	3304      	adds	r3, #4
 800d402:	f1b9 0f00 	cmp.w	r9, #0
 800d406:	d020      	beq.n	800d44a <__multiply+0x142>
 800d408:	6829      	ldr	r1, [r5, #0]
 800d40a:	f104 0c14 	add.w	ip, r4, #20
 800d40e:	46ae      	mov	lr, r5
 800d410:	f04f 0a00 	mov.w	sl, #0
 800d414:	f8bc b000 	ldrh.w	fp, [ip]
 800d418:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d41c:	fb09 220b 	mla	r2, r9, fp, r2
 800d420:	4492      	add	sl, r2
 800d422:	b289      	uxth	r1, r1
 800d424:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d428:	f84e 1b04 	str.w	r1, [lr], #4
 800d42c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d430:	f8be 1000 	ldrh.w	r1, [lr]
 800d434:	0c12      	lsrs	r2, r2, #16
 800d436:	fb09 1102 	mla	r1, r9, r2, r1
 800d43a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d43e:	4567      	cmp	r7, ip
 800d440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d444:	d8e6      	bhi.n	800d414 <__multiply+0x10c>
 800d446:	9a01      	ldr	r2, [sp, #4]
 800d448:	50a9      	str	r1, [r5, r2]
 800d44a:	3504      	adds	r5, #4
 800d44c:	e79a      	b.n	800d384 <__multiply+0x7c>
 800d44e:	3e01      	subs	r6, #1
 800d450:	e79c      	b.n	800d38c <__multiply+0x84>
 800d452:	bf00      	nop
 800d454:	0800ed68 	.word	0x0800ed68
 800d458:	0800edf4 	.word	0x0800edf4

0800d45c <__pow5mult>:
 800d45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d460:	4615      	mov	r5, r2
 800d462:	f012 0203 	ands.w	r2, r2, #3
 800d466:	4606      	mov	r6, r0
 800d468:	460f      	mov	r7, r1
 800d46a:	d007      	beq.n	800d47c <__pow5mult+0x20>
 800d46c:	4c25      	ldr	r4, [pc, #148]	; (800d504 <__pow5mult+0xa8>)
 800d46e:	3a01      	subs	r2, #1
 800d470:	2300      	movs	r3, #0
 800d472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d476:	f7ff fe51 	bl	800d11c <__multadd>
 800d47a:	4607      	mov	r7, r0
 800d47c:	10ad      	asrs	r5, r5, #2
 800d47e:	d03d      	beq.n	800d4fc <__pow5mult+0xa0>
 800d480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d482:	b97c      	cbnz	r4, 800d4a4 <__pow5mult+0x48>
 800d484:	2010      	movs	r0, #16
 800d486:	f7ff fdbf 	bl	800d008 <malloc>
 800d48a:	4602      	mov	r2, r0
 800d48c:	6270      	str	r0, [r6, #36]	; 0x24
 800d48e:	b928      	cbnz	r0, 800d49c <__pow5mult+0x40>
 800d490:	4b1d      	ldr	r3, [pc, #116]	; (800d508 <__pow5mult+0xac>)
 800d492:	481e      	ldr	r0, [pc, #120]	; (800d50c <__pow5mult+0xb0>)
 800d494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d498:	f7fe fb98 	bl	800bbcc <__assert_func>
 800d49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4a0:	6004      	str	r4, [r0, #0]
 800d4a2:	60c4      	str	r4, [r0, #12]
 800d4a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4ac:	b94c      	cbnz	r4, 800d4c2 <__pow5mult+0x66>
 800d4ae:	f240 2171 	movw	r1, #625	; 0x271
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7ff ff12 	bl	800d2dc <__i2b>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4be:	4604      	mov	r4, r0
 800d4c0:	6003      	str	r3, [r0, #0]
 800d4c2:	f04f 0900 	mov.w	r9, #0
 800d4c6:	07eb      	lsls	r3, r5, #31
 800d4c8:	d50a      	bpl.n	800d4e0 <__pow5mult+0x84>
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	4622      	mov	r2, r4
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7ff ff1a 	bl	800d308 <__multiply>
 800d4d4:	4639      	mov	r1, r7
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	4630      	mov	r0, r6
 800d4da:	f7ff fdfd 	bl	800d0d8 <_Bfree>
 800d4de:	4647      	mov	r7, r8
 800d4e0:	106d      	asrs	r5, r5, #1
 800d4e2:	d00b      	beq.n	800d4fc <__pow5mult+0xa0>
 800d4e4:	6820      	ldr	r0, [r4, #0]
 800d4e6:	b938      	cbnz	r0, 800d4f8 <__pow5mult+0x9c>
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f7ff ff0b 	bl	800d308 <__multiply>
 800d4f2:	6020      	str	r0, [r4, #0]
 800d4f4:	f8c0 9000 	str.w	r9, [r0]
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	e7e4      	b.n	800d4c6 <__pow5mult+0x6a>
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d502:	bf00      	nop
 800d504:	0800ef40 	.word	0x0800ef40
 800d508:	0800ec50 	.word	0x0800ec50
 800d50c:	0800edf4 	.word	0x0800edf4

0800d510 <__lshift>:
 800d510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d514:	460c      	mov	r4, r1
 800d516:	6849      	ldr	r1, [r1, #4]
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d51e:	68a3      	ldr	r3, [r4, #8]
 800d520:	4607      	mov	r7, r0
 800d522:	4691      	mov	r9, r2
 800d524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d528:	f108 0601 	add.w	r6, r8, #1
 800d52c:	42b3      	cmp	r3, r6
 800d52e:	db0b      	blt.n	800d548 <__lshift+0x38>
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff fd91 	bl	800d058 <_Balloc>
 800d536:	4605      	mov	r5, r0
 800d538:	b948      	cbnz	r0, 800d54e <__lshift+0x3e>
 800d53a:	4602      	mov	r2, r0
 800d53c:	4b2a      	ldr	r3, [pc, #168]	; (800d5e8 <__lshift+0xd8>)
 800d53e:	482b      	ldr	r0, [pc, #172]	; (800d5ec <__lshift+0xdc>)
 800d540:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d544:	f7fe fb42 	bl	800bbcc <__assert_func>
 800d548:	3101      	adds	r1, #1
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	e7ee      	b.n	800d52c <__lshift+0x1c>
 800d54e:	2300      	movs	r3, #0
 800d550:	f100 0114 	add.w	r1, r0, #20
 800d554:	f100 0210 	add.w	r2, r0, #16
 800d558:	4618      	mov	r0, r3
 800d55a:	4553      	cmp	r3, sl
 800d55c:	db37      	blt.n	800d5ce <__lshift+0xbe>
 800d55e:	6920      	ldr	r0, [r4, #16]
 800d560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d564:	f104 0314 	add.w	r3, r4, #20
 800d568:	f019 091f 	ands.w	r9, r9, #31
 800d56c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d574:	d02f      	beq.n	800d5d6 <__lshift+0xc6>
 800d576:	f1c9 0e20 	rsb	lr, r9, #32
 800d57a:	468a      	mov	sl, r1
 800d57c:	f04f 0c00 	mov.w	ip, #0
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	fa02 f209 	lsl.w	r2, r2, r9
 800d586:	ea42 020c 	orr.w	r2, r2, ip
 800d58a:	f84a 2b04 	str.w	r2, [sl], #4
 800d58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d592:	4298      	cmp	r0, r3
 800d594:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d598:	d8f2      	bhi.n	800d580 <__lshift+0x70>
 800d59a:	1b03      	subs	r3, r0, r4
 800d59c:	3b15      	subs	r3, #21
 800d59e:	f023 0303 	bic.w	r3, r3, #3
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	f104 0215 	add.w	r2, r4, #21
 800d5a8:	4290      	cmp	r0, r2
 800d5aa:	bf38      	it	cc
 800d5ac:	2304      	movcc	r3, #4
 800d5ae:	f841 c003 	str.w	ip, [r1, r3]
 800d5b2:	f1bc 0f00 	cmp.w	ip, #0
 800d5b6:	d001      	beq.n	800d5bc <__lshift+0xac>
 800d5b8:	f108 0602 	add.w	r6, r8, #2
 800d5bc:	3e01      	subs	r6, #1
 800d5be:	4638      	mov	r0, r7
 800d5c0:	612e      	str	r6, [r5, #16]
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	f7ff fd88 	bl	800d0d8 <_Bfree>
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	e7c1      	b.n	800d55a <__lshift+0x4a>
 800d5d6:	3904      	subs	r1, #4
 800d5d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5e0:	4298      	cmp	r0, r3
 800d5e2:	d8f9      	bhi.n	800d5d8 <__lshift+0xc8>
 800d5e4:	e7ea      	b.n	800d5bc <__lshift+0xac>
 800d5e6:	bf00      	nop
 800d5e8:	0800ed68 	.word	0x0800ed68
 800d5ec:	0800edf4 	.word	0x0800edf4

0800d5f0 <__mcmp>:
 800d5f0:	b530      	push	{r4, r5, lr}
 800d5f2:	6902      	ldr	r2, [r0, #16]
 800d5f4:	690c      	ldr	r4, [r1, #16]
 800d5f6:	1b12      	subs	r2, r2, r4
 800d5f8:	d10e      	bne.n	800d618 <__mcmp+0x28>
 800d5fa:	f100 0314 	add.w	r3, r0, #20
 800d5fe:	3114      	adds	r1, #20
 800d600:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d608:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d60c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d610:	42a5      	cmp	r5, r4
 800d612:	d003      	beq.n	800d61c <__mcmp+0x2c>
 800d614:	d305      	bcc.n	800d622 <__mcmp+0x32>
 800d616:	2201      	movs	r2, #1
 800d618:	4610      	mov	r0, r2
 800d61a:	bd30      	pop	{r4, r5, pc}
 800d61c:	4283      	cmp	r3, r0
 800d61e:	d3f3      	bcc.n	800d608 <__mcmp+0x18>
 800d620:	e7fa      	b.n	800d618 <__mcmp+0x28>
 800d622:	f04f 32ff 	mov.w	r2, #4294967295
 800d626:	e7f7      	b.n	800d618 <__mcmp+0x28>

0800d628 <__mdiff>:
 800d628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	460c      	mov	r4, r1
 800d62e:	4606      	mov	r6, r0
 800d630:	4611      	mov	r1, r2
 800d632:	4620      	mov	r0, r4
 800d634:	4690      	mov	r8, r2
 800d636:	f7ff ffdb 	bl	800d5f0 <__mcmp>
 800d63a:	1e05      	subs	r5, r0, #0
 800d63c:	d110      	bne.n	800d660 <__mdiff+0x38>
 800d63e:	4629      	mov	r1, r5
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff fd09 	bl	800d058 <_Balloc>
 800d646:	b930      	cbnz	r0, 800d656 <__mdiff+0x2e>
 800d648:	4b3a      	ldr	r3, [pc, #232]	; (800d734 <__mdiff+0x10c>)
 800d64a:	4602      	mov	r2, r0
 800d64c:	f240 2132 	movw	r1, #562	; 0x232
 800d650:	4839      	ldr	r0, [pc, #228]	; (800d738 <__mdiff+0x110>)
 800d652:	f7fe fabb 	bl	800bbcc <__assert_func>
 800d656:	2301      	movs	r3, #1
 800d658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d65c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	bfa4      	itt	ge
 800d662:	4643      	movge	r3, r8
 800d664:	46a0      	movge	r8, r4
 800d666:	4630      	mov	r0, r6
 800d668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d66c:	bfa6      	itte	ge
 800d66e:	461c      	movge	r4, r3
 800d670:	2500      	movge	r5, #0
 800d672:	2501      	movlt	r5, #1
 800d674:	f7ff fcf0 	bl	800d058 <_Balloc>
 800d678:	b920      	cbnz	r0, 800d684 <__mdiff+0x5c>
 800d67a:	4b2e      	ldr	r3, [pc, #184]	; (800d734 <__mdiff+0x10c>)
 800d67c:	4602      	mov	r2, r0
 800d67e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d682:	e7e5      	b.n	800d650 <__mdiff+0x28>
 800d684:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d688:	6926      	ldr	r6, [r4, #16]
 800d68a:	60c5      	str	r5, [r0, #12]
 800d68c:	f104 0914 	add.w	r9, r4, #20
 800d690:	f108 0514 	add.w	r5, r8, #20
 800d694:	f100 0e14 	add.w	lr, r0, #20
 800d698:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d69c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6a0:	f108 0210 	add.w	r2, r8, #16
 800d6a4:	46f2      	mov	sl, lr
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d6b0:	fa1f f883 	uxth.w	r8, r3
 800d6b4:	fa11 f18b 	uxtah	r1, r1, fp
 800d6b8:	0c1b      	lsrs	r3, r3, #16
 800d6ba:	eba1 0808 	sub.w	r8, r1, r8
 800d6be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6c6:	fa1f f888 	uxth.w	r8, r8
 800d6ca:	1419      	asrs	r1, r3, #16
 800d6cc:	454e      	cmp	r6, r9
 800d6ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6d2:	f84a 3b04 	str.w	r3, [sl], #4
 800d6d6:	d8e7      	bhi.n	800d6a8 <__mdiff+0x80>
 800d6d8:	1b33      	subs	r3, r6, r4
 800d6da:	3b15      	subs	r3, #21
 800d6dc:	f023 0303 	bic.w	r3, r3, #3
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	3415      	adds	r4, #21
 800d6e4:	42a6      	cmp	r6, r4
 800d6e6:	bf38      	it	cc
 800d6e8:	2304      	movcc	r3, #4
 800d6ea:	441d      	add	r5, r3
 800d6ec:	4473      	add	r3, lr
 800d6ee:	469e      	mov	lr, r3
 800d6f0:	462e      	mov	r6, r5
 800d6f2:	4566      	cmp	r6, ip
 800d6f4:	d30e      	bcc.n	800d714 <__mdiff+0xec>
 800d6f6:	f10c 0203 	add.w	r2, ip, #3
 800d6fa:	1b52      	subs	r2, r2, r5
 800d6fc:	f022 0203 	bic.w	r2, r2, #3
 800d700:	3d03      	subs	r5, #3
 800d702:	45ac      	cmp	ip, r5
 800d704:	bf38      	it	cc
 800d706:	2200      	movcc	r2, #0
 800d708:	441a      	add	r2, r3
 800d70a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d70e:	b17b      	cbz	r3, 800d730 <__mdiff+0x108>
 800d710:	6107      	str	r7, [r0, #16]
 800d712:	e7a3      	b.n	800d65c <__mdiff+0x34>
 800d714:	f856 8b04 	ldr.w	r8, [r6], #4
 800d718:	fa11 f288 	uxtah	r2, r1, r8
 800d71c:	1414      	asrs	r4, r2, #16
 800d71e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d722:	b292      	uxth	r2, r2
 800d724:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d728:	f84e 2b04 	str.w	r2, [lr], #4
 800d72c:	1421      	asrs	r1, r4, #16
 800d72e:	e7e0      	b.n	800d6f2 <__mdiff+0xca>
 800d730:	3f01      	subs	r7, #1
 800d732:	e7ea      	b.n	800d70a <__mdiff+0xe2>
 800d734:	0800ed68 	.word	0x0800ed68
 800d738:	0800edf4 	.word	0x0800edf4

0800d73c <__ulp>:
 800d73c:	b082      	sub	sp, #8
 800d73e:	ed8d 0b00 	vstr	d0, [sp]
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	4912      	ldr	r1, [pc, #72]	; (800d790 <__ulp+0x54>)
 800d746:	4019      	ands	r1, r3
 800d748:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d74c:	2900      	cmp	r1, #0
 800d74e:	dd05      	ble.n	800d75c <__ulp+0x20>
 800d750:	2200      	movs	r2, #0
 800d752:	460b      	mov	r3, r1
 800d754:	ec43 2b10 	vmov	d0, r2, r3
 800d758:	b002      	add	sp, #8
 800d75a:	4770      	bx	lr
 800d75c:	4249      	negs	r1, r1
 800d75e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d762:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d766:	f04f 0200 	mov.w	r2, #0
 800d76a:	f04f 0300 	mov.w	r3, #0
 800d76e:	da04      	bge.n	800d77a <__ulp+0x3e>
 800d770:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d774:	fa41 f300 	asr.w	r3, r1, r0
 800d778:	e7ec      	b.n	800d754 <__ulp+0x18>
 800d77a:	f1a0 0114 	sub.w	r1, r0, #20
 800d77e:	291e      	cmp	r1, #30
 800d780:	bfda      	itte	le
 800d782:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d786:	fa20 f101 	lsrle.w	r1, r0, r1
 800d78a:	2101      	movgt	r1, #1
 800d78c:	460a      	mov	r2, r1
 800d78e:	e7e1      	b.n	800d754 <__ulp+0x18>
 800d790:	7ff00000 	.word	0x7ff00000

0800d794 <__b2d>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	6905      	ldr	r5, [r0, #16]
 800d798:	f100 0714 	add.w	r7, r0, #20
 800d79c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d7a0:	1f2e      	subs	r6, r5, #4
 800d7a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f7ff fd48 	bl	800d23c <__hi0bits>
 800d7ac:	f1c0 0320 	rsb	r3, r0, #32
 800d7b0:	280a      	cmp	r0, #10
 800d7b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d830 <__b2d+0x9c>
 800d7b6:	600b      	str	r3, [r1, #0]
 800d7b8:	dc14      	bgt.n	800d7e4 <__b2d+0x50>
 800d7ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800d7be:	fa24 f10e 	lsr.w	r1, r4, lr
 800d7c2:	42b7      	cmp	r7, r6
 800d7c4:	ea41 030c 	orr.w	r3, r1, ip
 800d7c8:	bf34      	ite	cc
 800d7ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7ce:	2100      	movcs	r1, #0
 800d7d0:	3015      	adds	r0, #21
 800d7d2:	fa04 f000 	lsl.w	r0, r4, r0
 800d7d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800d7da:	ea40 0201 	orr.w	r2, r0, r1
 800d7de:	ec43 2b10 	vmov	d0, r2, r3
 800d7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7e4:	42b7      	cmp	r7, r6
 800d7e6:	bf3a      	itte	cc
 800d7e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800d7f0:	2100      	movcs	r1, #0
 800d7f2:	380b      	subs	r0, #11
 800d7f4:	d017      	beq.n	800d826 <__b2d+0x92>
 800d7f6:	f1c0 0c20 	rsb	ip, r0, #32
 800d7fa:	fa04 f500 	lsl.w	r5, r4, r0
 800d7fe:	42be      	cmp	r6, r7
 800d800:	fa21 f40c 	lsr.w	r4, r1, ip
 800d804:	ea45 0504 	orr.w	r5, r5, r4
 800d808:	bf8c      	ite	hi
 800d80a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d80e:	2400      	movls	r4, #0
 800d810:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d814:	fa01 f000 	lsl.w	r0, r1, r0
 800d818:	fa24 f40c 	lsr.w	r4, r4, ip
 800d81c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d820:	ea40 0204 	orr.w	r2, r0, r4
 800d824:	e7db      	b.n	800d7de <__b2d+0x4a>
 800d826:	ea44 030c 	orr.w	r3, r4, ip
 800d82a:	460a      	mov	r2, r1
 800d82c:	e7d7      	b.n	800d7de <__b2d+0x4a>
 800d82e:	bf00      	nop
 800d830:	3ff00000 	.word	0x3ff00000

0800d834 <__d2b>:
 800d834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d838:	4689      	mov	r9, r1
 800d83a:	2101      	movs	r1, #1
 800d83c:	ec57 6b10 	vmov	r6, r7, d0
 800d840:	4690      	mov	r8, r2
 800d842:	f7ff fc09 	bl	800d058 <_Balloc>
 800d846:	4604      	mov	r4, r0
 800d848:	b930      	cbnz	r0, 800d858 <__d2b+0x24>
 800d84a:	4602      	mov	r2, r0
 800d84c:	4b25      	ldr	r3, [pc, #148]	; (800d8e4 <__d2b+0xb0>)
 800d84e:	4826      	ldr	r0, [pc, #152]	; (800d8e8 <__d2b+0xb4>)
 800d850:	f240 310a 	movw	r1, #778	; 0x30a
 800d854:	f7fe f9ba 	bl	800bbcc <__assert_func>
 800d858:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d85c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d860:	bb35      	cbnz	r5, 800d8b0 <__d2b+0x7c>
 800d862:	2e00      	cmp	r6, #0
 800d864:	9301      	str	r3, [sp, #4]
 800d866:	d028      	beq.n	800d8ba <__d2b+0x86>
 800d868:	4668      	mov	r0, sp
 800d86a:	9600      	str	r6, [sp, #0]
 800d86c:	f7ff fd06 	bl	800d27c <__lo0bits>
 800d870:	9900      	ldr	r1, [sp, #0]
 800d872:	b300      	cbz	r0, 800d8b6 <__d2b+0x82>
 800d874:	9a01      	ldr	r2, [sp, #4]
 800d876:	f1c0 0320 	rsb	r3, r0, #32
 800d87a:	fa02 f303 	lsl.w	r3, r2, r3
 800d87e:	430b      	orrs	r3, r1
 800d880:	40c2      	lsrs	r2, r0
 800d882:	6163      	str	r3, [r4, #20]
 800d884:	9201      	str	r2, [sp, #4]
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	61a3      	str	r3, [r4, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	bf14      	ite	ne
 800d88e:	2202      	movne	r2, #2
 800d890:	2201      	moveq	r2, #1
 800d892:	6122      	str	r2, [r4, #16]
 800d894:	b1d5      	cbz	r5, 800d8cc <__d2b+0x98>
 800d896:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d89a:	4405      	add	r5, r0
 800d89c:	f8c9 5000 	str.w	r5, [r9]
 800d8a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d8a4:	f8c8 0000 	str.w	r0, [r8]
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	b003      	add	sp, #12
 800d8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8b4:	e7d5      	b.n	800d862 <__d2b+0x2e>
 800d8b6:	6161      	str	r1, [r4, #20]
 800d8b8:	e7e5      	b.n	800d886 <__d2b+0x52>
 800d8ba:	a801      	add	r0, sp, #4
 800d8bc:	f7ff fcde 	bl	800d27c <__lo0bits>
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	6163      	str	r3, [r4, #20]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	6122      	str	r2, [r4, #16]
 800d8c8:	3020      	adds	r0, #32
 800d8ca:	e7e3      	b.n	800d894 <__d2b+0x60>
 800d8cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8d4:	f8c9 0000 	str.w	r0, [r9]
 800d8d8:	6918      	ldr	r0, [r3, #16]
 800d8da:	f7ff fcaf 	bl	800d23c <__hi0bits>
 800d8de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8e2:	e7df      	b.n	800d8a4 <__d2b+0x70>
 800d8e4:	0800ed68 	.word	0x0800ed68
 800d8e8:	0800edf4 	.word	0x0800edf4

0800d8ec <__ratio>:
 800d8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f0:	4688      	mov	r8, r1
 800d8f2:	4669      	mov	r1, sp
 800d8f4:	4681      	mov	r9, r0
 800d8f6:	f7ff ff4d 	bl	800d794 <__b2d>
 800d8fa:	a901      	add	r1, sp, #4
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	ec55 4b10 	vmov	r4, r5, d0
 800d902:	f7ff ff47 	bl	800d794 <__b2d>
 800d906:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d90a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d90e:	eba3 0c02 	sub.w	ip, r3, r2
 800d912:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d916:	1a9b      	subs	r3, r3, r2
 800d918:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d91c:	ec51 0b10 	vmov	r0, r1, d0
 800d920:	2b00      	cmp	r3, #0
 800d922:	bfd6      	itet	le
 800d924:	460a      	movle	r2, r1
 800d926:	462a      	movgt	r2, r5
 800d928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d92c:	468b      	mov	fp, r1
 800d92e:	462f      	mov	r7, r5
 800d930:	bfd4      	ite	le
 800d932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d93a:	4620      	mov	r0, r4
 800d93c:	ee10 2a10 	vmov	r2, s0
 800d940:	465b      	mov	r3, fp
 800d942:	4639      	mov	r1, r7
 800d944:	f7f2 ffba 	bl	80008bc <__aeabi_ddiv>
 800d948:	ec41 0b10 	vmov	d0, r0, r1
 800d94c:	b003      	add	sp, #12
 800d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d952 <__copybits>:
 800d952:	3901      	subs	r1, #1
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	1149      	asrs	r1, r1, #5
 800d958:	6914      	ldr	r4, [r2, #16]
 800d95a:	3101      	adds	r1, #1
 800d95c:	f102 0314 	add.w	r3, r2, #20
 800d960:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d964:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d968:	1f05      	subs	r5, r0, #4
 800d96a:	42a3      	cmp	r3, r4
 800d96c:	d30c      	bcc.n	800d988 <__copybits+0x36>
 800d96e:	1aa3      	subs	r3, r4, r2
 800d970:	3b11      	subs	r3, #17
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	3211      	adds	r2, #17
 800d978:	42a2      	cmp	r2, r4
 800d97a:	bf88      	it	hi
 800d97c:	2300      	movhi	r3, #0
 800d97e:	4418      	add	r0, r3
 800d980:	2300      	movs	r3, #0
 800d982:	4288      	cmp	r0, r1
 800d984:	d305      	bcc.n	800d992 <__copybits+0x40>
 800d986:	bd70      	pop	{r4, r5, r6, pc}
 800d988:	f853 6b04 	ldr.w	r6, [r3], #4
 800d98c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d990:	e7eb      	b.n	800d96a <__copybits+0x18>
 800d992:	f840 3b04 	str.w	r3, [r0], #4
 800d996:	e7f4      	b.n	800d982 <__copybits+0x30>

0800d998 <__any_on>:
 800d998:	f100 0214 	add.w	r2, r0, #20
 800d99c:	6900      	ldr	r0, [r0, #16]
 800d99e:	114b      	asrs	r3, r1, #5
 800d9a0:	4298      	cmp	r0, r3
 800d9a2:	b510      	push	{r4, lr}
 800d9a4:	db11      	blt.n	800d9ca <__any_on+0x32>
 800d9a6:	dd0a      	ble.n	800d9be <__any_on+0x26>
 800d9a8:	f011 011f 	ands.w	r1, r1, #31
 800d9ac:	d007      	beq.n	800d9be <__any_on+0x26>
 800d9ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9b2:	fa24 f001 	lsr.w	r0, r4, r1
 800d9b6:	fa00 f101 	lsl.w	r1, r0, r1
 800d9ba:	428c      	cmp	r4, r1
 800d9bc:	d10b      	bne.n	800d9d6 <__any_on+0x3e>
 800d9be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d803      	bhi.n	800d9ce <__any_on+0x36>
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	bd10      	pop	{r4, pc}
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	e7f7      	b.n	800d9be <__any_on+0x26>
 800d9ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9d2:	2900      	cmp	r1, #0
 800d9d4:	d0f5      	beq.n	800d9c2 <__any_on+0x2a>
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	e7f6      	b.n	800d9c8 <__any_on+0x30>

0800d9da <_calloc_r>:
 800d9da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9dc:	fba1 2402 	umull	r2, r4, r1, r2
 800d9e0:	b94c      	cbnz	r4, 800d9f6 <_calloc_r+0x1c>
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	9201      	str	r2, [sp, #4]
 800d9e6:	f000 f87b 	bl	800dae0 <_malloc_r>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	b930      	cbnz	r0, 800d9fe <_calloc_r+0x24>
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	b003      	add	sp, #12
 800d9f4:	bd30      	pop	{r4, r5, pc}
 800d9f6:	220c      	movs	r2, #12
 800d9f8:	6002      	str	r2, [r0, #0]
 800d9fa:	2500      	movs	r5, #0
 800d9fc:	e7f8      	b.n	800d9f0 <_calloc_r+0x16>
 800d9fe:	4621      	mov	r1, r4
 800da00:	f7fc fdc6 	bl	800a590 <memset>
 800da04:	e7f4      	b.n	800d9f0 <_calloc_r+0x16>
	...

0800da08 <_free_r>:
 800da08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da0a:	2900      	cmp	r1, #0
 800da0c:	d044      	beq.n	800da98 <_free_r+0x90>
 800da0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da12:	9001      	str	r0, [sp, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	f1a1 0404 	sub.w	r4, r1, #4
 800da1a:	bfb8      	it	lt
 800da1c:	18e4      	addlt	r4, r4, r3
 800da1e:	f000 fec7 	bl	800e7b0 <__malloc_lock>
 800da22:	4a1e      	ldr	r2, [pc, #120]	; (800da9c <_free_r+0x94>)
 800da24:	9801      	ldr	r0, [sp, #4]
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	b933      	cbnz	r3, 800da38 <_free_r+0x30>
 800da2a:	6063      	str	r3, [r4, #4]
 800da2c:	6014      	str	r4, [r2, #0]
 800da2e:	b003      	add	sp, #12
 800da30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da34:	f000 bec2 	b.w	800e7bc <__malloc_unlock>
 800da38:	42a3      	cmp	r3, r4
 800da3a:	d908      	bls.n	800da4e <_free_r+0x46>
 800da3c:	6825      	ldr	r5, [r4, #0]
 800da3e:	1961      	adds	r1, r4, r5
 800da40:	428b      	cmp	r3, r1
 800da42:	bf01      	itttt	eq
 800da44:	6819      	ldreq	r1, [r3, #0]
 800da46:	685b      	ldreq	r3, [r3, #4]
 800da48:	1949      	addeq	r1, r1, r5
 800da4a:	6021      	streq	r1, [r4, #0]
 800da4c:	e7ed      	b.n	800da2a <_free_r+0x22>
 800da4e:	461a      	mov	r2, r3
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	b10b      	cbz	r3, 800da58 <_free_r+0x50>
 800da54:	42a3      	cmp	r3, r4
 800da56:	d9fa      	bls.n	800da4e <_free_r+0x46>
 800da58:	6811      	ldr	r1, [r2, #0]
 800da5a:	1855      	adds	r5, r2, r1
 800da5c:	42a5      	cmp	r5, r4
 800da5e:	d10b      	bne.n	800da78 <_free_r+0x70>
 800da60:	6824      	ldr	r4, [r4, #0]
 800da62:	4421      	add	r1, r4
 800da64:	1854      	adds	r4, r2, r1
 800da66:	42a3      	cmp	r3, r4
 800da68:	6011      	str	r1, [r2, #0]
 800da6a:	d1e0      	bne.n	800da2e <_free_r+0x26>
 800da6c:	681c      	ldr	r4, [r3, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	6053      	str	r3, [r2, #4]
 800da72:	4421      	add	r1, r4
 800da74:	6011      	str	r1, [r2, #0]
 800da76:	e7da      	b.n	800da2e <_free_r+0x26>
 800da78:	d902      	bls.n	800da80 <_free_r+0x78>
 800da7a:	230c      	movs	r3, #12
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	e7d6      	b.n	800da2e <_free_r+0x26>
 800da80:	6825      	ldr	r5, [r4, #0]
 800da82:	1961      	adds	r1, r4, r5
 800da84:	428b      	cmp	r3, r1
 800da86:	bf04      	itt	eq
 800da88:	6819      	ldreq	r1, [r3, #0]
 800da8a:	685b      	ldreq	r3, [r3, #4]
 800da8c:	6063      	str	r3, [r4, #4]
 800da8e:	bf04      	itt	eq
 800da90:	1949      	addeq	r1, r1, r5
 800da92:	6021      	streq	r1, [r4, #0]
 800da94:	6054      	str	r4, [r2, #4]
 800da96:	e7ca      	b.n	800da2e <_free_r+0x26>
 800da98:	b003      	add	sp, #12
 800da9a:	bd30      	pop	{r4, r5, pc}
 800da9c:	20000558 	.word	0x20000558

0800daa0 <sbrk_aligned>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	4e0e      	ldr	r6, [pc, #56]	; (800dadc <sbrk_aligned+0x3c>)
 800daa4:	460c      	mov	r4, r1
 800daa6:	6831      	ldr	r1, [r6, #0]
 800daa8:	4605      	mov	r5, r0
 800daaa:	b911      	cbnz	r1, 800dab2 <sbrk_aligned+0x12>
 800daac:	f000 fb4c 	bl	800e148 <_sbrk_r>
 800dab0:	6030      	str	r0, [r6, #0]
 800dab2:	4621      	mov	r1, r4
 800dab4:	4628      	mov	r0, r5
 800dab6:	f000 fb47 	bl	800e148 <_sbrk_r>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	d00a      	beq.n	800dad4 <sbrk_aligned+0x34>
 800dabe:	1cc4      	adds	r4, r0, #3
 800dac0:	f024 0403 	bic.w	r4, r4, #3
 800dac4:	42a0      	cmp	r0, r4
 800dac6:	d007      	beq.n	800dad8 <sbrk_aligned+0x38>
 800dac8:	1a21      	subs	r1, r4, r0
 800daca:	4628      	mov	r0, r5
 800dacc:	f000 fb3c 	bl	800e148 <_sbrk_r>
 800dad0:	3001      	adds	r0, #1
 800dad2:	d101      	bne.n	800dad8 <sbrk_aligned+0x38>
 800dad4:	f04f 34ff 	mov.w	r4, #4294967295
 800dad8:	4620      	mov	r0, r4
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	2000055c 	.word	0x2000055c

0800dae0 <_malloc_r>:
 800dae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae4:	1ccd      	adds	r5, r1, #3
 800dae6:	f025 0503 	bic.w	r5, r5, #3
 800daea:	3508      	adds	r5, #8
 800daec:	2d0c      	cmp	r5, #12
 800daee:	bf38      	it	cc
 800daf0:	250c      	movcc	r5, #12
 800daf2:	2d00      	cmp	r5, #0
 800daf4:	4607      	mov	r7, r0
 800daf6:	db01      	blt.n	800dafc <_malloc_r+0x1c>
 800daf8:	42a9      	cmp	r1, r5
 800dafa:	d905      	bls.n	800db08 <_malloc_r+0x28>
 800dafc:	230c      	movs	r3, #12
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	2600      	movs	r6, #0
 800db02:	4630      	mov	r0, r6
 800db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db08:	4e2e      	ldr	r6, [pc, #184]	; (800dbc4 <_malloc_r+0xe4>)
 800db0a:	f000 fe51 	bl	800e7b0 <__malloc_lock>
 800db0e:	6833      	ldr	r3, [r6, #0]
 800db10:	461c      	mov	r4, r3
 800db12:	bb34      	cbnz	r4, 800db62 <_malloc_r+0x82>
 800db14:	4629      	mov	r1, r5
 800db16:	4638      	mov	r0, r7
 800db18:	f7ff ffc2 	bl	800daa0 <sbrk_aligned>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	4604      	mov	r4, r0
 800db20:	d14d      	bne.n	800dbbe <_malloc_r+0xde>
 800db22:	6834      	ldr	r4, [r6, #0]
 800db24:	4626      	mov	r6, r4
 800db26:	2e00      	cmp	r6, #0
 800db28:	d140      	bne.n	800dbac <_malloc_r+0xcc>
 800db2a:	6823      	ldr	r3, [r4, #0]
 800db2c:	4631      	mov	r1, r6
 800db2e:	4638      	mov	r0, r7
 800db30:	eb04 0803 	add.w	r8, r4, r3
 800db34:	f000 fb08 	bl	800e148 <_sbrk_r>
 800db38:	4580      	cmp	r8, r0
 800db3a:	d13a      	bne.n	800dbb2 <_malloc_r+0xd2>
 800db3c:	6821      	ldr	r1, [r4, #0]
 800db3e:	3503      	adds	r5, #3
 800db40:	1a6d      	subs	r5, r5, r1
 800db42:	f025 0503 	bic.w	r5, r5, #3
 800db46:	3508      	adds	r5, #8
 800db48:	2d0c      	cmp	r5, #12
 800db4a:	bf38      	it	cc
 800db4c:	250c      	movcc	r5, #12
 800db4e:	4629      	mov	r1, r5
 800db50:	4638      	mov	r0, r7
 800db52:	f7ff ffa5 	bl	800daa0 <sbrk_aligned>
 800db56:	3001      	adds	r0, #1
 800db58:	d02b      	beq.n	800dbb2 <_malloc_r+0xd2>
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	442b      	add	r3, r5
 800db5e:	6023      	str	r3, [r4, #0]
 800db60:	e00e      	b.n	800db80 <_malloc_r+0xa0>
 800db62:	6822      	ldr	r2, [r4, #0]
 800db64:	1b52      	subs	r2, r2, r5
 800db66:	d41e      	bmi.n	800dba6 <_malloc_r+0xc6>
 800db68:	2a0b      	cmp	r2, #11
 800db6a:	d916      	bls.n	800db9a <_malloc_r+0xba>
 800db6c:	1961      	adds	r1, r4, r5
 800db6e:	42a3      	cmp	r3, r4
 800db70:	6025      	str	r5, [r4, #0]
 800db72:	bf18      	it	ne
 800db74:	6059      	strne	r1, [r3, #4]
 800db76:	6863      	ldr	r3, [r4, #4]
 800db78:	bf08      	it	eq
 800db7a:	6031      	streq	r1, [r6, #0]
 800db7c:	5162      	str	r2, [r4, r5]
 800db7e:	604b      	str	r3, [r1, #4]
 800db80:	4638      	mov	r0, r7
 800db82:	f104 060b 	add.w	r6, r4, #11
 800db86:	f000 fe19 	bl	800e7bc <__malloc_unlock>
 800db8a:	f026 0607 	bic.w	r6, r6, #7
 800db8e:	1d23      	adds	r3, r4, #4
 800db90:	1af2      	subs	r2, r6, r3
 800db92:	d0b6      	beq.n	800db02 <_malloc_r+0x22>
 800db94:	1b9b      	subs	r3, r3, r6
 800db96:	50a3      	str	r3, [r4, r2]
 800db98:	e7b3      	b.n	800db02 <_malloc_r+0x22>
 800db9a:	6862      	ldr	r2, [r4, #4]
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	bf0c      	ite	eq
 800dba0:	6032      	streq	r2, [r6, #0]
 800dba2:	605a      	strne	r2, [r3, #4]
 800dba4:	e7ec      	b.n	800db80 <_malloc_r+0xa0>
 800dba6:	4623      	mov	r3, r4
 800dba8:	6864      	ldr	r4, [r4, #4]
 800dbaa:	e7b2      	b.n	800db12 <_malloc_r+0x32>
 800dbac:	4634      	mov	r4, r6
 800dbae:	6876      	ldr	r6, [r6, #4]
 800dbb0:	e7b9      	b.n	800db26 <_malloc_r+0x46>
 800dbb2:	230c      	movs	r3, #12
 800dbb4:	603b      	str	r3, [r7, #0]
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f000 fe00 	bl	800e7bc <__malloc_unlock>
 800dbbc:	e7a1      	b.n	800db02 <_malloc_r+0x22>
 800dbbe:	6025      	str	r5, [r4, #0]
 800dbc0:	e7de      	b.n	800db80 <_malloc_r+0xa0>
 800dbc2:	bf00      	nop
 800dbc4:	20000558 	.word	0x20000558

0800dbc8 <__ssputs_r>:
 800dbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbcc:	688e      	ldr	r6, [r1, #8]
 800dbce:	429e      	cmp	r6, r3
 800dbd0:	4682      	mov	sl, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	4690      	mov	r8, r2
 800dbd6:	461f      	mov	r7, r3
 800dbd8:	d838      	bhi.n	800dc4c <__ssputs_r+0x84>
 800dbda:	898a      	ldrh	r2, [r1, #12]
 800dbdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbe0:	d032      	beq.n	800dc48 <__ssputs_r+0x80>
 800dbe2:	6825      	ldr	r5, [r4, #0]
 800dbe4:	6909      	ldr	r1, [r1, #16]
 800dbe6:	eba5 0901 	sub.w	r9, r5, r1
 800dbea:	6965      	ldr	r5, [r4, #20]
 800dbec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	444b      	add	r3, r9
 800dbf8:	106d      	asrs	r5, r5, #1
 800dbfa:	429d      	cmp	r5, r3
 800dbfc:	bf38      	it	cc
 800dbfe:	461d      	movcc	r5, r3
 800dc00:	0553      	lsls	r3, r2, #21
 800dc02:	d531      	bpl.n	800dc68 <__ssputs_r+0xa0>
 800dc04:	4629      	mov	r1, r5
 800dc06:	f7ff ff6b 	bl	800dae0 <_malloc_r>
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	b950      	cbnz	r0, 800dc24 <__ssputs_r+0x5c>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	f8ca 3000 	str.w	r3, [sl]
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1a:	81a3      	strh	r3, [r4, #12]
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc24:	6921      	ldr	r1, [r4, #16]
 800dc26:	464a      	mov	r2, r9
 800dc28:	f7ff fa08 	bl	800d03c <memcpy>
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc36:	81a3      	strh	r3, [r4, #12]
 800dc38:	6126      	str	r6, [r4, #16]
 800dc3a:	6165      	str	r5, [r4, #20]
 800dc3c:	444e      	add	r6, r9
 800dc3e:	eba5 0509 	sub.w	r5, r5, r9
 800dc42:	6026      	str	r6, [r4, #0]
 800dc44:	60a5      	str	r5, [r4, #8]
 800dc46:	463e      	mov	r6, r7
 800dc48:	42be      	cmp	r6, r7
 800dc4a:	d900      	bls.n	800dc4e <__ssputs_r+0x86>
 800dc4c:	463e      	mov	r6, r7
 800dc4e:	6820      	ldr	r0, [r4, #0]
 800dc50:	4632      	mov	r2, r6
 800dc52:	4641      	mov	r1, r8
 800dc54:	f000 fd92 	bl	800e77c <memmove>
 800dc58:	68a3      	ldr	r3, [r4, #8]
 800dc5a:	1b9b      	subs	r3, r3, r6
 800dc5c:	60a3      	str	r3, [r4, #8]
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	4433      	add	r3, r6
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	2000      	movs	r0, #0
 800dc66:	e7db      	b.n	800dc20 <__ssputs_r+0x58>
 800dc68:	462a      	mov	r2, r5
 800dc6a:	f000 fdad 	bl	800e7c8 <_realloc_r>
 800dc6e:	4606      	mov	r6, r0
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1e1      	bne.n	800dc38 <__ssputs_r+0x70>
 800dc74:	6921      	ldr	r1, [r4, #16]
 800dc76:	4650      	mov	r0, sl
 800dc78:	f7ff fec6 	bl	800da08 <_free_r>
 800dc7c:	e7c7      	b.n	800dc0e <__ssputs_r+0x46>
	...

0800dc80 <_svfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	4698      	mov	r8, r3
 800dc86:	898b      	ldrh	r3, [r1, #12]
 800dc88:	061b      	lsls	r3, r3, #24
 800dc8a:	b09d      	sub	sp, #116	; 0x74
 800dc8c:	4607      	mov	r7, r0
 800dc8e:	460d      	mov	r5, r1
 800dc90:	4614      	mov	r4, r2
 800dc92:	d50e      	bpl.n	800dcb2 <_svfiprintf_r+0x32>
 800dc94:	690b      	ldr	r3, [r1, #16]
 800dc96:	b963      	cbnz	r3, 800dcb2 <_svfiprintf_r+0x32>
 800dc98:	2140      	movs	r1, #64	; 0x40
 800dc9a:	f7ff ff21 	bl	800dae0 <_malloc_r>
 800dc9e:	6028      	str	r0, [r5, #0]
 800dca0:	6128      	str	r0, [r5, #16]
 800dca2:	b920      	cbnz	r0, 800dcae <_svfiprintf_r+0x2e>
 800dca4:	230c      	movs	r3, #12
 800dca6:	603b      	str	r3, [r7, #0]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	e0d1      	b.n	800de52 <_svfiprintf_r+0x1d2>
 800dcae:	2340      	movs	r3, #64	; 0x40
 800dcb0:	616b      	str	r3, [r5, #20]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb6:	2320      	movs	r3, #32
 800dcb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcc0:	2330      	movs	r3, #48	; 0x30
 800dcc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de6c <_svfiprintf_r+0x1ec>
 800dcc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcca:	f04f 0901 	mov.w	r9, #1
 800dcce:	4623      	mov	r3, r4
 800dcd0:	469a      	mov	sl, r3
 800dcd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcd6:	b10a      	cbz	r2, 800dcdc <_svfiprintf_r+0x5c>
 800dcd8:	2a25      	cmp	r2, #37	; 0x25
 800dcda:	d1f9      	bne.n	800dcd0 <_svfiprintf_r+0x50>
 800dcdc:	ebba 0b04 	subs.w	fp, sl, r4
 800dce0:	d00b      	beq.n	800dcfa <_svfiprintf_r+0x7a>
 800dce2:	465b      	mov	r3, fp
 800dce4:	4622      	mov	r2, r4
 800dce6:	4629      	mov	r1, r5
 800dce8:	4638      	mov	r0, r7
 800dcea:	f7ff ff6d 	bl	800dbc8 <__ssputs_r>
 800dcee:	3001      	adds	r0, #1
 800dcf0:	f000 80aa 	beq.w	800de48 <_svfiprintf_r+0x1c8>
 800dcf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcf6:	445a      	add	r2, fp
 800dcf8:	9209      	str	r2, [sp, #36]	; 0x24
 800dcfa:	f89a 3000 	ldrb.w	r3, [sl]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 80a2 	beq.w	800de48 <_svfiprintf_r+0x1c8>
 800dd04:	2300      	movs	r3, #0
 800dd06:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd0e:	f10a 0a01 	add.w	sl, sl, #1
 800dd12:	9304      	str	r3, [sp, #16]
 800dd14:	9307      	str	r3, [sp, #28]
 800dd16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd1a:	931a      	str	r3, [sp, #104]	; 0x68
 800dd1c:	4654      	mov	r4, sl
 800dd1e:	2205      	movs	r2, #5
 800dd20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd24:	4851      	ldr	r0, [pc, #324]	; (800de6c <_svfiprintf_r+0x1ec>)
 800dd26:	f7f2 fa93 	bl	8000250 <memchr>
 800dd2a:	9a04      	ldr	r2, [sp, #16]
 800dd2c:	b9d8      	cbnz	r0, 800dd66 <_svfiprintf_r+0xe6>
 800dd2e:	06d0      	lsls	r0, r2, #27
 800dd30:	bf44      	itt	mi
 800dd32:	2320      	movmi	r3, #32
 800dd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd38:	0711      	lsls	r1, r2, #28
 800dd3a:	bf44      	itt	mi
 800dd3c:	232b      	movmi	r3, #43	; 0x2b
 800dd3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd42:	f89a 3000 	ldrb.w	r3, [sl]
 800dd46:	2b2a      	cmp	r3, #42	; 0x2a
 800dd48:	d015      	beq.n	800dd76 <_svfiprintf_r+0xf6>
 800dd4a:	9a07      	ldr	r2, [sp, #28]
 800dd4c:	4654      	mov	r4, sl
 800dd4e:	2000      	movs	r0, #0
 800dd50:	f04f 0c0a 	mov.w	ip, #10
 800dd54:	4621      	mov	r1, r4
 800dd56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd5a:	3b30      	subs	r3, #48	; 0x30
 800dd5c:	2b09      	cmp	r3, #9
 800dd5e:	d94e      	bls.n	800ddfe <_svfiprintf_r+0x17e>
 800dd60:	b1b0      	cbz	r0, 800dd90 <_svfiprintf_r+0x110>
 800dd62:	9207      	str	r2, [sp, #28]
 800dd64:	e014      	b.n	800dd90 <_svfiprintf_r+0x110>
 800dd66:	eba0 0308 	sub.w	r3, r0, r8
 800dd6a:	fa09 f303 	lsl.w	r3, r9, r3
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	9304      	str	r3, [sp, #16]
 800dd72:	46a2      	mov	sl, r4
 800dd74:	e7d2      	b.n	800dd1c <_svfiprintf_r+0x9c>
 800dd76:	9b03      	ldr	r3, [sp, #12]
 800dd78:	1d19      	adds	r1, r3, #4
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	9103      	str	r1, [sp, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	bfbb      	ittet	lt
 800dd82:	425b      	neglt	r3, r3
 800dd84:	f042 0202 	orrlt.w	r2, r2, #2
 800dd88:	9307      	strge	r3, [sp, #28]
 800dd8a:	9307      	strlt	r3, [sp, #28]
 800dd8c:	bfb8      	it	lt
 800dd8e:	9204      	strlt	r2, [sp, #16]
 800dd90:	7823      	ldrb	r3, [r4, #0]
 800dd92:	2b2e      	cmp	r3, #46	; 0x2e
 800dd94:	d10c      	bne.n	800ddb0 <_svfiprintf_r+0x130>
 800dd96:	7863      	ldrb	r3, [r4, #1]
 800dd98:	2b2a      	cmp	r3, #42	; 0x2a
 800dd9a:	d135      	bne.n	800de08 <_svfiprintf_r+0x188>
 800dd9c:	9b03      	ldr	r3, [sp, #12]
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	9203      	str	r2, [sp, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bfb8      	it	lt
 800dda8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddac:	3402      	adds	r4, #2
 800ddae:	9305      	str	r3, [sp, #20]
 800ddb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de7c <_svfiprintf_r+0x1fc>
 800ddb4:	7821      	ldrb	r1, [r4, #0]
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	4650      	mov	r0, sl
 800ddba:	f7f2 fa49 	bl	8000250 <memchr>
 800ddbe:	b140      	cbz	r0, 800ddd2 <_svfiprintf_r+0x152>
 800ddc0:	2340      	movs	r3, #64	; 0x40
 800ddc2:	eba0 000a 	sub.w	r0, r0, sl
 800ddc6:	fa03 f000 	lsl.w	r0, r3, r0
 800ddca:	9b04      	ldr	r3, [sp, #16]
 800ddcc:	4303      	orrs	r3, r0
 800ddce:	3401      	adds	r4, #1
 800ddd0:	9304      	str	r3, [sp, #16]
 800ddd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd6:	4826      	ldr	r0, [pc, #152]	; (800de70 <_svfiprintf_r+0x1f0>)
 800ddd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dddc:	2206      	movs	r2, #6
 800ddde:	f7f2 fa37 	bl	8000250 <memchr>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d038      	beq.n	800de58 <_svfiprintf_r+0x1d8>
 800dde6:	4b23      	ldr	r3, [pc, #140]	; (800de74 <_svfiprintf_r+0x1f4>)
 800dde8:	bb1b      	cbnz	r3, 800de32 <_svfiprintf_r+0x1b2>
 800ddea:	9b03      	ldr	r3, [sp, #12]
 800ddec:	3307      	adds	r3, #7
 800ddee:	f023 0307 	bic.w	r3, r3, #7
 800ddf2:	3308      	adds	r3, #8
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf8:	4433      	add	r3, r6
 800ddfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfc:	e767      	b.n	800dcce <_svfiprintf_r+0x4e>
 800ddfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800de02:	460c      	mov	r4, r1
 800de04:	2001      	movs	r0, #1
 800de06:	e7a5      	b.n	800dd54 <_svfiprintf_r+0xd4>
 800de08:	2300      	movs	r3, #0
 800de0a:	3401      	adds	r4, #1
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	4619      	mov	r1, r3
 800de10:	f04f 0c0a 	mov.w	ip, #10
 800de14:	4620      	mov	r0, r4
 800de16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de1a:	3a30      	subs	r2, #48	; 0x30
 800de1c:	2a09      	cmp	r2, #9
 800de1e:	d903      	bls.n	800de28 <_svfiprintf_r+0x1a8>
 800de20:	2b00      	cmp	r3, #0
 800de22:	d0c5      	beq.n	800ddb0 <_svfiprintf_r+0x130>
 800de24:	9105      	str	r1, [sp, #20]
 800de26:	e7c3      	b.n	800ddb0 <_svfiprintf_r+0x130>
 800de28:	fb0c 2101 	mla	r1, ip, r1, r2
 800de2c:	4604      	mov	r4, r0
 800de2e:	2301      	movs	r3, #1
 800de30:	e7f0      	b.n	800de14 <_svfiprintf_r+0x194>
 800de32:	ab03      	add	r3, sp, #12
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	462a      	mov	r2, r5
 800de38:	4b0f      	ldr	r3, [pc, #60]	; (800de78 <_svfiprintf_r+0x1f8>)
 800de3a:	a904      	add	r1, sp, #16
 800de3c:	4638      	mov	r0, r7
 800de3e:	f7fc fc4f 	bl	800a6e0 <_printf_float>
 800de42:	1c42      	adds	r2, r0, #1
 800de44:	4606      	mov	r6, r0
 800de46:	d1d6      	bne.n	800ddf6 <_svfiprintf_r+0x176>
 800de48:	89ab      	ldrh	r3, [r5, #12]
 800de4a:	065b      	lsls	r3, r3, #25
 800de4c:	f53f af2c 	bmi.w	800dca8 <_svfiprintf_r+0x28>
 800de50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de52:	b01d      	add	sp, #116	; 0x74
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de58:	ab03      	add	r3, sp, #12
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	462a      	mov	r2, r5
 800de5e:	4b06      	ldr	r3, [pc, #24]	; (800de78 <_svfiprintf_r+0x1f8>)
 800de60:	a904      	add	r1, sp, #16
 800de62:	4638      	mov	r0, r7
 800de64:	f7fc fee0 	bl	800ac28 <_printf_i>
 800de68:	e7eb      	b.n	800de42 <_svfiprintf_r+0x1c2>
 800de6a:	bf00      	nop
 800de6c:	0800ef4c 	.word	0x0800ef4c
 800de70:	0800ef56 	.word	0x0800ef56
 800de74:	0800a6e1 	.word	0x0800a6e1
 800de78:	0800dbc9 	.word	0x0800dbc9
 800de7c:	0800ef52 	.word	0x0800ef52

0800de80 <__sfputc_r>:
 800de80:	6893      	ldr	r3, [r2, #8]
 800de82:	3b01      	subs	r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	b410      	push	{r4}
 800de88:	6093      	str	r3, [r2, #8]
 800de8a:	da08      	bge.n	800de9e <__sfputc_r+0x1e>
 800de8c:	6994      	ldr	r4, [r2, #24]
 800de8e:	42a3      	cmp	r3, r4
 800de90:	db01      	blt.n	800de96 <__sfputc_r+0x16>
 800de92:	290a      	cmp	r1, #10
 800de94:	d103      	bne.n	800de9e <__sfputc_r+0x1e>
 800de96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de9a:	f000 b979 	b.w	800e190 <__swbuf_r>
 800de9e:	6813      	ldr	r3, [r2, #0]
 800dea0:	1c58      	adds	r0, r3, #1
 800dea2:	6010      	str	r0, [r2, #0]
 800dea4:	7019      	strb	r1, [r3, #0]
 800dea6:	4608      	mov	r0, r1
 800dea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deac:	4770      	bx	lr

0800deae <__sfputs_r>:
 800deae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb0:	4606      	mov	r6, r0
 800deb2:	460f      	mov	r7, r1
 800deb4:	4614      	mov	r4, r2
 800deb6:	18d5      	adds	r5, r2, r3
 800deb8:	42ac      	cmp	r4, r5
 800deba:	d101      	bne.n	800dec0 <__sfputs_r+0x12>
 800debc:	2000      	movs	r0, #0
 800debe:	e007      	b.n	800ded0 <__sfputs_r+0x22>
 800dec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec4:	463a      	mov	r2, r7
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7ff ffda 	bl	800de80 <__sfputc_r>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d1f3      	bne.n	800deb8 <__sfputs_r+0xa>
 800ded0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ded4 <_vfiprintf_r>:
 800ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	460d      	mov	r5, r1
 800deda:	b09d      	sub	sp, #116	; 0x74
 800dedc:	4614      	mov	r4, r2
 800dede:	4698      	mov	r8, r3
 800dee0:	4606      	mov	r6, r0
 800dee2:	b118      	cbz	r0, 800deec <_vfiprintf_r+0x18>
 800dee4:	6983      	ldr	r3, [r0, #24]
 800dee6:	b90b      	cbnz	r3, 800deec <_vfiprintf_r+0x18>
 800dee8:	f000 fb42 	bl	800e570 <__sinit>
 800deec:	4b89      	ldr	r3, [pc, #548]	; (800e114 <_vfiprintf_r+0x240>)
 800deee:	429d      	cmp	r5, r3
 800def0:	d11b      	bne.n	800df2a <_vfiprintf_r+0x56>
 800def2:	6875      	ldr	r5, [r6, #4]
 800def4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	d405      	bmi.n	800df06 <_vfiprintf_r+0x32>
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	059a      	lsls	r2, r3, #22
 800defe:	d402      	bmi.n	800df06 <_vfiprintf_r+0x32>
 800df00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df02:	f000 fbd3 	bl	800e6ac <__retarget_lock_acquire_recursive>
 800df06:	89ab      	ldrh	r3, [r5, #12]
 800df08:	071b      	lsls	r3, r3, #28
 800df0a:	d501      	bpl.n	800df10 <_vfiprintf_r+0x3c>
 800df0c:	692b      	ldr	r3, [r5, #16]
 800df0e:	b9eb      	cbnz	r3, 800df4c <_vfiprintf_r+0x78>
 800df10:	4629      	mov	r1, r5
 800df12:	4630      	mov	r0, r6
 800df14:	f000 f99c 	bl	800e250 <__swsetup_r>
 800df18:	b1c0      	cbz	r0, 800df4c <_vfiprintf_r+0x78>
 800df1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df1c:	07dc      	lsls	r4, r3, #31
 800df1e:	d50e      	bpl.n	800df3e <_vfiprintf_r+0x6a>
 800df20:	f04f 30ff 	mov.w	r0, #4294967295
 800df24:	b01d      	add	sp, #116	; 0x74
 800df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2a:	4b7b      	ldr	r3, [pc, #492]	; (800e118 <_vfiprintf_r+0x244>)
 800df2c:	429d      	cmp	r5, r3
 800df2e:	d101      	bne.n	800df34 <_vfiprintf_r+0x60>
 800df30:	68b5      	ldr	r5, [r6, #8]
 800df32:	e7df      	b.n	800def4 <_vfiprintf_r+0x20>
 800df34:	4b79      	ldr	r3, [pc, #484]	; (800e11c <_vfiprintf_r+0x248>)
 800df36:	429d      	cmp	r5, r3
 800df38:	bf08      	it	eq
 800df3a:	68f5      	ldreq	r5, [r6, #12]
 800df3c:	e7da      	b.n	800def4 <_vfiprintf_r+0x20>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	0598      	lsls	r0, r3, #22
 800df42:	d4ed      	bmi.n	800df20 <_vfiprintf_r+0x4c>
 800df44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df46:	f000 fbb2 	bl	800e6ae <__retarget_lock_release_recursive>
 800df4a:	e7e9      	b.n	800df20 <_vfiprintf_r+0x4c>
 800df4c:	2300      	movs	r3, #0
 800df4e:	9309      	str	r3, [sp, #36]	; 0x24
 800df50:	2320      	movs	r3, #32
 800df52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df56:	f8cd 800c 	str.w	r8, [sp, #12]
 800df5a:	2330      	movs	r3, #48	; 0x30
 800df5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e120 <_vfiprintf_r+0x24c>
 800df60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df64:	f04f 0901 	mov.w	r9, #1
 800df68:	4623      	mov	r3, r4
 800df6a:	469a      	mov	sl, r3
 800df6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df70:	b10a      	cbz	r2, 800df76 <_vfiprintf_r+0xa2>
 800df72:	2a25      	cmp	r2, #37	; 0x25
 800df74:	d1f9      	bne.n	800df6a <_vfiprintf_r+0x96>
 800df76:	ebba 0b04 	subs.w	fp, sl, r4
 800df7a:	d00b      	beq.n	800df94 <_vfiprintf_r+0xc0>
 800df7c:	465b      	mov	r3, fp
 800df7e:	4622      	mov	r2, r4
 800df80:	4629      	mov	r1, r5
 800df82:	4630      	mov	r0, r6
 800df84:	f7ff ff93 	bl	800deae <__sfputs_r>
 800df88:	3001      	adds	r0, #1
 800df8a:	f000 80aa 	beq.w	800e0e2 <_vfiprintf_r+0x20e>
 800df8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df90:	445a      	add	r2, fp
 800df92:	9209      	str	r2, [sp, #36]	; 0x24
 800df94:	f89a 3000 	ldrb.w	r3, [sl]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f000 80a2 	beq.w	800e0e2 <_vfiprintf_r+0x20e>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfa8:	f10a 0a01 	add.w	sl, sl, #1
 800dfac:	9304      	str	r3, [sp, #16]
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfb4:	931a      	str	r3, [sp, #104]	; 0x68
 800dfb6:	4654      	mov	r4, sl
 800dfb8:	2205      	movs	r2, #5
 800dfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbe:	4858      	ldr	r0, [pc, #352]	; (800e120 <_vfiprintf_r+0x24c>)
 800dfc0:	f7f2 f946 	bl	8000250 <memchr>
 800dfc4:	9a04      	ldr	r2, [sp, #16]
 800dfc6:	b9d8      	cbnz	r0, 800e000 <_vfiprintf_r+0x12c>
 800dfc8:	06d1      	lsls	r1, r2, #27
 800dfca:	bf44      	itt	mi
 800dfcc:	2320      	movmi	r3, #32
 800dfce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfd2:	0713      	lsls	r3, r2, #28
 800dfd4:	bf44      	itt	mi
 800dfd6:	232b      	movmi	r3, #43	; 0x2b
 800dfd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dfe0:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe2:	d015      	beq.n	800e010 <_vfiprintf_r+0x13c>
 800dfe4:	9a07      	ldr	r2, [sp, #28]
 800dfe6:	4654      	mov	r4, sl
 800dfe8:	2000      	movs	r0, #0
 800dfea:	f04f 0c0a 	mov.w	ip, #10
 800dfee:	4621      	mov	r1, r4
 800dff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dff4:	3b30      	subs	r3, #48	; 0x30
 800dff6:	2b09      	cmp	r3, #9
 800dff8:	d94e      	bls.n	800e098 <_vfiprintf_r+0x1c4>
 800dffa:	b1b0      	cbz	r0, 800e02a <_vfiprintf_r+0x156>
 800dffc:	9207      	str	r2, [sp, #28]
 800dffe:	e014      	b.n	800e02a <_vfiprintf_r+0x156>
 800e000:	eba0 0308 	sub.w	r3, r0, r8
 800e004:	fa09 f303 	lsl.w	r3, r9, r3
 800e008:	4313      	orrs	r3, r2
 800e00a:	9304      	str	r3, [sp, #16]
 800e00c:	46a2      	mov	sl, r4
 800e00e:	e7d2      	b.n	800dfb6 <_vfiprintf_r+0xe2>
 800e010:	9b03      	ldr	r3, [sp, #12]
 800e012:	1d19      	adds	r1, r3, #4
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	9103      	str	r1, [sp, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bfbb      	ittet	lt
 800e01c:	425b      	neglt	r3, r3
 800e01e:	f042 0202 	orrlt.w	r2, r2, #2
 800e022:	9307      	strge	r3, [sp, #28]
 800e024:	9307      	strlt	r3, [sp, #28]
 800e026:	bfb8      	it	lt
 800e028:	9204      	strlt	r2, [sp, #16]
 800e02a:	7823      	ldrb	r3, [r4, #0]
 800e02c:	2b2e      	cmp	r3, #46	; 0x2e
 800e02e:	d10c      	bne.n	800e04a <_vfiprintf_r+0x176>
 800e030:	7863      	ldrb	r3, [r4, #1]
 800e032:	2b2a      	cmp	r3, #42	; 0x2a
 800e034:	d135      	bne.n	800e0a2 <_vfiprintf_r+0x1ce>
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	1d1a      	adds	r2, r3, #4
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	9203      	str	r2, [sp, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bfb8      	it	lt
 800e042:	f04f 33ff 	movlt.w	r3, #4294967295
 800e046:	3402      	adds	r4, #2
 800e048:	9305      	str	r3, [sp, #20]
 800e04a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e130 <_vfiprintf_r+0x25c>
 800e04e:	7821      	ldrb	r1, [r4, #0]
 800e050:	2203      	movs	r2, #3
 800e052:	4650      	mov	r0, sl
 800e054:	f7f2 f8fc 	bl	8000250 <memchr>
 800e058:	b140      	cbz	r0, 800e06c <_vfiprintf_r+0x198>
 800e05a:	2340      	movs	r3, #64	; 0x40
 800e05c:	eba0 000a 	sub.w	r0, r0, sl
 800e060:	fa03 f000 	lsl.w	r0, r3, r0
 800e064:	9b04      	ldr	r3, [sp, #16]
 800e066:	4303      	orrs	r3, r0
 800e068:	3401      	adds	r4, #1
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e070:	482c      	ldr	r0, [pc, #176]	; (800e124 <_vfiprintf_r+0x250>)
 800e072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e076:	2206      	movs	r2, #6
 800e078:	f7f2 f8ea 	bl	8000250 <memchr>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d03f      	beq.n	800e100 <_vfiprintf_r+0x22c>
 800e080:	4b29      	ldr	r3, [pc, #164]	; (800e128 <_vfiprintf_r+0x254>)
 800e082:	bb1b      	cbnz	r3, 800e0cc <_vfiprintf_r+0x1f8>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	3307      	adds	r3, #7
 800e088:	f023 0307 	bic.w	r3, r3, #7
 800e08c:	3308      	adds	r3, #8
 800e08e:	9303      	str	r3, [sp, #12]
 800e090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e092:	443b      	add	r3, r7
 800e094:	9309      	str	r3, [sp, #36]	; 0x24
 800e096:	e767      	b.n	800df68 <_vfiprintf_r+0x94>
 800e098:	fb0c 3202 	mla	r2, ip, r2, r3
 800e09c:	460c      	mov	r4, r1
 800e09e:	2001      	movs	r0, #1
 800e0a0:	e7a5      	b.n	800dfee <_vfiprintf_r+0x11a>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	3401      	adds	r4, #1
 800e0a6:	9305      	str	r3, [sp, #20]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f04f 0c0a 	mov.w	ip, #10
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0b4:	3a30      	subs	r2, #48	; 0x30
 800e0b6:	2a09      	cmp	r2, #9
 800e0b8:	d903      	bls.n	800e0c2 <_vfiprintf_r+0x1ee>
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0c5      	beq.n	800e04a <_vfiprintf_r+0x176>
 800e0be:	9105      	str	r1, [sp, #20]
 800e0c0:	e7c3      	b.n	800e04a <_vfiprintf_r+0x176>
 800e0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e7f0      	b.n	800e0ae <_vfiprintf_r+0x1da>
 800e0cc:	ab03      	add	r3, sp, #12
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	462a      	mov	r2, r5
 800e0d2:	4b16      	ldr	r3, [pc, #88]	; (800e12c <_vfiprintf_r+0x258>)
 800e0d4:	a904      	add	r1, sp, #16
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7fc fb02 	bl	800a6e0 <_printf_float>
 800e0dc:	4607      	mov	r7, r0
 800e0de:	1c78      	adds	r0, r7, #1
 800e0e0:	d1d6      	bne.n	800e090 <_vfiprintf_r+0x1bc>
 800e0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0e4:	07d9      	lsls	r1, r3, #31
 800e0e6:	d405      	bmi.n	800e0f4 <_vfiprintf_r+0x220>
 800e0e8:	89ab      	ldrh	r3, [r5, #12]
 800e0ea:	059a      	lsls	r2, r3, #22
 800e0ec:	d402      	bmi.n	800e0f4 <_vfiprintf_r+0x220>
 800e0ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0f0:	f000 fadd 	bl	800e6ae <__retarget_lock_release_recursive>
 800e0f4:	89ab      	ldrh	r3, [r5, #12]
 800e0f6:	065b      	lsls	r3, r3, #25
 800e0f8:	f53f af12 	bmi.w	800df20 <_vfiprintf_r+0x4c>
 800e0fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0fe:	e711      	b.n	800df24 <_vfiprintf_r+0x50>
 800e100:	ab03      	add	r3, sp, #12
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	462a      	mov	r2, r5
 800e106:	4b09      	ldr	r3, [pc, #36]	; (800e12c <_vfiprintf_r+0x258>)
 800e108:	a904      	add	r1, sp, #16
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7fc fd8c 	bl	800ac28 <_printf_i>
 800e110:	e7e4      	b.n	800e0dc <_vfiprintf_r+0x208>
 800e112:	bf00      	nop
 800e114:	0800f080 	.word	0x0800f080
 800e118:	0800f0a0 	.word	0x0800f0a0
 800e11c:	0800f060 	.word	0x0800f060
 800e120:	0800ef4c 	.word	0x0800ef4c
 800e124:	0800ef56 	.word	0x0800ef56
 800e128:	0800a6e1 	.word	0x0800a6e1
 800e12c:	0800deaf 	.word	0x0800deaf
 800e130:	0800ef52 	.word	0x0800ef52
 800e134:	00000000 	.word	0x00000000

0800e138 <nan>:
 800e138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e140 <nan+0x8>
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	00000000 	.word	0x00000000
 800e144:	7ff80000 	.word	0x7ff80000

0800e148 <_sbrk_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d06      	ldr	r5, [pc, #24]	; (800e164 <_sbrk_r+0x1c>)
 800e14c:	2300      	movs	r3, #0
 800e14e:	4604      	mov	r4, r0
 800e150:	4608      	mov	r0, r1
 800e152:	602b      	str	r3, [r5, #0]
 800e154:	f7f5 f830 	bl	80031b8 <_sbrk>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_sbrk_r+0x1a>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_sbrk_r+0x1a>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	20000564 	.word	0x20000564

0800e168 <strncmp>:
 800e168:	b510      	push	{r4, lr}
 800e16a:	b17a      	cbz	r2, 800e18c <strncmp+0x24>
 800e16c:	4603      	mov	r3, r0
 800e16e:	3901      	subs	r1, #1
 800e170:	1884      	adds	r4, r0, r2
 800e172:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e176:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e17a:	4290      	cmp	r0, r2
 800e17c:	d101      	bne.n	800e182 <strncmp+0x1a>
 800e17e:	42a3      	cmp	r3, r4
 800e180:	d101      	bne.n	800e186 <strncmp+0x1e>
 800e182:	1a80      	subs	r0, r0, r2
 800e184:	bd10      	pop	{r4, pc}
 800e186:	2800      	cmp	r0, #0
 800e188:	d1f3      	bne.n	800e172 <strncmp+0xa>
 800e18a:	e7fa      	b.n	800e182 <strncmp+0x1a>
 800e18c:	4610      	mov	r0, r2
 800e18e:	e7f9      	b.n	800e184 <strncmp+0x1c>

0800e190 <__swbuf_r>:
 800e190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e192:	460e      	mov	r6, r1
 800e194:	4614      	mov	r4, r2
 800e196:	4605      	mov	r5, r0
 800e198:	b118      	cbz	r0, 800e1a2 <__swbuf_r+0x12>
 800e19a:	6983      	ldr	r3, [r0, #24]
 800e19c:	b90b      	cbnz	r3, 800e1a2 <__swbuf_r+0x12>
 800e19e:	f000 f9e7 	bl	800e570 <__sinit>
 800e1a2:	4b21      	ldr	r3, [pc, #132]	; (800e228 <__swbuf_r+0x98>)
 800e1a4:	429c      	cmp	r4, r3
 800e1a6:	d12b      	bne.n	800e200 <__swbuf_r+0x70>
 800e1a8:	686c      	ldr	r4, [r5, #4]
 800e1aa:	69a3      	ldr	r3, [r4, #24]
 800e1ac:	60a3      	str	r3, [r4, #8]
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	071a      	lsls	r2, r3, #28
 800e1b2:	d52f      	bpl.n	800e214 <__swbuf_r+0x84>
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	b36b      	cbz	r3, 800e214 <__swbuf_r+0x84>
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	1ac0      	subs	r0, r0, r3
 800e1be:	6963      	ldr	r3, [r4, #20]
 800e1c0:	b2f6      	uxtb	r6, r6
 800e1c2:	4283      	cmp	r3, r0
 800e1c4:	4637      	mov	r7, r6
 800e1c6:	dc04      	bgt.n	800e1d2 <__swbuf_r+0x42>
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f000 f93c 	bl	800e448 <_fflush_r>
 800e1d0:	bb30      	cbnz	r0, 800e220 <__swbuf_r+0x90>
 800e1d2:	68a3      	ldr	r3, [r4, #8]
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	60a3      	str	r3, [r4, #8]
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	1c5a      	adds	r2, r3, #1
 800e1dc:	6022      	str	r2, [r4, #0]
 800e1de:	701e      	strb	r6, [r3, #0]
 800e1e0:	6963      	ldr	r3, [r4, #20]
 800e1e2:	3001      	adds	r0, #1
 800e1e4:	4283      	cmp	r3, r0
 800e1e6:	d004      	beq.n	800e1f2 <__swbuf_r+0x62>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	07db      	lsls	r3, r3, #31
 800e1ec:	d506      	bpl.n	800e1fc <__swbuf_r+0x6c>
 800e1ee:	2e0a      	cmp	r6, #10
 800e1f0:	d104      	bne.n	800e1fc <__swbuf_r+0x6c>
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f000 f927 	bl	800e448 <_fflush_r>
 800e1fa:	b988      	cbnz	r0, 800e220 <__swbuf_r+0x90>
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e200:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <__swbuf_r+0x9c>)
 800e202:	429c      	cmp	r4, r3
 800e204:	d101      	bne.n	800e20a <__swbuf_r+0x7a>
 800e206:	68ac      	ldr	r4, [r5, #8]
 800e208:	e7cf      	b.n	800e1aa <__swbuf_r+0x1a>
 800e20a:	4b09      	ldr	r3, [pc, #36]	; (800e230 <__swbuf_r+0xa0>)
 800e20c:	429c      	cmp	r4, r3
 800e20e:	bf08      	it	eq
 800e210:	68ec      	ldreq	r4, [r5, #12]
 800e212:	e7ca      	b.n	800e1aa <__swbuf_r+0x1a>
 800e214:	4621      	mov	r1, r4
 800e216:	4628      	mov	r0, r5
 800e218:	f000 f81a 	bl	800e250 <__swsetup_r>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	d0cb      	beq.n	800e1b8 <__swbuf_r+0x28>
 800e220:	f04f 37ff 	mov.w	r7, #4294967295
 800e224:	e7ea      	b.n	800e1fc <__swbuf_r+0x6c>
 800e226:	bf00      	nop
 800e228:	0800f080 	.word	0x0800f080
 800e22c:	0800f0a0 	.word	0x0800f0a0
 800e230:	0800f060 	.word	0x0800f060

0800e234 <__ascii_wctomb>:
 800e234:	b149      	cbz	r1, 800e24a <__ascii_wctomb+0x16>
 800e236:	2aff      	cmp	r2, #255	; 0xff
 800e238:	bf85      	ittet	hi
 800e23a:	238a      	movhi	r3, #138	; 0x8a
 800e23c:	6003      	strhi	r3, [r0, #0]
 800e23e:	700a      	strbls	r2, [r1, #0]
 800e240:	f04f 30ff 	movhi.w	r0, #4294967295
 800e244:	bf98      	it	ls
 800e246:	2001      	movls	r0, #1
 800e248:	4770      	bx	lr
 800e24a:	4608      	mov	r0, r1
 800e24c:	4770      	bx	lr
	...

0800e250 <__swsetup_r>:
 800e250:	4b32      	ldr	r3, [pc, #200]	; (800e31c <__swsetup_r+0xcc>)
 800e252:	b570      	push	{r4, r5, r6, lr}
 800e254:	681d      	ldr	r5, [r3, #0]
 800e256:	4606      	mov	r6, r0
 800e258:	460c      	mov	r4, r1
 800e25a:	b125      	cbz	r5, 800e266 <__swsetup_r+0x16>
 800e25c:	69ab      	ldr	r3, [r5, #24]
 800e25e:	b913      	cbnz	r3, 800e266 <__swsetup_r+0x16>
 800e260:	4628      	mov	r0, r5
 800e262:	f000 f985 	bl	800e570 <__sinit>
 800e266:	4b2e      	ldr	r3, [pc, #184]	; (800e320 <__swsetup_r+0xd0>)
 800e268:	429c      	cmp	r4, r3
 800e26a:	d10f      	bne.n	800e28c <__swsetup_r+0x3c>
 800e26c:	686c      	ldr	r4, [r5, #4]
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e274:	0719      	lsls	r1, r3, #28
 800e276:	d42c      	bmi.n	800e2d2 <__swsetup_r+0x82>
 800e278:	06dd      	lsls	r5, r3, #27
 800e27a:	d411      	bmi.n	800e2a0 <__swsetup_r+0x50>
 800e27c:	2309      	movs	r3, #9
 800e27e:	6033      	str	r3, [r6, #0]
 800e280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e284:	81a3      	strh	r3, [r4, #12]
 800e286:	f04f 30ff 	mov.w	r0, #4294967295
 800e28a:	e03e      	b.n	800e30a <__swsetup_r+0xba>
 800e28c:	4b25      	ldr	r3, [pc, #148]	; (800e324 <__swsetup_r+0xd4>)
 800e28e:	429c      	cmp	r4, r3
 800e290:	d101      	bne.n	800e296 <__swsetup_r+0x46>
 800e292:	68ac      	ldr	r4, [r5, #8]
 800e294:	e7eb      	b.n	800e26e <__swsetup_r+0x1e>
 800e296:	4b24      	ldr	r3, [pc, #144]	; (800e328 <__swsetup_r+0xd8>)
 800e298:	429c      	cmp	r4, r3
 800e29a:	bf08      	it	eq
 800e29c:	68ec      	ldreq	r4, [r5, #12]
 800e29e:	e7e6      	b.n	800e26e <__swsetup_r+0x1e>
 800e2a0:	0758      	lsls	r0, r3, #29
 800e2a2:	d512      	bpl.n	800e2ca <__swsetup_r+0x7a>
 800e2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2a6:	b141      	cbz	r1, 800e2ba <__swsetup_r+0x6a>
 800e2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2ac:	4299      	cmp	r1, r3
 800e2ae:	d002      	beq.n	800e2b6 <__swsetup_r+0x66>
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff fba9 	bl	800da08 <_free_r>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	6363      	str	r3, [r4, #52]	; 0x34
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2c0:	81a3      	strh	r3, [r4, #12]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	6923      	ldr	r3, [r4, #16]
 800e2c8:	6023      	str	r3, [r4, #0]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	f043 0308 	orr.w	r3, r3, #8
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	6923      	ldr	r3, [r4, #16]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <__swsetup_r+0x9a>
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2e0:	d003      	beq.n	800e2ea <__swsetup_r+0x9a>
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f000 fa09 	bl	800e6fc <__smakebuf_r>
 800e2ea:	89a0      	ldrh	r0, [r4, #12]
 800e2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2f0:	f010 0301 	ands.w	r3, r0, #1
 800e2f4:	d00a      	beq.n	800e30c <__swsetup_r+0xbc>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60a3      	str	r3, [r4, #8]
 800e2fa:	6963      	ldr	r3, [r4, #20]
 800e2fc:	425b      	negs	r3, r3
 800e2fe:	61a3      	str	r3, [r4, #24]
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	b943      	cbnz	r3, 800e316 <__swsetup_r+0xc6>
 800e304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e308:	d1ba      	bne.n	800e280 <__swsetup_r+0x30>
 800e30a:	bd70      	pop	{r4, r5, r6, pc}
 800e30c:	0781      	lsls	r1, r0, #30
 800e30e:	bf58      	it	pl
 800e310:	6963      	ldrpl	r3, [r4, #20]
 800e312:	60a3      	str	r3, [r4, #8]
 800e314:	e7f4      	b.n	800e300 <__swsetup_r+0xb0>
 800e316:	2000      	movs	r0, #0
 800e318:	e7f7      	b.n	800e30a <__swsetup_r+0xba>
 800e31a:	bf00      	nop
 800e31c:	20000010 	.word	0x20000010
 800e320:	0800f080 	.word	0x0800f080
 800e324:	0800f0a0 	.word	0x0800f0a0
 800e328:	0800f060 	.word	0x0800f060

0800e32c <abort>:
 800e32c:	b508      	push	{r3, lr}
 800e32e:	2006      	movs	r0, #6
 800e330:	f000 faa2 	bl	800e878 <raise>
 800e334:	2001      	movs	r0, #1
 800e336:	f7f4 fec7 	bl	80030c8 <_exit>
	...

0800e33c <__sflush_r>:
 800e33c:	898a      	ldrh	r2, [r1, #12]
 800e33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e342:	4605      	mov	r5, r0
 800e344:	0710      	lsls	r0, r2, #28
 800e346:	460c      	mov	r4, r1
 800e348:	d458      	bmi.n	800e3fc <__sflush_r+0xc0>
 800e34a:	684b      	ldr	r3, [r1, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	dc05      	bgt.n	800e35c <__sflush_r+0x20>
 800e350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e352:	2b00      	cmp	r3, #0
 800e354:	dc02      	bgt.n	800e35c <__sflush_r+0x20>
 800e356:	2000      	movs	r0, #0
 800e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e35e:	2e00      	cmp	r6, #0
 800e360:	d0f9      	beq.n	800e356 <__sflush_r+0x1a>
 800e362:	2300      	movs	r3, #0
 800e364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e368:	682f      	ldr	r7, [r5, #0]
 800e36a:	602b      	str	r3, [r5, #0]
 800e36c:	d032      	beq.n	800e3d4 <__sflush_r+0x98>
 800e36e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	075a      	lsls	r2, r3, #29
 800e374:	d505      	bpl.n	800e382 <__sflush_r+0x46>
 800e376:	6863      	ldr	r3, [r4, #4]
 800e378:	1ac0      	subs	r0, r0, r3
 800e37a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e37c:	b10b      	cbz	r3, 800e382 <__sflush_r+0x46>
 800e37e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e380:	1ac0      	subs	r0, r0, r3
 800e382:	2300      	movs	r3, #0
 800e384:	4602      	mov	r2, r0
 800e386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e388:	6a21      	ldr	r1, [r4, #32]
 800e38a:	4628      	mov	r0, r5
 800e38c:	47b0      	blx	r6
 800e38e:	1c43      	adds	r3, r0, #1
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	d106      	bne.n	800e3a2 <__sflush_r+0x66>
 800e394:	6829      	ldr	r1, [r5, #0]
 800e396:	291d      	cmp	r1, #29
 800e398:	d82c      	bhi.n	800e3f4 <__sflush_r+0xb8>
 800e39a:	4a2a      	ldr	r2, [pc, #168]	; (800e444 <__sflush_r+0x108>)
 800e39c:	40ca      	lsrs	r2, r1
 800e39e:	07d6      	lsls	r6, r2, #31
 800e3a0:	d528      	bpl.n	800e3f4 <__sflush_r+0xb8>
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	6062      	str	r2, [r4, #4]
 800e3a6:	04d9      	lsls	r1, r3, #19
 800e3a8:	6922      	ldr	r2, [r4, #16]
 800e3aa:	6022      	str	r2, [r4, #0]
 800e3ac:	d504      	bpl.n	800e3b8 <__sflush_r+0x7c>
 800e3ae:	1c42      	adds	r2, r0, #1
 800e3b0:	d101      	bne.n	800e3b6 <__sflush_r+0x7a>
 800e3b2:	682b      	ldr	r3, [r5, #0]
 800e3b4:	b903      	cbnz	r3, 800e3b8 <__sflush_r+0x7c>
 800e3b6:	6560      	str	r0, [r4, #84]	; 0x54
 800e3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ba:	602f      	str	r7, [r5, #0]
 800e3bc:	2900      	cmp	r1, #0
 800e3be:	d0ca      	beq.n	800e356 <__sflush_r+0x1a>
 800e3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c4:	4299      	cmp	r1, r3
 800e3c6:	d002      	beq.n	800e3ce <__sflush_r+0x92>
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f7ff fb1d 	bl	800da08 <_free_r>
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	6360      	str	r0, [r4, #52]	; 0x34
 800e3d2:	e7c1      	b.n	800e358 <__sflush_r+0x1c>
 800e3d4:	6a21      	ldr	r1, [r4, #32]
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b0      	blx	r6
 800e3dc:	1c41      	adds	r1, r0, #1
 800e3de:	d1c7      	bne.n	800e370 <__sflush_r+0x34>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0c4      	beq.n	800e370 <__sflush_r+0x34>
 800e3e6:	2b1d      	cmp	r3, #29
 800e3e8:	d001      	beq.n	800e3ee <__sflush_r+0xb2>
 800e3ea:	2b16      	cmp	r3, #22
 800e3ec:	d101      	bne.n	800e3f2 <__sflush_r+0xb6>
 800e3ee:	602f      	str	r7, [r5, #0]
 800e3f0:	e7b1      	b.n	800e356 <__sflush_r+0x1a>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	e7ad      	b.n	800e358 <__sflush_r+0x1c>
 800e3fc:	690f      	ldr	r7, [r1, #16]
 800e3fe:	2f00      	cmp	r7, #0
 800e400:	d0a9      	beq.n	800e356 <__sflush_r+0x1a>
 800e402:	0793      	lsls	r3, r2, #30
 800e404:	680e      	ldr	r6, [r1, #0]
 800e406:	bf08      	it	eq
 800e408:	694b      	ldreq	r3, [r1, #20]
 800e40a:	600f      	str	r7, [r1, #0]
 800e40c:	bf18      	it	ne
 800e40e:	2300      	movne	r3, #0
 800e410:	eba6 0807 	sub.w	r8, r6, r7
 800e414:	608b      	str	r3, [r1, #8]
 800e416:	f1b8 0f00 	cmp.w	r8, #0
 800e41a:	dd9c      	ble.n	800e356 <__sflush_r+0x1a>
 800e41c:	6a21      	ldr	r1, [r4, #32]
 800e41e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e420:	4643      	mov	r3, r8
 800e422:	463a      	mov	r2, r7
 800e424:	4628      	mov	r0, r5
 800e426:	47b0      	blx	r6
 800e428:	2800      	cmp	r0, #0
 800e42a:	dc06      	bgt.n	800e43a <__sflush_r+0xfe>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	f04f 30ff 	mov.w	r0, #4294967295
 800e438:	e78e      	b.n	800e358 <__sflush_r+0x1c>
 800e43a:	4407      	add	r7, r0
 800e43c:	eba8 0800 	sub.w	r8, r8, r0
 800e440:	e7e9      	b.n	800e416 <__sflush_r+0xda>
 800e442:	bf00      	nop
 800e444:	20400001 	.word	0x20400001

0800e448 <_fflush_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	690b      	ldr	r3, [r1, #16]
 800e44c:	4605      	mov	r5, r0
 800e44e:	460c      	mov	r4, r1
 800e450:	b913      	cbnz	r3, 800e458 <_fflush_r+0x10>
 800e452:	2500      	movs	r5, #0
 800e454:	4628      	mov	r0, r5
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	b118      	cbz	r0, 800e462 <_fflush_r+0x1a>
 800e45a:	6983      	ldr	r3, [r0, #24]
 800e45c:	b90b      	cbnz	r3, 800e462 <_fflush_r+0x1a>
 800e45e:	f000 f887 	bl	800e570 <__sinit>
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <_fflush_r+0x6c>)
 800e464:	429c      	cmp	r4, r3
 800e466:	d11b      	bne.n	800e4a0 <_fflush_r+0x58>
 800e468:	686c      	ldr	r4, [r5, #4]
 800e46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0ef      	beq.n	800e452 <_fflush_r+0xa>
 800e472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e474:	07d0      	lsls	r0, r2, #31
 800e476:	d404      	bmi.n	800e482 <_fflush_r+0x3a>
 800e478:	0599      	lsls	r1, r3, #22
 800e47a:	d402      	bmi.n	800e482 <_fflush_r+0x3a>
 800e47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e47e:	f000 f915 	bl	800e6ac <__retarget_lock_acquire_recursive>
 800e482:	4628      	mov	r0, r5
 800e484:	4621      	mov	r1, r4
 800e486:	f7ff ff59 	bl	800e33c <__sflush_r>
 800e48a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e48c:	07da      	lsls	r2, r3, #31
 800e48e:	4605      	mov	r5, r0
 800e490:	d4e0      	bmi.n	800e454 <_fflush_r+0xc>
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	059b      	lsls	r3, r3, #22
 800e496:	d4dd      	bmi.n	800e454 <_fflush_r+0xc>
 800e498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e49a:	f000 f908 	bl	800e6ae <__retarget_lock_release_recursive>
 800e49e:	e7d9      	b.n	800e454 <_fflush_r+0xc>
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <_fflush_r+0x70>)
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	d101      	bne.n	800e4aa <_fflush_r+0x62>
 800e4a6:	68ac      	ldr	r4, [r5, #8]
 800e4a8:	e7df      	b.n	800e46a <_fflush_r+0x22>
 800e4aa:	4b04      	ldr	r3, [pc, #16]	; (800e4bc <_fflush_r+0x74>)
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	bf08      	it	eq
 800e4b0:	68ec      	ldreq	r4, [r5, #12]
 800e4b2:	e7da      	b.n	800e46a <_fflush_r+0x22>
 800e4b4:	0800f080 	.word	0x0800f080
 800e4b8:	0800f0a0 	.word	0x0800f0a0
 800e4bc:	0800f060 	.word	0x0800f060

0800e4c0 <std>:
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	b510      	push	{r4, lr}
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ce:	6083      	str	r3, [r0, #8]
 800e4d0:	8181      	strh	r1, [r0, #12]
 800e4d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4d4:	81c2      	strh	r2, [r0, #14]
 800e4d6:	6183      	str	r3, [r0, #24]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	2208      	movs	r2, #8
 800e4dc:	305c      	adds	r0, #92	; 0x5c
 800e4de:	f7fc f857 	bl	800a590 <memset>
 800e4e2:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <std+0x38>)
 800e4e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4e6:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <std+0x3c>)
 800e4e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ea:	4b05      	ldr	r3, [pc, #20]	; (800e500 <std+0x40>)
 800e4ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ee:	4b05      	ldr	r3, [pc, #20]	; (800e504 <std+0x44>)
 800e4f0:	6224      	str	r4, [r4, #32]
 800e4f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4f4:	bd10      	pop	{r4, pc}
 800e4f6:	bf00      	nop
 800e4f8:	0800e8b1 	.word	0x0800e8b1
 800e4fc:	0800e8d3 	.word	0x0800e8d3
 800e500:	0800e90b 	.word	0x0800e90b
 800e504:	0800e92f 	.word	0x0800e92f

0800e508 <_cleanup_r>:
 800e508:	4901      	ldr	r1, [pc, #4]	; (800e510 <_cleanup_r+0x8>)
 800e50a:	f000 b8af 	b.w	800e66c <_fwalk_reent>
 800e50e:	bf00      	nop
 800e510:	0800e449 	.word	0x0800e449

0800e514 <__sfmoreglue>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	2268      	movs	r2, #104	; 0x68
 800e518:	1e4d      	subs	r5, r1, #1
 800e51a:	4355      	muls	r5, r2
 800e51c:	460e      	mov	r6, r1
 800e51e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e522:	f7ff fadd 	bl	800dae0 <_malloc_r>
 800e526:	4604      	mov	r4, r0
 800e528:	b140      	cbz	r0, 800e53c <__sfmoreglue+0x28>
 800e52a:	2100      	movs	r1, #0
 800e52c:	e9c0 1600 	strd	r1, r6, [r0]
 800e530:	300c      	adds	r0, #12
 800e532:	60a0      	str	r0, [r4, #8]
 800e534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e538:	f7fc f82a 	bl	800a590 <memset>
 800e53c:	4620      	mov	r0, r4
 800e53e:	bd70      	pop	{r4, r5, r6, pc}

0800e540 <__sfp_lock_acquire>:
 800e540:	4801      	ldr	r0, [pc, #4]	; (800e548 <__sfp_lock_acquire+0x8>)
 800e542:	f000 b8b3 	b.w	800e6ac <__retarget_lock_acquire_recursive>
 800e546:	bf00      	nop
 800e548:	20000561 	.word	0x20000561

0800e54c <__sfp_lock_release>:
 800e54c:	4801      	ldr	r0, [pc, #4]	; (800e554 <__sfp_lock_release+0x8>)
 800e54e:	f000 b8ae 	b.w	800e6ae <__retarget_lock_release_recursive>
 800e552:	bf00      	nop
 800e554:	20000561 	.word	0x20000561

0800e558 <__sinit_lock_acquire>:
 800e558:	4801      	ldr	r0, [pc, #4]	; (800e560 <__sinit_lock_acquire+0x8>)
 800e55a:	f000 b8a7 	b.w	800e6ac <__retarget_lock_acquire_recursive>
 800e55e:	bf00      	nop
 800e560:	20000562 	.word	0x20000562

0800e564 <__sinit_lock_release>:
 800e564:	4801      	ldr	r0, [pc, #4]	; (800e56c <__sinit_lock_release+0x8>)
 800e566:	f000 b8a2 	b.w	800e6ae <__retarget_lock_release_recursive>
 800e56a:	bf00      	nop
 800e56c:	20000562 	.word	0x20000562

0800e570 <__sinit>:
 800e570:	b510      	push	{r4, lr}
 800e572:	4604      	mov	r4, r0
 800e574:	f7ff fff0 	bl	800e558 <__sinit_lock_acquire>
 800e578:	69a3      	ldr	r3, [r4, #24]
 800e57a:	b11b      	cbz	r3, 800e584 <__sinit+0x14>
 800e57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e580:	f7ff bff0 	b.w	800e564 <__sinit_lock_release>
 800e584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e588:	6523      	str	r3, [r4, #80]	; 0x50
 800e58a:	4b13      	ldr	r3, [pc, #76]	; (800e5d8 <__sinit+0x68>)
 800e58c:	4a13      	ldr	r2, [pc, #76]	; (800e5dc <__sinit+0x6c>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	62a2      	str	r2, [r4, #40]	; 0x28
 800e592:	42a3      	cmp	r3, r4
 800e594:	bf04      	itt	eq
 800e596:	2301      	moveq	r3, #1
 800e598:	61a3      	streq	r3, [r4, #24]
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 f820 	bl	800e5e0 <__sfp>
 800e5a0:	6060      	str	r0, [r4, #4]
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f000 f81c 	bl	800e5e0 <__sfp>
 800e5a8:	60a0      	str	r0, [r4, #8]
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 f818 	bl	800e5e0 <__sfp>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	60e0      	str	r0, [r4, #12]
 800e5b4:	2104      	movs	r1, #4
 800e5b6:	6860      	ldr	r0, [r4, #4]
 800e5b8:	f7ff ff82 	bl	800e4c0 <std>
 800e5bc:	68a0      	ldr	r0, [r4, #8]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	2109      	movs	r1, #9
 800e5c2:	f7ff ff7d 	bl	800e4c0 <std>
 800e5c6:	68e0      	ldr	r0, [r4, #12]
 800e5c8:	2202      	movs	r2, #2
 800e5ca:	2112      	movs	r1, #18
 800e5cc:	f7ff ff78 	bl	800e4c0 <std>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	61a3      	str	r3, [r4, #24]
 800e5d4:	e7d2      	b.n	800e57c <__sinit+0xc>
 800e5d6:	bf00      	nop
 800e5d8:	0800ebc4 	.word	0x0800ebc4
 800e5dc:	0800e509 	.word	0x0800e509

0800e5e0 <__sfp>:
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	4607      	mov	r7, r0
 800e5e4:	f7ff ffac 	bl	800e540 <__sfp_lock_acquire>
 800e5e8:	4b1e      	ldr	r3, [pc, #120]	; (800e664 <__sfp+0x84>)
 800e5ea:	681e      	ldr	r6, [r3, #0]
 800e5ec:	69b3      	ldr	r3, [r6, #24]
 800e5ee:	b913      	cbnz	r3, 800e5f6 <__sfp+0x16>
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f7ff ffbd 	bl	800e570 <__sinit>
 800e5f6:	3648      	adds	r6, #72	; 0x48
 800e5f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	d503      	bpl.n	800e608 <__sfp+0x28>
 800e600:	6833      	ldr	r3, [r6, #0]
 800e602:	b30b      	cbz	r3, 800e648 <__sfp+0x68>
 800e604:	6836      	ldr	r6, [r6, #0]
 800e606:	e7f7      	b.n	800e5f8 <__sfp+0x18>
 800e608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e60c:	b9d5      	cbnz	r5, 800e644 <__sfp+0x64>
 800e60e:	4b16      	ldr	r3, [pc, #88]	; (800e668 <__sfp+0x88>)
 800e610:	60e3      	str	r3, [r4, #12]
 800e612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e616:	6665      	str	r5, [r4, #100]	; 0x64
 800e618:	f000 f847 	bl	800e6aa <__retarget_lock_init_recursive>
 800e61c:	f7ff ff96 	bl	800e54c <__sfp_lock_release>
 800e620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e628:	6025      	str	r5, [r4, #0]
 800e62a:	61a5      	str	r5, [r4, #24]
 800e62c:	2208      	movs	r2, #8
 800e62e:	4629      	mov	r1, r5
 800e630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e634:	f7fb ffac 	bl	800a590 <memset>
 800e638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e63c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e640:	4620      	mov	r0, r4
 800e642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e644:	3468      	adds	r4, #104	; 0x68
 800e646:	e7d9      	b.n	800e5fc <__sfp+0x1c>
 800e648:	2104      	movs	r1, #4
 800e64a:	4638      	mov	r0, r7
 800e64c:	f7ff ff62 	bl	800e514 <__sfmoreglue>
 800e650:	4604      	mov	r4, r0
 800e652:	6030      	str	r0, [r6, #0]
 800e654:	2800      	cmp	r0, #0
 800e656:	d1d5      	bne.n	800e604 <__sfp+0x24>
 800e658:	f7ff ff78 	bl	800e54c <__sfp_lock_release>
 800e65c:	230c      	movs	r3, #12
 800e65e:	603b      	str	r3, [r7, #0]
 800e660:	e7ee      	b.n	800e640 <__sfp+0x60>
 800e662:	bf00      	nop
 800e664:	0800ebc4 	.word	0x0800ebc4
 800e668:	ffff0001 	.word	0xffff0001

0800e66c <_fwalk_reent>:
 800e66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e670:	4606      	mov	r6, r0
 800e672:	4688      	mov	r8, r1
 800e674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e678:	2700      	movs	r7, #0
 800e67a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e67e:	f1b9 0901 	subs.w	r9, r9, #1
 800e682:	d505      	bpl.n	800e690 <_fwalk_reent+0x24>
 800e684:	6824      	ldr	r4, [r4, #0]
 800e686:	2c00      	cmp	r4, #0
 800e688:	d1f7      	bne.n	800e67a <_fwalk_reent+0xe>
 800e68a:	4638      	mov	r0, r7
 800e68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e690:	89ab      	ldrh	r3, [r5, #12]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d907      	bls.n	800e6a6 <_fwalk_reent+0x3a>
 800e696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e69a:	3301      	adds	r3, #1
 800e69c:	d003      	beq.n	800e6a6 <_fwalk_reent+0x3a>
 800e69e:	4629      	mov	r1, r5
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	47c0      	blx	r8
 800e6a4:	4307      	orrs	r7, r0
 800e6a6:	3568      	adds	r5, #104	; 0x68
 800e6a8:	e7e9      	b.n	800e67e <_fwalk_reent+0x12>

0800e6aa <__retarget_lock_init_recursive>:
 800e6aa:	4770      	bx	lr

0800e6ac <__retarget_lock_acquire_recursive>:
 800e6ac:	4770      	bx	lr

0800e6ae <__retarget_lock_release_recursive>:
 800e6ae:	4770      	bx	lr

0800e6b0 <__swhatbuf_r>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	460e      	mov	r6, r1
 800e6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b8:	2900      	cmp	r1, #0
 800e6ba:	b096      	sub	sp, #88	; 0x58
 800e6bc:	4614      	mov	r4, r2
 800e6be:	461d      	mov	r5, r3
 800e6c0:	da08      	bge.n	800e6d4 <__swhatbuf_r+0x24>
 800e6c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	602a      	str	r2, [r5, #0]
 800e6ca:	061a      	lsls	r2, r3, #24
 800e6cc:	d410      	bmi.n	800e6f0 <__swhatbuf_r+0x40>
 800e6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d2:	e00e      	b.n	800e6f2 <__swhatbuf_r+0x42>
 800e6d4:	466a      	mov	r2, sp
 800e6d6:	f000 f951 	bl	800e97c <_fstat_r>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	dbf1      	blt.n	800e6c2 <__swhatbuf_r+0x12>
 800e6de:	9a01      	ldr	r2, [sp, #4]
 800e6e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6e8:	425a      	negs	r2, r3
 800e6ea:	415a      	adcs	r2, r3
 800e6ec:	602a      	str	r2, [r5, #0]
 800e6ee:	e7ee      	b.n	800e6ce <__swhatbuf_r+0x1e>
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	b016      	add	sp, #88	; 0x58
 800e6f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6fc <__smakebuf_r>:
 800e6fc:	898b      	ldrh	r3, [r1, #12]
 800e6fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e700:	079d      	lsls	r5, r3, #30
 800e702:	4606      	mov	r6, r0
 800e704:	460c      	mov	r4, r1
 800e706:	d507      	bpl.n	800e718 <__smakebuf_r+0x1c>
 800e708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	6123      	str	r3, [r4, #16]
 800e710:	2301      	movs	r3, #1
 800e712:	6163      	str	r3, [r4, #20]
 800e714:	b002      	add	sp, #8
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	ab01      	add	r3, sp, #4
 800e71a:	466a      	mov	r2, sp
 800e71c:	f7ff ffc8 	bl	800e6b0 <__swhatbuf_r>
 800e720:	9900      	ldr	r1, [sp, #0]
 800e722:	4605      	mov	r5, r0
 800e724:	4630      	mov	r0, r6
 800e726:	f7ff f9db 	bl	800dae0 <_malloc_r>
 800e72a:	b948      	cbnz	r0, 800e740 <__smakebuf_r+0x44>
 800e72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e730:	059a      	lsls	r2, r3, #22
 800e732:	d4ef      	bmi.n	800e714 <__smakebuf_r+0x18>
 800e734:	f023 0303 	bic.w	r3, r3, #3
 800e738:	f043 0302 	orr.w	r3, r3, #2
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	e7e3      	b.n	800e708 <__smakebuf_r+0xc>
 800e740:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <__smakebuf_r+0x7c>)
 800e742:	62b3      	str	r3, [r6, #40]	; 0x28
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	6020      	str	r0, [r4, #0]
 800e748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e74c:	81a3      	strh	r3, [r4, #12]
 800e74e:	9b00      	ldr	r3, [sp, #0]
 800e750:	6163      	str	r3, [r4, #20]
 800e752:	9b01      	ldr	r3, [sp, #4]
 800e754:	6120      	str	r0, [r4, #16]
 800e756:	b15b      	cbz	r3, 800e770 <__smakebuf_r+0x74>
 800e758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e75c:	4630      	mov	r0, r6
 800e75e:	f000 f91f 	bl	800e9a0 <_isatty_r>
 800e762:	b128      	cbz	r0, 800e770 <__smakebuf_r+0x74>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	f023 0303 	bic.w	r3, r3, #3
 800e76a:	f043 0301 	orr.w	r3, r3, #1
 800e76e:	81a3      	strh	r3, [r4, #12]
 800e770:	89a0      	ldrh	r0, [r4, #12]
 800e772:	4305      	orrs	r5, r0
 800e774:	81a5      	strh	r5, [r4, #12]
 800e776:	e7cd      	b.n	800e714 <__smakebuf_r+0x18>
 800e778:	0800e509 	.word	0x0800e509

0800e77c <memmove>:
 800e77c:	4288      	cmp	r0, r1
 800e77e:	b510      	push	{r4, lr}
 800e780:	eb01 0402 	add.w	r4, r1, r2
 800e784:	d902      	bls.n	800e78c <memmove+0x10>
 800e786:	4284      	cmp	r4, r0
 800e788:	4623      	mov	r3, r4
 800e78a:	d807      	bhi.n	800e79c <memmove+0x20>
 800e78c:	1e43      	subs	r3, r0, #1
 800e78e:	42a1      	cmp	r1, r4
 800e790:	d008      	beq.n	800e7a4 <memmove+0x28>
 800e792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e79a:	e7f8      	b.n	800e78e <memmove+0x12>
 800e79c:	4402      	add	r2, r0
 800e79e:	4601      	mov	r1, r0
 800e7a0:	428a      	cmp	r2, r1
 800e7a2:	d100      	bne.n	800e7a6 <memmove+0x2a>
 800e7a4:	bd10      	pop	{r4, pc}
 800e7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ae:	e7f7      	b.n	800e7a0 <memmove+0x24>

0800e7b0 <__malloc_lock>:
 800e7b0:	4801      	ldr	r0, [pc, #4]	; (800e7b8 <__malloc_lock+0x8>)
 800e7b2:	f7ff bf7b 	b.w	800e6ac <__retarget_lock_acquire_recursive>
 800e7b6:	bf00      	nop
 800e7b8:	20000560 	.word	0x20000560

0800e7bc <__malloc_unlock>:
 800e7bc:	4801      	ldr	r0, [pc, #4]	; (800e7c4 <__malloc_unlock+0x8>)
 800e7be:	f7ff bf76 	b.w	800e6ae <__retarget_lock_release_recursive>
 800e7c2:	bf00      	nop
 800e7c4:	20000560 	.word	0x20000560

0800e7c8 <_realloc_r>:
 800e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	4680      	mov	r8, r0
 800e7ce:	4614      	mov	r4, r2
 800e7d0:	460e      	mov	r6, r1
 800e7d2:	b921      	cbnz	r1, 800e7de <_realloc_r+0x16>
 800e7d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	4611      	mov	r1, r2
 800e7da:	f7ff b981 	b.w	800dae0 <_malloc_r>
 800e7de:	b92a      	cbnz	r2, 800e7ec <_realloc_r+0x24>
 800e7e0:	f7ff f912 	bl	800da08 <_free_r>
 800e7e4:	4625      	mov	r5, r4
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	f000 f8fa 	bl	800e9e4 <_malloc_usable_size_r>
 800e7f0:	4284      	cmp	r4, r0
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	d802      	bhi.n	800e7fc <_realloc_r+0x34>
 800e7f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7fa:	d812      	bhi.n	800e822 <_realloc_r+0x5a>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4640      	mov	r0, r8
 800e800:	f7ff f96e 	bl	800dae0 <_malloc_r>
 800e804:	4605      	mov	r5, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	d0ed      	beq.n	800e7e6 <_realloc_r+0x1e>
 800e80a:	42bc      	cmp	r4, r7
 800e80c:	4622      	mov	r2, r4
 800e80e:	4631      	mov	r1, r6
 800e810:	bf28      	it	cs
 800e812:	463a      	movcs	r2, r7
 800e814:	f7fe fc12 	bl	800d03c <memcpy>
 800e818:	4631      	mov	r1, r6
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7ff f8f4 	bl	800da08 <_free_r>
 800e820:	e7e1      	b.n	800e7e6 <_realloc_r+0x1e>
 800e822:	4635      	mov	r5, r6
 800e824:	e7df      	b.n	800e7e6 <_realloc_r+0x1e>

0800e826 <_raise_r>:
 800e826:	291f      	cmp	r1, #31
 800e828:	b538      	push	{r3, r4, r5, lr}
 800e82a:	4604      	mov	r4, r0
 800e82c:	460d      	mov	r5, r1
 800e82e:	d904      	bls.n	800e83a <_raise_r+0x14>
 800e830:	2316      	movs	r3, #22
 800e832:	6003      	str	r3, [r0, #0]
 800e834:	f04f 30ff 	mov.w	r0, #4294967295
 800e838:	bd38      	pop	{r3, r4, r5, pc}
 800e83a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e83c:	b112      	cbz	r2, 800e844 <_raise_r+0x1e>
 800e83e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e842:	b94b      	cbnz	r3, 800e858 <_raise_r+0x32>
 800e844:	4620      	mov	r0, r4
 800e846:	f000 f831 	bl	800e8ac <_getpid_r>
 800e84a:	462a      	mov	r2, r5
 800e84c:	4601      	mov	r1, r0
 800e84e:	4620      	mov	r0, r4
 800e850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e854:	f000 b818 	b.w	800e888 <_kill_r>
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d00a      	beq.n	800e872 <_raise_r+0x4c>
 800e85c:	1c59      	adds	r1, r3, #1
 800e85e:	d103      	bne.n	800e868 <_raise_r+0x42>
 800e860:	2316      	movs	r3, #22
 800e862:	6003      	str	r3, [r0, #0]
 800e864:	2001      	movs	r0, #1
 800e866:	e7e7      	b.n	800e838 <_raise_r+0x12>
 800e868:	2400      	movs	r4, #0
 800e86a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e86e:	4628      	mov	r0, r5
 800e870:	4798      	blx	r3
 800e872:	2000      	movs	r0, #0
 800e874:	e7e0      	b.n	800e838 <_raise_r+0x12>
	...

0800e878 <raise>:
 800e878:	4b02      	ldr	r3, [pc, #8]	; (800e884 <raise+0xc>)
 800e87a:	4601      	mov	r1, r0
 800e87c:	6818      	ldr	r0, [r3, #0]
 800e87e:	f7ff bfd2 	b.w	800e826 <_raise_r>
 800e882:	bf00      	nop
 800e884:	20000010 	.word	0x20000010

0800e888 <_kill_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4d07      	ldr	r5, [pc, #28]	; (800e8a8 <_kill_r+0x20>)
 800e88c:	2300      	movs	r3, #0
 800e88e:	4604      	mov	r4, r0
 800e890:	4608      	mov	r0, r1
 800e892:	4611      	mov	r1, r2
 800e894:	602b      	str	r3, [r5, #0]
 800e896:	f7f4 fc07 	bl	80030a8 <_kill>
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	d102      	bne.n	800e8a4 <_kill_r+0x1c>
 800e89e:	682b      	ldr	r3, [r5, #0]
 800e8a0:	b103      	cbz	r3, 800e8a4 <_kill_r+0x1c>
 800e8a2:	6023      	str	r3, [r4, #0]
 800e8a4:	bd38      	pop	{r3, r4, r5, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000564 	.word	0x20000564

0800e8ac <_getpid_r>:
 800e8ac:	f7f4 bbf4 	b.w	8003098 <_getpid>

0800e8b0 <__sread>:
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b8:	f000 f89c 	bl	800e9f4 <_read_r>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	bfab      	itete	ge
 800e8c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e8c4:	181b      	addge	r3, r3, r0
 800e8c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8ca:	bfac      	ite	ge
 800e8cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8ce:	81a3      	strhlt	r3, [r4, #12]
 800e8d0:	bd10      	pop	{r4, pc}

0800e8d2 <__swrite>:
 800e8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d6:	461f      	mov	r7, r3
 800e8d8:	898b      	ldrh	r3, [r1, #12]
 800e8da:	05db      	lsls	r3, r3, #23
 800e8dc:	4605      	mov	r5, r0
 800e8de:	460c      	mov	r4, r1
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	d505      	bpl.n	800e8f0 <__swrite+0x1e>
 800e8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f000 f868 	bl	800e9c0 <_lseek_r>
 800e8f0:	89a3      	ldrh	r3, [r4, #12]
 800e8f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8fa:	81a3      	strh	r3, [r4, #12]
 800e8fc:	4632      	mov	r2, r6
 800e8fe:	463b      	mov	r3, r7
 800e900:	4628      	mov	r0, r5
 800e902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e906:	f000 b817 	b.w	800e938 <_write_r>

0800e90a <__sseek>:
 800e90a:	b510      	push	{r4, lr}
 800e90c:	460c      	mov	r4, r1
 800e90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e912:	f000 f855 	bl	800e9c0 <_lseek_r>
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	bf15      	itete	ne
 800e91c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e91e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e926:	81a3      	strheq	r3, [r4, #12]
 800e928:	bf18      	it	ne
 800e92a:	81a3      	strhne	r3, [r4, #12]
 800e92c:	bd10      	pop	{r4, pc}

0800e92e <__sclose>:
 800e92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e932:	f000 b813 	b.w	800e95c <_close_r>
	...

0800e938 <_write_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	4d07      	ldr	r5, [pc, #28]	; (800e958 <_write_r+0x20>)
 800e93c:	4604      	mov	r4, r0
 800e93e:	4608      	mov	r0, r1
 800e940:	4611      	mov	r1, r2
 800e942:	2200      	movs	r2, #0
 800e944:	602a      	str	r2, [r5, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	f7f4 fbe5 	bl	8003116 <_write>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_write_r+0x1e>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_write_r+0x1e>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	20000564 	.word	0x20000564

0800e95c <_close_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	4d06      	ldr	r5, [pc, #24]	; (800e978 <_close_r+0x1c>)
 800e960:	2300      	movs	r3, #0
 800e962:	4604      	mov	r4, r0
 800e964:	4608      	mov	r0, r1
 800e966:	602b      	str	r3, [r5, #0]
 800e968:	f7f4 fbf1 	bl	800314e <_close>
 800e96c:	1c43      	adds	r3, r0, #1
 800e96e:	d102      	bne.n	800e976 <_close_r+0x1a>
 800e970:	682b      	ldr	r3, [r5, #0]
 800e972:	b103      	cbz	r3, 800e976 <_close_r+0x1a>
 800e974:	6023      	str	r3, [r4, #0]
 800e976:	bd38      	pop	{r3, r4, r5, pc}
 800e978:	20000564 	.word	0x20000564

0800e97c <_fstat_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4d07      	ldr	r5, [pc, #28]	; (800e99c <_fstat_r+0x20>)
 800e980:	2300      	movs	r3, #0
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	4611      	mov	r1, r2
 800e988:	602b      	str	r3, [r5, #0]
 800e98a:	f7f4 fbec 	bl	8003166 <_fstat>
 800e98e:	1c43      	adds	r3, r0, #1
 800e990:	d102      	bne.n	800e998 <_fstat_r+0x1c>
 800e992:	682b      	ldr	r3, [r5, #0]
 800e994:	b103      	cbz	r3, 800e998 <_fstat_r+0x1c>
 800e996:	6023      	str	r3, [r4, #0]
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	bf00      	nop
 800e99c:	20000564 	.word	0x20000564

0800e9a0 <_isatty_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4d06      	ldr	r5, [pc, #24]	; (800e9bc <_isatty_r+0x1c>)
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	4608      	mov	r0, r1
 800e9aa:	602b      	str	r3, [r5, #0]
 800e9ac:	f7f4 fbeb 	bl	8003186 <_isatty>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	d102      	bne.n	800e9ba <_isatty_r+0x1a>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	b103      	cbz	r3, 800e9ba <_isatty_r+0x1a>
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	20000564 	.word	0x20000564

0800e9c0 <_lseek_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d07      	ldr	r5, [pc, #28]	; (800e9e0 <_lseek_r+0x20>)
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f7f4 fbe4 	bl	800319c <_lseek>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_lseek_r+0x1e>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_lseek_r+0x1e>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20000564 	.word	0x20000564

0800e9e4 <_malloc_usable_size_r>:
 800e9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9e8:	1f18      	subs	r0, r3, #4
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	bfbc      	itt	lt
 800e9ee:	580b      	ldrlt	r3, [r1, r0]
 800e9f0:	18c0      	addlt	r0, r0, r3
 800e9f2:	4770      	bx	lr

0800e9f4 <_read_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d07      	ldr	r5, [pc, #28]	; (800ea14 <_read_r+0x20>)
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	2200      	movs	r2, #0
 800ea00:	602a      	str	r2, [r5, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	f7f4 fb6a 	bl	80030dc <_read>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	d102      	bne.n	800ea12 <_read_r+0x1e>
 800ea0c:	682b      	ldr	r3, [r5, #0]
 800ea0e:	b103      	cbz	r3, 800ea12 <_read_r+0x1e>
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	bd38      	pop	{r3, r4, r5, pc}
 800ea14:	20000564 	.word	0x20000564

0800ea18 <_init>:
 800ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1a:	bf00      	nop
 800ea1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea1e:	bc08      	pop	{r3}
 800ea20:	469e      	mov	lr, r3
 800ea22:	4770      	bx	lr

0800ea24 <_fini>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	bf00      	nop
 800ea28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea2a:	bc08      	pop	{r3}
 800ea2c:	469e      	mov	lr, r3
 800ea2e:	4770      	bx	lr
