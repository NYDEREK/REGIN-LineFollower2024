/*
 * SimpleParser.c
 *
 *  Created on: Aug 28, 2024
 *      Author: Szymon
 */


#include "main.h"
#include "gpio.h"
#include "usart.h"
#include "string.h"
#include "stdio.h"
#include "RingBuffer.h"
#include "stdlib.h"
#include "SimpleParser.h"
#include "Line_Follower.h"
char My_Name[32] = "GRUZIK3.0";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *ReceivedData)
{
	uint8_t Tmp;
	uint8_t i = 0;
	do
	{
		RB_Read(Buf, &Tmp);

		if(Tmp == ENDLINE)
		{
			ReceivedData[i] = 0;

		}

		else
		{
			ReceivedData[i] = Tmp;
		}
		i++;

	} while(Tmp != ENDLINE);

}

static void kp_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Kp = atof(ParsePointer);
	}

}
static void kd_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Kd = atof(ParsePointer);
	}
}
static void Base_speed_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Base_speed_R = atof(ParsePointer);
		LF->Base_speed_L = atof(ParsePointer);
	}
}

static void Max_speed_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
		LF->Max_speed_R = atof(ParsePointer);
		LF->Max_speed_L = atof(ParsePointer);
	}
}
static void Sharp_bend_speed_right_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Sharp_bend_speed_right = atof(ParsePointer);
	}
}
static void Sharp_bend_speed_left_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Sharp_bend_speed_left = atof(ParsePointer);
	}
}
static void Bend_speed_right_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Bend_speed_right = atof(ParsePointer);
	}
}
static void Bend_speed_left_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 32)
	{
	LF->Bend_speed_left = atof(ParsePointer);
	}
}
static void App_Controll(char RxData, LineFollower_t *LineFollower)
{
	/*Stop robot*/
	if(RxData == 'N')
	{
		uint8_t buffer[48];
		/*Stop GRUZIK2.0 and turn off the LED*/
/////////////////TODO: przypisz ledy
		HAL_GPIO_WritePin(PD2_GPIO_Port, PD2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, GPIO_PIN_RESET);
		/*Send battery voltage*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
	}
	/*Start robot*/
	if (RxData == 'Y')
	{
		/*Proportional to battery percentage boost for motors
		 * to keep roughly same speed as with full battery*/
		float battery_percentage;
		uint8_t buffer[48];
		//Calculate battery percentage based on battery voltage
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;

		//Full battery voltage in working line follower is about 8.24V
		battery_percentage = (LineFollower->battery_voltage / 8.24) * 100;

		/*To don't damage 2s LiPo battery Line follower can't start with battery below 7.2V*/
		if (LineFollower->battery_voltage < 7.2)
		{
			sprintf((char*)buffer, "! Low Battery !\r\n");
			HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);
			return;
		}
		/*Motor speed*/
		LineFollower->Speed_level = ((100 - battery_percentage + 100) / 100) - LineFollower->Speed_offset;

		if(LineFollower->Speed_level < 1)
		{
			LineFollower->Speed_level = 1;
		}

		/*Send battery data*/
		LineFollower->battery_voltage = (LineFollower->Adc_Value * 8.3)/3831;
		sprintf((char*)buffer, "ADC_Value = %d \r\n Battery_Voltage = %0.2f V \r\n", LineFollower->Adc_Value, LineFollower->battery_voltage);
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);


		sprintf((char*)buffer, "Percentage = %0.2f \r\n Speed_level = %0.2f \r\n", battery_percentage, LineFollower->Speed_level);
		HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 100);

		/*Stop LineFollower and turn on the LED*/
////////////////////TODO: ledyyyy
		HAL_GPIO_WritePin(PD2_GPIO_Port, PD2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, GPIO_PIN_SET);
	}
	/*LOW mode*/
	if(RxData == 'a')
	{
		LineFollower->Base_speed_R = 100;
		LineFollower->Base_speed_L = 100;
		LineFollower->Max_speed_L = 100;
		LineFollower->Max_speed_R = 100;
		LineFollower->Sharp_bend_speed_right = -60;
		LineFollower->Sharp_bend_speed_left = 95;
		LineFollower->Bend_speed_right = -25;
		LineFollower->Bend_speed_left = 100;
		LineFollower->Kp = 0.01;
		LineFollower->Kd = 0.08;
	}
	/*LOW+ mode*/
	if(RxData == 'd')
	{
		LineFollower->Base_speed_R = 100;
		LineFollower->Base_speed_L = 100;
		LineFollower->Max_speed_L = 150;
		LineFollower->Max_speed_R = 150;
		LineFollower->Sharp_bend_speed_right = -30;
		LineFollower->Sharp_bend_speed_left = 100;
		LineFollower->Bend_speed_right = -40;
		LineFollower->Bend_speed_left = 80;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.08;
	}
	/*Medium mode*/
	if(RxData == 'b')
	{
		LineFollower->Base_speed_R = 115;
		LineFollower->Base_speed_L = 115;
		LineFollower->Max_speed_L = 115;
		LineFollower->Max_speed_R = 115;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 85;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.25;
	}
	/*Medium+ mode*/
	if(RxData == 'e')
	{
		LineFollower->Base_speed_R = 120;
		LineFollower->Base_speed_L = 120;
		LineFollower->Max_speed_L = 120;
		LineFollower->Max_speed_R = 120;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 92;
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 30;//110
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.2;//0.25
	}
	/*HIGH mode*/
	if(RxData == 'c')
	{
		LineFollower->Base_speed_R = 125;
		LineFollower->Base_speed_L = 125;
		LineFollower->Max_speed_L = 130;//125
		LineFollower->Max_speed_R = 130;//125
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 92; //88
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 30;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.175;//0.2
	}
	/*HIGH+ mode*/ /*For now it's just HIGH*/
	if(RxData == 'f')
	{
		LineFollower->Base_speed_R = 130;
		LineFollower->Base_speed_L = 130;
		LineFollower->Max_speed_L = 130;
		LineFollower->Max_speed_R = 130;
		LineFollower->Sharp_bend_speed_right = -70;
		LineFollower->Sharp_bend_speed_left = 92; //88
		LineFollower->Bend_speed_right = -50;
		LineFollower->Bend_speed_left = 30;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.175;//0.2
	}
	/*TRUBO mode*/
	if(RxData == 'i')
	{
		LineFollower->Base_speed_R = 135;
		LineFollower->Base_speed_L = 135;
		LineFollower->Max_speed_L = 135;
		LineFollower->Max_speed_R = 135;
		LineFollower->Sharp_bend_speed_right = -60; //-65
		LineFollower->Sharp_bend_speed_left = 70;
		LineFollower->Bend_speed_right = -60;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.2;
	}
	/*TRUBO+ mode*/
	if(RxData == 'j')
	{
	   LineFollower->Base_speed_R = 140;
	   LineFollower->Base_speed_L = 140;
	   LineFollower->Max_speed_L = 140;
	   LineFollower->Max_speed_R = 140;
	   LineFollower->Sharp_bend_speed_right = -60;
	   LineFollower->Sharp_bend_speed_left = 70;
	   LineFollower->Bend_speed_right = -60;
	   LineFollower->Bend_speed_left = 110;
	   LineFollower->Kp = 0.015;
	   LineFollower->Kd = 0.2;
	}
	/*ULTRA mode*/
	if(RxData == 'k')
	{
		LineFollower->Base_speed_R = 145;
		LineFollower->Base_speed_L = 145;
		LineFollower->Max_speed_L = 145;
		LineFollower->Max_speed_R = 145;
		LineFollower->Sharp_bend_speed_right = -60;//-70
		LineFollower->Sharp_bend_speed_left = 70;//88
		LineFollower->Bend_speed_right = -60;
		LineFollower->Bend_speed_left = 110;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.22;     //Jeśli sie gubi wylaturje itd mozna zwiększyć jesli sobie radzi to mozna obniżyc i zwiększyc płynność
	 }
	 /*ULTRA+ mode*/
	 if(RxData == 'l')
	 {
		LineFollower->Base_speed_R = 150;
		LineFollower->Base_speed_L = 150;
		LineFollower->Max_speed_L = 150;
		LineFollower->Max_speed_R = 150;
		LineFollower->Sharp_bend_speed_right = -55;
		LineFollower->Sharp_bend_speed_left = 75;
		LineFollower->Bend_speed_right = -60;
		LineFollower->Bend_speed_left = 120;
		LineFollower->Kp = 0.015;
		LineFollower->Kd = 0.23;
	  }
	  /*EXTREME mode*/
	  if(RxData == 'm')
	  {
		 LineFollower->Base_speed_R = 155;
		 LineFollower->Base_speed_L = 155;
		 LineFollower->Max_speed_L = 155;
		 LineFollower->Max_speed_R = 155;
		 LineFollower->Sharp_bend_speed_right = -70;
		 LineFollower->Sharp_bend_speed_left = 85;
		 LineFollower->Bend_speed_right = -50;
		 LineFollower->Bend_speed_left = 30;
		 LineFollower->Kp = 0.015;
		 LineFollower->Kd = 0.265;
	  }

 	  /*EXTREME+ mode*/
 	  if(RxData == 'n')
 	  {
 	    LineFollower->Base_speed_R = 160;
 	    LineFollower->Base_speed_L = 160;
 	    LineFollower->Max_speed_L = 160;
 	  	LineFollower->Max_speed_R = 160;
 	 	LineFollower->Sharp_bend_speed_right = -70;
 		LineFollower->Sharp_bend_speed_left = 85;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 30;
 		LineFollower->Kp = 0.015;
 		LineFollower->Kd = 0.265;
 	  }
 	  /*SPECIAL mode*/
 	  if(RxData == 'h')
 	  {
 	    LineFollower->Base_speed_R = 135;
 	    LineFollower->Base_speed_L = 135;
 	    LineFollower->Max_speed_L = 135;
 	    LineFollower->Max_speed_R = 135;
 	 	LineFollower->Sharp_bend_speed_right = -66;
 		LineFollower->Sharp_bend_speed_left = 92;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 30;
 		LineFollower->Kp = 0.015;
 		LineFollower->Kd = 0.2;
 	  }
 	  /*RA-1-final-slower*/
 	  if(RxData == 'o')
 	  {
 	    LineFollower->Base_speed_R = 143;
 	    LineFollower->Base_speed_L = 143;
 	   	LineFollower->Max_speed_L = 182;
 	  	LineFollower->Max_speed_R = 182;
 	  	LineFollower->Sharp_bend_speed_right = -76;
 		LineFollower->Sharp_bend_speed_left = 90;
 		LineFollower->Bend_speed_right = -50;
 		LineFollower->Bend_speed_left = 100;
 		LineFollower->Kp = 0.02;
 		LineFollower->Kd = 350;
 	   }
 	   /*RA-2-eliminations-faster*/
 	   if(RxData == 'u')
 	   {
 	     LineFollower->Base_speed_R = 153;
 	     LineFollower->Base_speed_L = 153;
 	     LineFollower->Max_speed_L = 187;
 	   	 LineFollower->Max_speed_R = 187;
 	  	 LineFollower->Sharp_bend_speed_right = -76;
 	 	 LineFollower->Sharp_bend_speed_left = 90;
 	 	 LineFollower->Bend_speed_right = -50;
 	 	 LineFollower->Bend_speed_left = 100;
 	 	 LineFollower->Kp = 0.02;
 	 	 LineFollower->Kd = 350;
 	   }
 	  /*Gruzik2.1 Robo Comp 2024r 1*/
 	  if(RxData == 'p')
 	  {
 		 LineFollower->Base_speed_R = 143;
 		 LineFollower->Base_speed_L = 143;
 		 LineFollower->Max_speed_L = 182;
 		 LineFollower->Max_speed_R = 182;
 		 LineFollower->Sharp_bend_speed_right = -76;
 		 LineFollower->Sharp_bend_speed_left = 90;
 		 LineFollower->Bend_speed_right = -40;//40
 		 LineFollower->Bend_speed_left = 110;
 		 LineFollower->Kp = 0.02;
 		 LineFollower->Kd = 350;
 	  }
 	  /*Gruzik2.1 Robo Comp 2024 2*/
 	  if(RxData == 'r')
 	  {
 		 LineFollower->Base_speed_R = 153;
 		 LineFollower->Base_speed_L = 153;
 		 LineFollower->Max_speed_L = 187;
 		 LineFollower->Max_speed_R = 187;
 		 LineFollower->Sharp_bend_speed_right = -76;
 		 LineFollower->Sharp_bend_speed_left = 90;
 		 LineFollower->Bend_speed_right = -40;//40
 		 LineFollower->Bend_speed_left = 110;
 		 LineFollower->Kp = 0.02;
 		 LineFollower->Kd = 350;
 	   }
}

static void Mode_change(LineFollower_t *LF)
{
	char *ParsePointer = strtok(NULL, ",");

	if(strlen(ParsePointer) > 0 && strlen(ParsePointer) < 2)
	{
		App_Controll(ParsePointer[0], LF);
	}
}
void Parser_Parse(uint8_t *ReceivedData, LineFollower_t *LineFollower)
{
	char *ParsePointer = strtok((char*)ReceivedData, "=");

	if(!strcmp("Kp",ParsePointer))
	{
		kp_change(LineFollower);
	}
	else if(!strcmp("Kd",ParsePointer))
	{
		kd_change(LineFollower);
	}
	else if(!strcmp("Base_speed",ParsePointer))
	{
		Base_speed_change(LineFollower);
	}
	else if(!strcmp("Max_speed",ParsePointer))
	{
		Max_speed_change(LineFollower);
	}
	else if(!strcmp("Sharp_bend_speed_right",ParsePointer))
	{
		Sharp_bend_speed_right_change(LineFollower);
	}
	else if(!strcmp("Sharp_bend_speed_left",ParsePointer))
	{
		Sharp_bend_speed_left_change(LineFollower);
	}
	else if(!strcmp("Bend_speed_right",ParsePointer))
	{
		Bend_speed_right_change(LineFollower);
	}
	else if(!strcmp("Bend_speed_left",ParsePointer))
	{
		Bend_speed_left_change(LineFollower);
	}
	else if(!strcmp("Mode",ParsePointer))
	{
		Mode_change(LineFollower);
	}
}
